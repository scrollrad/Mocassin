<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mocassin.Tools.Evaluation</name>
    </assembly>
    <members>
        <member name="T:Mocassin.Tools.Evaluation.Context.IJobContext">
            <summary>
                Provides a common interface for basic job evaluation of the binary simulation state
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.IJobContext.ModelContext">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext" /> of this job
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.IJobContext.SimulationModel">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.ModelContext.ISimulationModel" /> of this job
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.IJobContext.McsReader">
            <summary>
                Get a <see cref="T:Mocassin.Tools.UAccess.Readers.McsContentReader" /> to read the contents of the binary state
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Context.JobContext">
            <summary>
                Provides a context for evaluation of the results of a single <see cref="T:Mocassin.Model.Translator.SimulationJobModel" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.JobContext.EvaluationContext">
            <summary>
                Get the <see cref="T:Mocassin.Tools.Evaluation.Context.MslEvaluationContext" /> that the job belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.JobContext.JobModel">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.SimulationJobModel" /> that is evaluated
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.JobContext.McsReader">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.JobContext.IsReadingPrimaryState">
            <summary>
                Get a boolean flag indicating if the context reads the primary or secondary (pre-run) state
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.JobContext.ModelContext">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.JobContext.SimulationModel">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.JobContext.DataId">
            <summary>
                Get the id of the context in its data source collection
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.JobContext.FullConfigName">
            <summary>
                Get the auto generated full config name
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.JobContext.#ctor(Mocassin.Model.Translator.SimulationJobModel,Mocassin.Tools.Evaluation.Context.MslEvaluationContext,System.Int32)">
            <summary>
                Creates new <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> for the passed <see cref="T:Mocassin.Model.Translator.SimulationJobModel" /> and
                <see cref="T:Mocassin.Tools.Evaluation.Context.MslEvaluationContext" />
            </summary>
            <param name="jobModel"></param>
            <param name="evaluationContext"></param>
            <param name="dataId"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.JobContext.CreatePrimary(Mocassin.Model.Translator.SimulationJobModel,Mocassin.Tools.Evaluation.Context.MslEvaluationContext,System.Int32)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> that targets the primary results of the passed
                <see cref="T:Mocassin.Model.Translator.SimulationJobModel" /> within the specified <see cref="T:Mocassin.Tools.Evaluation.Context.MslEvaluationContext" />
            </summary>
            <param name="jobModel"></param>
            <param name="evaluationContext"></param>
            <param name="dataId"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.JobContext.CreateSecondary(Mocassin.Model.Translator.SimulationJobModel,Mocassin.Tools.Evaluation.Context.MslEvaluationContext,System.Int32)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> that targets the secondary results of the passed
                <see cref="T:Mocassin.Model.Translator.SimulationJobModel" /> within the specified <see cref="T:Mocassin.Tools.Evaluation.Context.MslEvaluationContext" />
            </summary>
            <param name="jobModel"></param>
            <param name="evaluationContext"></param>
            <param name="dataId"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.JobContext.SwitchMcsTargetInternal(System.Byte[])">
            <summary>
                Tries to switch the <see cref="P:Mocassin.Tools.Evaluation.Context.JobContext.McsReader" /> target to the passed binary set
            </summary>
            <param name="mcsBinary"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.JobContext.CreateInternal(Mocassin.Model.Translator.SimulationJobModel,Mocassin.Tools.Evaluation.Context.MslEvaluationContext,System.Int32,System.Boolean)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> for a <see cref="T:Mocassin.Model.Translator.SimulationJobModel" /> with a flag if the
                secondary state should be targeted
            </summary>
            <param name="jobModel"></param>
            <param name="evaluationContext"></param>
            <param name="dataId"></param>
            <param name="useSecondaryState"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.JobContext.Equals(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.JobContext.MakeFullConfigName(Mocassin.Model.Translator.SimulationJobModel)">
            <summary>
                Creates a name for a <see cref="T:Mocassin.Model.Translator.SimulationJobModel" /> based on the meta information that can be used to identify
                multiplied jobs
            </summary>
            <param name="jobModel"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.JobContext.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Context.MslEvaluationContext">
            <summary>
                Context for a evaluation of contents and results provided by <see cref="T:Mocassin.Model.Translator.ISimulationLibrary" /> interfaces
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.ProjectContextCache">
            <summary>
                Get a <see cref="T:System.Collections.Generic.Dictionary`2" /> that caches <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext" /> instances for each job
                packaged context id
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.SimulationModelCache">
            <summary>
                Get a <see cref="T:System.Collections.Generic.Dictionary`2" /> that caches <see cref="T:Mocassin.Model.Translator.ModelContext.ISimulationModel" /> getters for each job
                packaged context id
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.ModelProjectProvider">
            <summary>
                Get the provider <see cref="T:System.Func`1" /> that supplies <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> instances
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.DataContext">
            <summary>
                Get the <see cref="T:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext" /> that supplies read only access to the database contents
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.MarshalService">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.IMarshalService" /> to handle marshalling of interop objects
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.#ctor(Mocassin.Model.Translator.SimulationDbContext,System.Func{Mocassin.Model.ModelProject.IModelProject})">
            <summary>
                Creates new <see cref="T:Mocassin.Tools.Evaluation.Context.MslEvaluationContext" /> for a <see cref="T:Mocassin.Model.Translator.SimulationDbContext" /> that used the
                passed <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> provider
            </summary>
            <param name="simulationLibrary"></param>
            <param name="modelProjectProvider"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.BasicJobSet">
            <summary>
                Get a <see cref="T:System.Linq.IQueryable`1" /> for queries against the <see cref="T:Mocassin.Model.Translator.SimulationJobModel" /> set of the context
                without any includes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.EvaluationJobSet">
            <summary>
                Get a <see cref="T:System.Linq.IQueryable`1" /> for queries against the <see cref="T:Mocassin.Model.Translator.SimulationJobModel" /> set of the context
                with package, meta data and result entities included where at least the run state binary exists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.MakeEvaluableSet(System.Linq.IQueryable{Mocassin.Model.Translator.SimulationJobModel},System.Boolean)">
            <summary>
                Loads the passed <see cref="T:Mocassin.Model.Translator.SimulationJobModel" /> instances and prepares a <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" /> for
                usage with the query system
            </summary>
            <param name="jobModels"></param>
            <param name="targetSecondaryState"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.EnsureModelContextCreated(Mocassin.Tools.Evaluation.Context.JobContext)">
            <summary>
                Ensures that the <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext"/> for the passed <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext"/> is loaded into the caching system
            </summary>
            <param name="jobContext"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.RestoreProjectModelContext(System.String)">
            <summary>
                Restores the <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext" /> from a passed project xml <see cref="T:System.String" />
            </summary>
            <param name="projectXml"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.RestoreProjectModelContext(System.Linq.IQueryable{Mocassin.Model.Translator.SimulationJobPackageModel})">
            <summary>
                Takes an <see cref="T:System.Linq.IQueryable`1" /> of <see cref="T:Mocassin.Model.Translator.SimulationJobPackageModel" /> and builds the sequence of
                <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext" /> instances
            </summary>
            <param name="jobPackageModels"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.GetProjectModelContext(System.Int32)">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext" /> that belongs to the passed <see cref="T:Mocassin.Model.Translator.SimulationJobPackageModel" />
                context id with an optional boolean flag to enforce recreation of the cached context
            </summary>
            <param name="contextId"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.LoadJobPackageModel(System.Int32)">
            <summary>
                Get a <see cref="T:Mocassin.Model.Translator.SimulationJobPackageModel"/> by context id from the database
            </summary>
            <param name="contextId"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.GetProjectModelContext(Mocassin.Model.Translator.SimulationJobPackageModel)">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext" /> that belongs to the passed <see cref="T:Mocassin.Model.Translator.SimulationJobPackageModel" />
            </summary>
            <param name="packageModel"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.GetProjectModelContext(Mocassin.Model.Translator.SimulationJobModel)">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext" /> that belongs to the passed <see cref="T:Mocassin.Model.Translator.SimulationJobModel" />
            </summary>
            <param name="jobModel"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.GetSimulationModel(Mocassin.Model.Translator.SimulationJobModel)">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.ModelContext.ISimulationModel" /> that belongs to the passed <see cref="T:Mocassin.Model.Translator.SimulationJobModel" />
                from the matching <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext" />
            </summary>
            <param name="jobModel"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.Create(System.String,System.Func{Mocassin.Model.ModelProject.IModelProject})">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Context.MslEvaluationContext" /> for the passed simulation database filename and
                <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> provider function
            </summary>
            <param name="filename"></param>
            <param name="modelProjectProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.Create(System.String)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Context.MslEvaluationContext" /> for the passed simulation database filename that
                uses the default <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> provider function
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.MslEvaluationContext.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Context.EvaluableJobSet">
            <summary>
                Represents an read only collection of <see cref="P:Mocassin.Tools.Evaluation.Context.EvaluableJobSet.JobContexts" /> that can be used with job contexts queries
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.EvaluableJobSet.JobContexts">
            <summary>
                The wrapped list of <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> instances
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.EvaluableJobSet.EvaluationContext">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.EvaluableJobSet.CompatibleTo(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.EvaluableJobSet.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Context.EvaluableJobSet.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.EvaluableJobSet.Count">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Context.EvaluableJobSet.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry">
            <summary>
                Extended version of the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry" /> that enables the 1 to N relation with a
                <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry.MetaEntry">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry" /> navigation property
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry.MetaEntryId">
            <summary>
                Get or set the context id of the <see cref="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry.MetaEntry" />
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry.Create(Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry,System.Boolean)">
            <summary>
                Creates an <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry" /> from a <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry" /> and
                <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry" />. This implicitly adds the particle count string to the meta entry
            </summary>
            <param name="logEntry"></param>
            <param name="metaEntry"></param>
            <param name="excludeRawData"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry.BuildParticleCountString(System.Byte[])">
            <summary>
                Reads the provided bytes as a simulation state and creates the particle count <see cref="T:System.String" />
            </summary>
            <param name="stateBytes"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogCollectionDbContext">
            <summary>
                Represents a <see cref="T:Mocassin.Framework.SQLiteCore.SqLiteContext`1"/> for large MMCFE log collection databases with result and meta data
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogCollectionDbContext.LogEntries">
            <summary>
                Get or set the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry"/> that store the routine results
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogCollectionDbContext.MetaEntries">
            <summary>
                Get or set the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry"/> that store the log meta information
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogCollectionDbContext.EnergyEntries">
            <summary>
                Get or set the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry"/> that store the energetic results
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogCollectionDbContext.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogCollectionDbContext.CopyDatabaseWithoutRawData(System.String)">
            <summary>
                Creates a database copy to a target location and removes the binary raw data entries
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry">
            <summary>
                Stores <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> calculation results belonging to a single <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry.LogEntry">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry" /> navigation property
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry.LogEntryId">
            <summary>
                Get or set the context id for <see cref="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry.LogEntry" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry.Alpha">
            <summary>
                Get or set the alpha value
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry.Temperature">
            <summary>
                Get or set the temperature in [K]
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry.InnerEnergy">
            <summary>
                Get or set the inner energy in [eV]
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry.FreeEnergy">
            <summary>
                Get or set the free energy in [eV]
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry.Create(Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState@,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry"/> from <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState"/> and <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeExtendedLogEntry"/>
            </summary>
            <param name="energyState"></param>
            <param name="logEntry"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry.AsStruct">
            <summary>
                Gets the data as an <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState"/> struct
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry">
            <summary>
                Compatibility wrapper for <see cref="T:Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity" /> and <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.JobMetaData">
            <summary>
                The wrapped <see cref="T:Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity" /> that stores the data
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.CollectionName">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.ConfigName">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.JobIndex">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.ConfigIndex">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.CollectionIndex">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.Temperature">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.ElectricFieldModulus">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.BaseFrequency">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.Mcsp">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.PreRunMcsp">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.NormalizationFactor">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.TimeLimit">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.FlagString">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.DopingInfo">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.LatticeInfo">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.ParticleCountInfo">
            <summary>
                Get or set a  <see cref="T:System.String"/> that describes the particle counts for each ID (comma separated)
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.#ctor">
            <summary>
                Creates new empty <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry" />
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry.#ctor(Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity)">
            <summary>
                Creates new <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry" /> that warps the provided <see cref="T:Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity" />
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.IMmcfeResultImporter">
            <summary>
                Represents an importer for populating <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogCollectionDbContext" /> from raw simulation results
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.IMmcfeResultImporter.JobImportedNotification">
            <summary>
                Get a <see cref="T:System.IObservable`1" /> that informs about
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.IMmcfeResultImporter.ImportDbContext">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogCollectionDbContext" /> used for data collection
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.IMmcfeResultImporter.IsImporting">
            <summary>
                Get a boolean flag if the system is currently importing
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.IMmcfeResultImporter.IsSaving">
            <summary>
                Get a boolean flag if the system is currently saving data
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.IMmcfeResultImporter.Import(System.Linq.Expressions.Expression{System.Func{Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity,System.Boolean}})">
            <summary>
                Collects the data into the set <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogDbContext" /> with an optional acceptance predicate expression
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter">
            <summary>
                Default <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.IMmcfeResultImporter" /> implementation that imports from the default simulation job folder
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.JobImportedEvent">
            <summary>
                Get the <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for imported job notifications
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.JobImportedNotification">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.SimulationLibraryPath">
            <summary>
                Get the <see cref="T:System.String" /> path for the simulation library
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.JobFolderRootPath">
            <summary>
                Get the <see cref="T:System.String" /> path for the root directory that contains the job folders
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.IsImporting">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.IsSaving">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.IsExcludeRawData">
            <summary>
                Get or set a boolean flag to exclude the import of binary raw data
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.ImportsPerSave">
            <summary>
                Get or set the number of imports per save
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.ImportDbContext">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.#ctor(System.String,System.String)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter" /> using the provided path information
            </summary>
            <param name="simulationLibraryPath"></param>
            <param name="jobFolderRootPath"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.Import(System.Linq.Expressions.Expression{System.Func{Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity,System.Boolean}})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.AsyncSaveAndDetachEntities(System.Collections.Generic.IList{System.Threading.Tasks.Task{System.Collections.Generic.IList{System.Object}}},System.Threading.Tasks.Task)">
            <summary>
                Awaits all pending import tasks and the previous save task and then saves and detaches the current import queue
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.OpenSimulationLibrary">
            <summary>
                Opens the <see cref="T:Mocassin.Model.Translator.ISimulationLibrary" /> that provides the import meta information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.TryImportResult(Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity,System.Exception@)">
            <summary>
                Tries to import a single MMCFE result that belongs to the passed <see cref="T:Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity" /> and provides
                possibly occured <see cref="T:System.Exception" />
            </summary>
            <param name="metaData"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.Importer.MmcfeJobFolderImporter.GetEvaluationContext(Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity)">
            <summary>
                Gets the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext" /> for the passed <see cref="T:Mocassin.Model.Translator.Database.Entities.Other.Meta.JobMetaDataEntity" />
            </summary>
            <param name="metaData"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogDbContext">
            <summary>
                The <see cref="T:Mocassin.Framework.SQLiteCore.SqLiteContext`1" /> for MMCFE routine log databases
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogDbContext.LogEntries">
            <summary>
                Get or set the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry" />
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogDbContext.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogDbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry">
            <summary>
                The <see cref="T:Mocassin.Model.Translator.EntityBase" /> implementation for MMCFE routine log entities
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry.TimeStamp">
            <summary>
                Get or set the <see cref="T:System.DateTime" /> log time stamp
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry.StateBytes">
            <summary>
                Get or set the simulation state binary representation
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry.HistogramBytes">
            <summary>
                Get or set the energy histogram binary representation
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry.ParameterBytes">
            <summary>
                Get or set the parameter state binary representation
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry.Alpha">
            <summary>
                Get or set the alpha value
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext">
            <summary>
                Provides the context for evaluation of a single MMCFE routine log database
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext.DataContext">
            <summary>
                Get the <see cref="T:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext" /> for the log entry database
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext.#ctor(Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogDbContext)">
            <summary>
                Creates a ne <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext" /> using the provided <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogDbContext" />
            </summary>
            <param name="dataContext"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext.LogSet">
            <summary>
                Gets a non-tracking <see cref="T:System.Linq.IQueryable`1" /> of the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry" /> set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext.FullReaderSet">
            <summary>
                Gets a <see cref="T:System.Linq.IQueryable`1" /> of <see cref="T:Mocassin.Tools.UAccess.Readers.MmcfeLogReader" /> for all <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry" />
                entities in the context
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext.CreateReaders(System.Linq.IQueryable{Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry})">
            <summary>
                Creates a <see cref="T:System.Linq.IQueryable`1" /> of <see cref="T:Mocassin.Tools.UAccess.Readers.MmcfeLogReader" /> from a <see cref="T:System.Linq.IQueryable`1" /> of
                <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEntry" />
            </summary>
            <param name="entries"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext.OpenFile(System.String)">
            <summary>
                Opens the provided filepath an <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogDbContext" /> and returns a matching
                <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEvaluationContext" />
            </summary>
            <param name="filepath"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator">
            <summary>
                An energy hyper surface evaluator that provides evaluation access to multi-doping multi-temperature MMCFE result
                databases
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.EnergyEvaluator">
            <summary>
                Get the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyEvaluator" /> used by the system
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.IsDataSourceDisposeWithObject">
            <summary>
                Get a boolean flag if the <see cref="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.DataSource" /> should be disposed if the object is disposed
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.DataSource">
            <summary>
                Get the <see cref="T:Mocassin.Framework.SQLiteCore.IQueryableDataSource" /> that provides the evaluation data
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.DataPoints">
            <summary>
                Get a <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of all <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint" /> entries. Getting this value will
                force load all data points
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.#ctor(Mocassin.Framework.SQLiteCore.IQueryableDataSource,System.Boolean)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator" /> using the provided
                <see cref="T:Mocassin.Framework.SQLiteCore.IQueryableDataSource" /> with an optional flag
            </summary>
            <param name="dataSource"></param>
            <param name="isDataSourceDisposeWithObject"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.LoadDataPoints">
            <summary>
                Causes the evaluator to load all data points into memory
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.SelectEnergyEntries(System.Linq.Expressions.Expression{System.Func{Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry,System.Boolean}})">
            <summary>
                Selects a set of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> entries from the data source based on a predicate expression
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.SelectEnergyEntries">
            <summary>
                Selects the full set of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> entries from the data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.SelectEnergyDataPoints(System.Linq.Expressions.Expression{System.Func{Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry,System.Boolean}})">
            <summary>
                Selects a set of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint" /> entries from the data source based on a predicate expression
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.GroupDataPointsByDopingByTemperature(System.Collections.Generic.IEqualityComparer{System.Double})">
            <summary>
                Create a a two level dictionary grouping based on doping information and then temperature value subgroups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.GroupDataPointsByTemperatureByDoping(System.Collections.Generic.IEqualityComparer{System.Double})">
            <summary>
                Create a two level dictionary grouping based on temperature information and then doping value subgroups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.SelectEnergyDataPoints">
            <summary>
                Selects the full set of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint" /> entries from the data source
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.GetRelativeChangePerDefectPlotData2D(System.Collections.Generic.IDictionary{System.String,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint},System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
                Gets a per defect <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> plot information where all values are relative to entry with the
                lowest defect particle count (Normalized by affiliated defect counts)
            </summary>
            <param name="dataPoints"></param>
            <param name="fixedDopingValue"></param>
            <param name="variableDopingId"></param>
            <param name="defectParticleId"></param>
            <param name="fixedDopingId"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.GetAbsoluteChangePlotData2D(System.Collections.Generic.IDictionary{System.String,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint},System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
                Gets the absolute <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> plot information where all values are relative to entry with the
                lowest defect particle count (No normalization)
            </summary>
            <param name="dataPoints"></param>
            <param name="fixedDopingValue"></param>
            <param name="variableDopingId"></param>
            <param name="defectParticleId"></param>
            <param name="fixedDopingId"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.WriteEnergyStateOverConcentrationPlotData2DToFile(Mocassin.Tools.Evaluation.PlotData.PlotData2D{System.Double,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState},System.String,System.Boolean,System.Int32,System.String)">
            <summary>
                Writes the <see cref="T:Mocassin.Tools.Evaluation.PlotData.PlotData2D`2" /> for a <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> over concentration curve to the
                provided file location. By default the first line is skipped
            </summary>
            <param name="plotData"></param>
            <param name="filePath"></param>
            <param name="skipLineCount"></param>
            <param name="doubleFormat"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.WriteValueWithError(System.IO.StreamWriter,System.Double,System.Double,System.Boolean,System.String,System.String)">
            <summary>
                Writes a numeric value with error to a <see cref="T:System.IO.StreamWriter" /> using the provided format information
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="error"></param>
            <param name="lastColumn"></param>
            <param name="valueFormat"></param>
            <param name="separator"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.ParseDopingValue(System.String,System.Int32)">
            <summary>
                Parses a doping value for the specified id from the doping info <see cref="T:System.String" />
            </summary>
            <param name="dopingString"></param>
            <param name="dopingId"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.ParseUnitCellCount(System.String)">
            <summary>
                Parses the total number of unit cells from the specified cell info string <see cref="T:System.String" />
            </summary>
            <param name="cellString"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.GetDopingSelectorFunction(System.Int32,System.Double)">
            <summary>
                Get a <see cref="T:System.Func`2" /> selector function that returns true if the provided oping id is at the
                specified value
            </summary>
            <param name="dopingId"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.CreateDataPoint``2(System.Linq.IGrouping{``0,``1},System.Func{``1,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry},System.Func{``1,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry})">
            <summary>
                Converts a <see cref="T:System.Linq.IGrouping`2" /> of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogEnergyEntry" /> belonging to the same
                <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry" /> into a <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint" />
            </summary>
            <param name="grouping"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPointEvaluator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyEvaluator">
            <summary>
                Evaluator for the energy states of an MMCFE result sequence
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyEvaluator.CalculateEnergyStates(System.Collections.Generic.IReadOnlyList{Mocassin.Tools.UAccess.Readers.MmcfeLogReader},System.Double,System.Int64)">
            <summary>
                Calculates the complete set of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> objects resulting from a
                <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of <see cref="T:Mocassin.Tools.UAccess.Readers.MmcfeLogReader" /> and a base temperature. Counters below a minimal
                value will be excluded from integration
            </summary>
            <param name="logReaders"></param>
            <param name="minSampleCount"></param>
            <param name="temperature"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyEvaluator.CheckLogReadersInEvaluationOrder(System.Collections.Generic.IReadOnlyList{Mocassin.Tools.UAccess.Readers.MmcfeLogReader})">
            <summary>
                Checks if the provided <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of <see cref="T:Mocassin.Tools.UAccess.Readers.MmcfeLogReader" /> instances is ordered by
                alpha (ascending)
            </summary>
            <param name="logReaders"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyEvaluator.GetAlphaDeltaList(System.Collections.Generic.IReadOnlyList{Mocassin.Tools.UAccess.Readers.MmcfeLogReader})">
            <summary>
                Get a list of the alpha delta values of a sorted <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of <see cref="T:Mocassin.Tools.UAccess.Readers.MmcfeLogReader" />
                instances
            </summary>
            <param name="logReaders"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyEvaluator.CalculateInnerEnergy(Mocassin.Tools.UAccess.Readers.MmcfeLogReader,System.Int64)">
            <summary>
                Calculates the average inner energy due to interactions described by an <see cref="T:Mocassin.Tools.UAccess.Readers.MmcfeLogReader" />
            </summary>
            <param name="logReader"></param>
            <param name="minCounter"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyEvaluator.LinearInterpolateEnergyState(System.Collections.Generic.IList{Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState},System.Double)">
            <summary>
                Linear interpolation of an <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> for a target temperature from a list of known states.
                States have to be sorted by ascending alpha value for the function to work correctly
            </summary>
            <param name="energyStates"></param>
            <param name="targetTemperature"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyEvaluator.AverageWithSem(System.Collections.Generic.IEnumerable{Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState})">
            <summary>
                Calculates an average and deviation from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> items (Temperature is excluded)
            </summary>
            <param name="energyStates"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyEvaluator.CalculateDeltaEnergyState(Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState@,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState@,System.Int32)">
            <summary>
                Calculates a new <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState" /> that represents the delta to a reference (Optional defect count to
                create a "by defect" result)
            </summary>
            <param name="state"></param>
            <param name="reference"></param>
            <param name="defectCount"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint">
            <summary>
                Describes an energy hyper surface data point from a large collection average over a set of simulations with attached meta data
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint.SampleCount">
            <summary>
                Get the number of samples for the point
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint.ParticleCounts">
            <summary>
                Get the particles counts for each index
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint.EnergyState">
            <summary>
                Get the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState"/> describing the data point
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint.EnergyStateError">
            <summary>
                Get the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState"/> describing standard deviation of the data point
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint.MetaEntry">
            <summary>
                Get the <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry"/> describing the data point meta information
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint.#ctor(System.Int32,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState@,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState@,Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeLogMetaEntry)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint"/> that describes a result hyper surface data point
            </summary>
            <param name="sampleCount"></param>
            <param name="energyState"></param>
            <param name="energyStateError"></param>
            <param name="metaEntry"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyDataPoint.ParseParticleCounts(System.String)">
            <summary>
                Parses the particle count <see cref="T:System.String"/> into an integer array
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState">
            <summary>
                Describes an energy state of a single stage of an MMCFE simulation series
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.Alpha">
            <summary>
                Get the alpha value the sate belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.Temperature">
            <summary>
                Get the equivalent temperature in [K]
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.FreeEnergy">
            <summary>
                Get the free energy due to interactions in [eV] (T = inf [K] is the reference point)
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.InnerEnergy">
            <summary>
                Get the inner energy due to interactions in [eV]
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.Entropy">
            <summary>
                Get the entropy value resulting from free energy and inner energy under assumption of constant volume in [eV / K]
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState"/> with implicit entropy specification
            </summary>
            <param name="alpha"></param>
            <param name="temperature"></param>
            <param name="freeEnergy"></param>
            <param name="innerEnergy"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState"/> with explicit entropy specification
            </summary>
            <param name="alpha"></param>
            <param name="temperature"></param>
            <param name="freeEnergy"></param>
            <param name="innerEnergy"></param>
            <param name="entropy"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.AsPerDefect(System.Int32)">
            <summary>
                Get a by defect result <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState"/> for the given defect count
            </summary>
            <param name="defectCount"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.AsRelative(Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState@)">
            <summary>
                Get a <see cref="T:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState"/> where the energy values are relative to the provided reference
            </summary>
            <param name="reference"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Custom.Mmcfe.MmcfeEnergyState.GetFormattedEnergies(System.Boolean,System.IFormatProvider,System.String,System.String)">
            <summary>
                Get a formatted string of the energy values in the order "InnerEnergy", "FreeEnergy" and "Entropy"
            </summary>
            <param name="entropyInKb"></param>
            <param name="formatProvider"></param>
            <param name="separator"></param>
            <param name="doubleFormat"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Extensions.ProjectModelContextExtensions">
            <summary>
                Provides extension methods for extracting general information from a <see cref="T:Mocassin.Model.Translator.ModelContext.IProjectModelContext"/>
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Extensions.ProjectModelContextExtensions.GetModelObjects``1(Mocassin.Model.Translator.ModelContext.IProjectModelContext)">
            <summary>
                Get the collection of <see cref="T:Mocassin.Model.Basic.IModelObject"/> instances of the specified type
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Extensions.ProjectModelContextExtensions.GetModelObject``1(Mocassin.Model.Translator.ModelContext.IProjectModelContext,System.Int32)">
            <summary>
                Get a <see cref="T:Mocassin.Model.Basic.IModelObject"/> of specified type by index
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="value"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Extensions.ProjectModelContextExtensions.GetModelObject``1(Mocassin.Model.Translator.ModelContext.IProjectModelContext,System.String)">
            <summary>
                Get a <see cref="T:Mocassin.Model.Basic.IModelObject"/> of specified type by key
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Extensions.ProjectModelContextExtensions.GetUnitCellProvider(Mocassin.Model.Translator.ModelContext.IProjectModelContext)">
            <summary>
                Gets the <see cref="T:Mocassin.Symmetry.Analysis.IUnitCellProvider`1"/> for the context
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Extensions.ProjectModelContextExtensions.GetUnitCellVectorEncoder(Mocassin.Model.Translator.ModelContext.IProjectModelContext)">
            <summary>
                Get the <see cref="T:Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder"/> for the context
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Helper.SimulationMappingHelper">
            <summary>
                Provides helper methods for handling translation of simulation mappings into higher level information
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Helper.SimulationMappingHelper.GetPositionIndexToVector4DMapper(Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
            <summary>
                Get a mapper <see cref="T:System.Func`2" /> that translates linear lattice position indices into
                <see cref="T:Mocassin.Mathematics.ValueTypes.CrystalVector4D" /> information
            </summary>
            <param name="latticeSize"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Helper.SimulationMappingHelper.GetCellIndexToCellOffset4DMapper(Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
            <summary>
                Get a mapper <see cref="T:System.Func`2" /> that translates a simulation unit cell index into
                <see cref="T:Mocassin.Mathematics.ValueTypes.CrystalVector4D" /> unit cell offset information
            </summary>
            <param name="latticeSize"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Helper.SimulationMappingHelper.GetPositionIndexToFractional3DMapper(Mocassin.Mathematics.ValueTypes.CrystalVector4D@,Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
            <summary>
                Get a mapper <see cref="T:System.Func`2" /> that translates linear lattice position indices into
                <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" /> information
            </summary>
            <param name="latticeSize"></param>
            <param name="vectorEncoder"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Helper.SimulationMappingHelper.GetPositionIndexToCartesian3DMapper(Mocassin.Mathematics.ValueTypes.CrystalVector4D@,Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
            <summary>
                Get a mapper <see cref="T:System.Func`2" /> that translates linear lattice position indices into
                <see cref="T:Mocassin.Mathematics.ValueTypes.Cartesian3D" /> information
            </summary>
            <param name="latticeSize"></param>
            <param name="vectorEncoder"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Helper.SimulationMappingHelper.GetPositionIndexToCoordinateMapper(Mocassin.Mathematics.ValueTypes.CrystalVector4D@,Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
            <summary>
                Get a mapper <see cref="T:System.Func`2" /> that translates linear lattice position indices into
                <see cref="T:Mocassin.Mathematics.ValueTypes.Cartesian3D" />, <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D"/> and <see cref="T:Mocassin.Mathematics.ValueTypes.CrystalVector4D"/> information
            </summary>
            <param name="latticeSize"></param>
            <param name="vectorEncoder"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Helper.SimulationMappingHelper.GetStaticTrackerIndexToVector4DMapper(Mocassin.Model.Translator.ModelContext.IProjectModelContext,Mocassin.Model.Translator.ModelContext.ISimulationModel,Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
            <summary>
                Generates a mapper <see cref="T:System.Func`2" /> that translates static tracker indices into
                <see cref="T:Mocassin.Mathematics.ValueTypes.CrystalVector4D" /> lattice position information
            </summary>
            <param name="modelContext"></param>
            <param name="simulationModel"></param>
            <param name="latticeSize"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Helper.SimulationMappingHelper.GetStaticTrackerIndexToFractional3DMapper(Mocassin.Model.Translator.ModelContext.IProjectModelContext,Mocassin.Model.Translator.ModelContext.ISimulationModel,Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
            <summary>
                Generates a mapper <see cref="T:System.Func`2" /> that translates static tracker indices into
                <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" /> lattice position information
            </summary>
            <param name="modelContext"></param>
            <param name="simulationModel"></param>
            <param name="latticeSize"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Helper.SimulationMappingHelper.GetStaticTrackerIndexToCartesian3DMapper(Mocassin.Model.Translator.ModelContext.IProjectModelContext,Mocassin.Model.Translator.ModelContext.ISimulationModel,Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
            <summary>
                Generates a mapper <see cref="T:System.Func`2" /> that translates static tracker indices into
                <see cref="T:Mocassin.Mathematics.ValueTypes.Cartesian3D" /> lattice position information
            </summary>
            <param name="modelContext"></param>
            <param name="simulationModel"></param>
            <param name="latticeSize"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.PlotData.PlotData2D`2">
            <summary>
                Represents a 2D set of plot data with X and Y errors
            </summary>
            <typeparam name="TX"></typeparam>
            <typeparam name="TY"></typeparam>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.PlotData.PlotData2D`2.Values">
            <summary>
                The list of plot data values
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.PlotData.PlotData2D`2.#ctor(System.Int32)">
            <summary>
                Creates new <see cref="T:Mocassin.Tools.Evaluation.PlotData.PlotData2D`2"/> with initial capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.PlotData.PlotData2D`2.AddPoint(`0,`1,`0,`1)">
            <summary>
                Adds a plot point to the data
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="errorX"></param>
            <param name="errorY"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.PlotData.PlotData2D`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.PlotData.PlotData2D`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.Base.Equations">
            <summary>
                Provides equations to calculate physical properties required by the evaluation system
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.Base.Equations.Constants">
            <summary>
                Contains the constants used in the equations
            </summary>
        </member>
        <member name="F:Mocassin.Tools.Evaluation.Queries.Base.Equations.Constants.ElementalCharge">
            <summary>
                The elemental charge in [C]
            </summary>
        </member>
        <member name="F:Mocassin.Tools.Evaluation.Queries.Base.Equations.Constants.BlotzmannEv">
            <summary>
                The boltzmann constant in [eV/K]
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.Base.Equations.Mobility">
            <summary>
                Contains equations for mobility calculations
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Mobility.DisplacementToMobility(Mocassin.Mathematics.ValueTypes.Cartesian3D@,Mocassin.Mathematics.ValueTypes.Cartesian3D@,System.Double,System.Double)">
            <summary>
                Calculates the mobility in field direction from mean shift, normalized electric field vector, field modulus and
                time information
            </summary>
            <param name="meanShift"></param>
            <param name="normField"></param>
            <param name="fieldModulus"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Mobility.DisplacementToMobility(Mocassin.Mathematics.ValueTypes.Cartesian3D@,Mocassin.Mathematics.ValueTypes.Cartesian3D@,System.Double)">
            <summary>
                Calculates the mobility in field direction from mean shift, electric filed vector and time information
            </summary>
            <param name="meanShift"></param>
            <param name="field"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Mobility.MobilityToConductivity(System.Double,System.Double,System.Double)">
            <summary>
                Calculates the conductivity value from mobility, charge number and particle density
            </summary>
            <param name="mobility"></param>
            <param name="chargeNumber"></param>
            <param name="particleDensity"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Diffusion.MeanSquareToCoefficient(System.Double,System.Double)">
            <summary>
                Get the diffusion coefficient through mean square displacement and time in 1 dimension
            </summary>
            <param name="shift"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Diffusion.MeanSquareToCoefficient(Mocassin.Mathematics.ValueTypes.Cartesian3D@,System.Double)">
            <summary>
                Get the diffusion coefficient by mean square displacement vector and time in X,Y,Z directions
            </summary>
            <param name="vector"></param>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Statistics.AverageWithDeviation``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
                Calculates the average values with standard deviation of a value sequence using a selector
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Statistics.AverageWithDeviation``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Func{``0,System.Double})">
            <summary>
                Calculates the average values with standard deviation of a value sequence using a selector
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Statistics.AverageWithSem``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
                Calculates the average values with standard error of measurement of a value sequence using a selector
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Statistics.AverageWithSem``1(System.Collections.Generic.IReadOnlyCollection{``0},System.Func{``0,System.Double})">
            <summary>
                Calculates the average values with standard error of measurement of a value sequence using a selector
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.Base.Equations.Statistics.CubicOnsagerKuboGreen(Mocassin.Mathematics.ValueTypes.Cartesian3D@,Mocassin.Mathematics.ValueTypes.Cartesian3D@,System.Double,System.Double,System.Double)">
            <summary>
                Calculates an onsager coefficient utilizing the Kubo-Green formalism for cubic systems
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <param name="volume"></param>
            <param name="time"></param>
            <param name="temperature"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet">
            <summary>
                Represents a collection of <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> instances that can be evaluated using
                <see cref="T:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1" /> implementations
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet.EvaluationContext">
            <summary>
                Get the <see cref="T:Mocassin.Tools.Evaluation.Context.MslEvaluationContext" /> of the queryable
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet.CompatibleTo(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <summary>
                Checks if the <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet"/> is compatible
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1">
            <summary>
                Represents an evaluation of a <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" /> that can provide resuluts
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1.JobSet">
            <summary>
                Get the <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" /> that serves as the data source
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1.Result">
            <summary>
                Get the <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of results
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1">
            <summary>
                Generic base class for implementations of data queries against <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> instances
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.JobSet">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.Result">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.Count">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.ExecuteParallel">
            <summary>
                Get or set a boolean flag if the system should created results in parallel
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <summary>
                Creates a new <see cref="T:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1" /> for the passed <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" /> data source
            </summary>
            <param name="jobSet"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <summary>
                Executes the query for a single <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> without checking if the passed context is part of the
                data source
            </summary>
            <param name="jobContext"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.InvokeAsync">
            <summary>
                Get the query result task or generates and invokes the task if required
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.ExecuteSequentialAsync">
            <summary>
                Executes the query async and sequential
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.ExecuteParallelAsync">
            <summary>
                Executes the query async and in parallel
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.PrepareForExecution">
            <summary>
                Performs required pre execution actions e.g. getting unspecified dependent data sources
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.AsSelector">
            <summary>
                Provide the <see cref="T:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1" /> as a delegate
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.UnitConversions">
            <summary>
                Stores the unit conversion information required to convert the internally used unit to typical SI representation
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.UnitConversions.Length.AngstromToMeter">
            <summary>
                Conversion factor from [Ang] to [m]
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.UnitConversions.Length.MeterToAngstrom">
            <summary>
                Conversion factor from [m] to [Ang]
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.ParticleCountEvaluation">
            <summary>
                Query to extract the counts of <see cref="T:Mocassin.Model.Particles.IParticle" /> instances in a <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> lattice
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.ParticleCountEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.ParticleCountEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.EnsembleMetaEvaluation">
            <summary>
                Query to extract <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleMetaData" /> from a <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMetaEvaluation.ParticleCountEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1" /> that supplies the particle count data
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMetaEvaluation.LatticeMetaEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1"/> that supplies the <see cref="T:Mocassin.Tools.Evaluation.Queries.LatticeMetaData"/>
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleMetaEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleMetaEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleMetaEvaluation.PrepareForExecution">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.LatticeMetaEvaluation">
            <summary>
                Query to extract the <see cref="T:Mocassin.Tools.Evaluation.Queries.LatticeMetaData" /> from a <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" />
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.LatticeMetaEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.LatticeMetaEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.LatticeMetaEvaluation.GetLatticeSizeInfo(Mocassin.Tools.Evaluation.Context.JobContext,Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
            <summary>
                Extracts the size information of the lattice from the passed <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> and
                <see cref="T:Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder" />
            </summary>
            <param name="jobContext"></param>
            <param name="vectorEncoder"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.EnsembleMetaData">
            <summary>
                Stores meta information for an ensemble of simulation particles
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMetaData.Particle">
            <summary>
                Get the <see cref="T:Mocassin.Model.Particles.IParticle"/> that the data belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMetaData.ParticleCount">
            <summary>
                Get the number of particles in the ensemble
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMetaData.ParticleDensity">
            <summary>
                Get the density of particles in [1/m^3] for the ensemble
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.LatticeMetaData">
            <summary>
                Stores the meta information for a single the simulation lattice
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.LatticeMetaData.SizeInfo">
            <summary>
                Get a <see cref="T:Mocassin.Mathematics.ValueTypes.CrystalVector4D"/> that stores the 4D size information
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.LatticeMetaData.Volume">
            <summary>
                Get the volume of the lattice in [m^3]
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.LatticeMetaData.GetUnitCellCount">
            <summary>
                Get the number of unit cells in the lattice
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.LatticeMetaData.GetPositionCount">
            <summary>
                Get the number of positions in the lattice
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusionEvaluation">
            <summary>
                Query to extract <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusion" /> form a <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusionEvaluation.EnsembleDisplacementEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1" /> that supplies the <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement" /> set
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusionEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusionEvaluation.GetSetAverage">
            <summary>
                Gets the set average and standard deviation of the entire internal result collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusionEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusionEvaluation.PrepareForExecution">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.EnsembleMobilityEvaluation">
            <summary>
                Query to extract the <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleMobility" /> data from an <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMobilityEvaluation.EnsembleDisplacementEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1"/> that supplies the <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement"/> set
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMobilityEvaluation.EnsembleMetaEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1"/> that supplies the <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleMetaData"/> set
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleMobilityEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleMobilityEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleMobilityEvaluation.PrepareForExecution">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.TransitionMobilityEvaluation">
            <summary>
                Query that extracts <see cref="T:Mocassin.Tools.Evaluation.Queries.TransitionMobility" /> data from a <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.TransitionMobilityEvaluation.GlobalTrackerEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1" /> that supplies the <see cref="T:Mocassin.Tools.Evaluation.Queries.GlobalTrackerResult" /> set
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.TransitionMobilityEvaluation.EnsembleMetaEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1" /> that supplies the <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleMetaData" /> set
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.TransitionMobilityEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.TransitionMobilityEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.TransitionMobilityEvaluation.PrepareForExecution">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusion">
            <summary>
                Stores the simulation diffusion data of an <see cref="T:Mocassin.Model.Particles.IParticle" /> ensemble
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusion.Particle">
            <summary>
                Get the <see cref="T:Mocassin.Model.Particles.IParticle" /> of the ensemble
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusion.CoefficientX">
            <summary>
                Get the diffusion coefficient in X direction as [m^2/s]
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusion.CoefficientY">
            <summary>
                Get the diffusion coefficient in Y direction as [m^2/s]
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDiffusion.CoefficientZ">
            <summary>
                Get the diffusion coefficient in Z direction as [m^2/s]
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.EnsembleMobility">
            <summary>
                Contains the mobility data for a <see cref="T:Mocassin.Model.Particles.IParticle"/> ensemble
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMobility.Particle">
            <summary>
                Get the <see cref="T:Mocassin.Model.Particles.IParticle"/> that forms the ensemble
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMobility.IonicMobility">
            <summary>
                Get the ionic mobility value in [m/(s*V)]
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleMobility.Conductivity">
            <summary>
                Get the ensemble conductivity in [S/m]
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.TransitionMobility">
            <summary>
                Stores the transition resolved mobility data for a <see cref="T:Mocassin.Model.Translator.ModelContext.IGlobalTrackerModel"/>
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.TransitionMobility.TrackerModel">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.ModelContext.IGlobalTrackerModel"/> the mobility data belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.TransitionMobility.EnsembleMobility">
            <summary>
                Get the <see cref="P:Mocassin.Tools.Evaluation.Queries.TransitionMobility.EnsembleMobility"/> data
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.CubicOnsagerEvaluation">
            <summary>
                A <see cref="T:Mocassin.Tools.Evaluation.Queries.JobEvaluation`1" /> that yields the onsager coefficient matrix for the special case of a cubic system
                using the kubo green solution {R_i*R_j}/(6*V*k*T*t)
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.CubicOnsagerEvaluation.DisplacementEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1" /> that supplies the <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement" /> sets
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.CubicOnsagerEvaluation.LatticeMetaEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1" /> that supplies the <see cref="T:Mocassin.Tools.Evaluation.Queries.LatticeMetaData" /> sets
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.CubicOnsagerEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.CubicOnsagerEvaluation.AverageResultWithDeviation">
            <summary>
                Takes the internal results an averages the results to an average coefficient matrix and a deviation matrix
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.CubicOnsagerEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.CubicOnsagerEvaluation.CreateEmptyMatrix(Mocassin.Tools.Evaluation.Context.JobContext)">
            <summary>
                Creates the empty coefficient matrix of the required size
            </summary>
            <param name="jobContext"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.CubicOnsagerEvaluation.PrepareForExecution">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation">
            <summary>
                Query to extract the <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement" /> for each <see cref="T:Mocassin.Model.Particles.IParticle" /> from a
                <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> sequence
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.ParticleCountEvaluation">
            <summary>
                Get or set a <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1" /> that provides the particle counts
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.YieldMeanResult">
            <summary>
                Get or set a boolean flag if the evaluation should return the mean result
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.YieldImmobile">
            <summary>
                Get or set a boolean flag if the evaluation should also yield immobile species
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.VectorComparer">
            <summary>
                Get or set a <see cref="T:System.Collections.Generic.IComparer`1"/> for <see cref="T:Mocassin.Mathematics.ValueTypes.Cartesian3D"/> for the evaluation
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.IsSquared">
            <summary>
                Boolean flag if the result is squared
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.PrepareForExecution">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.GetMovementVectors(Mocassin.Mathematics.ValueTypes.Cartesian3D[],Mocassin.Tools.Evaluation.Context.JobContext)">
            <summary>
                Calculates the ensemble displacement for each <see cref="T:Mocassin.Model.Particles.IParticle" /> index
            </summary>
            <param name="vectors"></param>
            <param name="context"></param>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacementEvaluation.CreateDisplacementData(Mocassin.Mathematics.ValueTypes.Cartesian3D[],Mocassin.Tools.Evaluation.Context.JobContext)">
            <summary>
                Creates a list of <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement" /> objects from the passed data
            </summary>
            <param name="vectors"></param>
            <param name="context"></param>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.GlobalTrackingEvaluation">
            <summary>
                Query to extract the <see cref="T:Mocassin.Tools.Evaluation.Queries.GlobalTrackerResult" /> list from a sequence of <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" />
                instances
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.GlobalTrackingEvaluation.ParticleCountEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1" /> that provides the particle counts
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.GlobalTrackingEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.GlobalTrackingEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.GlobalTrackingEvaluation.PrepareForExecution">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.MobileTrackingEvaluation">
            <summary>
                Query to extract the the <see cref="T:Mocassin.Tools.Evaluation.Queries.MobileTrackerResult" /> list from a <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext" /> sequence
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.MobileTrackingEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.MobileTrackingEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.SquaredDisplacementEvaluation">
            <summary>
                Query to select the squared ensemble displacement for each particle from a <see cref="T:Mocassin.Tools.Evaluation.Context.JobContext"/> sequence
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.SquaredDisplacementEvaluation.IsSquared">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.SquaredDisplacementEvaluation.MobileTrackingEvaluation">
            <summary>
                Get or set the <see cref="T:Mocassin.Tools.Evaluation.Queries.IJobEvaluation`1"/> of <see cref="T:Mocassin.Tools.Evaluation.Queries.MobileTrackerResult"/>
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.SquaredDisplacementEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.SquaredDisplacementEvaluation.GetMovementVectors(Mocassin.Mathematics.ValueTypes.Cartesian3D[],Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.SquaredDisplacementEvaluation.PrepareForExecution">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.StaticTrackingEvaluation">
            <summary>
                Query to extract the <see cref="T:Mocassin.Tools.Evaluation.Queries.StaticTrackerResult" /> set from a <see cref="T:Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet" />
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.StaticTrackingEvaluation.#ctor(Mocassin.Tools.Evaluation.Queries.IEvaluableJobSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.StaticTrackingEvaluation.GetValue(Mocassin.Tools.Evaluation.Context.JobContext)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement">
            <summary>
                Struct that describes the movement of a <see cref="T:Mocassin.Model.Particles.IParticle"/> ensemble in cartesian coordinates
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement.IsSquared">
            <summary>
                Get a boolean flag if the displacement is squared
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement.EnsembleSize">
            <summary>
                Get the number of <see cref="T:Mocassin.Model.Particles.IParticle"/> in the affiliated ensemble
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement.Particle">
            <summary>
                Get the <see cref="T:Mocassin.Model.Particles.IParticle"/> that the movement belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement.Vector">
            <summary>
                Get the <see cref="T:Mocassin.Mathematics.ValueTypes.Cartesian3D"/> that describes the displacement
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement.IsMean">
            <summary>
                Get a boolean flag if the displacement is the mean displacement
            </summary>
        </member>
        <member name="M:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement.AsMean">
            <summary>
                Get an <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement"/> of the current that contains 1 particles and represents the mean behavior
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.GlobalTrackerResult">
            <summary>
                Struct that contains the <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement" /> of a <see cref="T:Mocassin.Model.Translator.ModelContext.IGlobalTrackerModel" />
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.GlobalTrackerResult.TrackerModel">
            <summary>
                Get the <see cref="T:Mocassin.Model.Translator.ModelContext.IGlobalTrackerModel" /> that the data belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.GlobalTrackerResult.DisplacementData">
            <summary>
                Get the <see cref="T:Mocassin.Tools.Evaluation.Queries.EnsembleDisplacement" /> that belongs to the tracker
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.MobileTrackerResult">
            <summary>
                Struct that contains the tracking data of a single mobile <see cref="T:Mocassin.Model.Particles.IParticle"/>
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.MobileTrackerResult.OriginalPositionId">
            <summary>
                Get the index of the original position id
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.MobileTrackerResult.Particle">
            <summary>
                Get the <see cref="T:Mocassin.Model.Particles.IParticle"/> that the movement belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.MobileTrackerResult.Displacement">
            <summary>
                Get the <see cref="T:Mocassin.Mathematics.ValueTypes.Cartesian3D"/> that describes the displacement
            </summary>
        </member>
        <member name="T:Mocassin.Tools.Evaluation.Queries.StaticTrackerResult">
            <summary>
                Stores the static tracking result of a single <see cref="T:Mocassin.Model.Particles.IParticle" /> on a specific position id
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.StaticTrackerResult.PositionId">
            <summary>
                Get the position id the result belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.StaticTrackerResult.Particle">
            <summary>
                Get the <see cref="T:Mocassin.Model.Particles.IParticle"/> that the data belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Tools.Evaluation.Queries.StaticTrackerResult.VelocityVector">
            <summary>
                Get the local velocity <see cref="T:Mocassin.Mathematics.ValueTypes.Cartesian3D"/> vector of the <see cref="T:Mocassin.Model.Particles.IParticle"/> movement in [m/s]
            </summary>
        </member>
    </members>
</doc>
