<?xml version="1.0"?>

<doc>
  <assembly>
    <name>Mocassin.Symmetry</name>
  </assembly>
  <members>
    <member name="T:Mocassin.Symmetry.Analysis.CellAnalysisExtensions">
      <summary>
        Provides extension methods for cell analysis with
        <see cref="T:Mocassin.Symmetry.Analysis.IUnitCellProvider`1" /> interfaces
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.CellAnalysisExtensions.GetCuboid``1(Mocassin.Symmetry.Analysis.IUnitCellProvider{``0},Mocassin.Mathematics.ValueTypes.Fractional3D,Mocassin.Mathematics.ValueTypes.Fractional3D)">
      <summary>
        Get an <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence for a subset of a unit cell provider defined by a cuboid start and end point
      </summary>
      <typeparam name="T"></typeparam>
      <param name="cellProvider"></param>
      <param name="start"></param>
      <param name="end"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.IUnitCell`1">
      <summary>
        Represents a generic unit cell at arbitrary (a,b,c) offset that supplies a limited set of sorted unit cell entries
        of specified type
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.IUnitCell`1.EntryCount">
      <summary>
        Get the number of entries in the cell
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.IUnitCell`1.VectorEncoder">
      <summary>
        Get the unit cell vector encoder of the unit cell
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.IUnitCell`1.Item(System.Int32)">
      <summary>
        Access the unit cell at the specified position index
      </summary>
      <param name="index"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.IUnitCell`1.GetAllEntries">
      <summary>
        Get all unit cell entries as en enumerable
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.IUnitCellProvider`1">
      <summary>
        Represents a provider of unit cells that supplies a unit cell for each (a,b,c) cell offset and carries the
        geometric transformer for the basic cell
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.IUnitCellProvider`1.CellSizeInfo">
      <summary>
        The size information (a,b,c,p) of the supercell by reference
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.IUnitCellProvider`1.VectorEncoder">
      <summary>
        Access the geometric vector encoder that supplies the basic cell position info and conversions between the
        coordinate systems
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.IUnitCellProvider`1.GetUnitCell(System.Int32,System.Int32,System.Int32)">
      <summary>
        Get the cell at arbitrary (a,b,c) position
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.IUnitCellProvider`1.GetUnitCell(Moccasin.Mathematics.ValueTypes.VectorI3@)">
      <summary>
        Get the cell at arbitrary (a,b,c) position
      </summary>
      <param name="offset"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.IUnitCellProvider`1.GetCellEntry(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        Get the cell entry at the specified (a,b,c,p) coordinates
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="c"></param>
      <param name="p"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.IUnitCellProvider`1.GetCellEntry(Moccasin.Mathematics.ValueTypes.VectorI3@,System.Int32)">
      <summary>
        Get the cell entry at position 'p' with the specified offset coordinates
      </summary>
      <param name="offset"></param>
      <param name="p"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.IUnitCellProvider`1.GetCellEntry(Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
      <summary>
        Get the cell entry at the specified 4D crystal vector
      </summary>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.IUnitCellProvider`1.GetEntryValueAt(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Get the cell entry value at the specified absolute 3d fractional vector
      </summary>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.RadialSearchQuery`1">
      <summary>
        Generic radial search query that defines a start position, radial constraint, acceptance predicate and sorting
        comparer for radial position sampling
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.TaskCompletionSource">
      <summary>
        The task completion source for the search query
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.UnitCellProvider">
      <summary>
        The unit cell provider used for the search
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.StartCellEntry">
      <summary>
        Defines the cell entry at the start position
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.RadialConstraint">
      <summary>
        The radial search constraint
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.AcceptancePredicate">
      <summary>
        The acceptance predicate for found entry values
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.SortingComparer">
      <summary>
        The sorting comparer used for sorted samplings
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.Result">
      <summary>
        Get the value from the task completion source when the calculation is finished
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.#ctor">
      <summary>
        Create empty search query with an always true acceptance predicate
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.Start">
      <summary>
        Starts the query on the thread pool if not already done
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.InvokeResultGeneration">
      <summary>
        Invokes the result generation as a new task
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.RadialSearchQuery`1.GetSamplerDelegate">
      <summary>
        Get the correct sampling delegate depending on the set query properties
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.PositionChainSampler`1">
      <summary>
        Searches unit cell providers for cell entry chains that potentially match the input geometry. The class does not
        perform the actual symmetry comparison
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.PositionChainSampler`1.UnitCellProvider">
      <summary>
        Unit cell provider that is searched
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.PositionChainSampler`1.NumericComparer">
      <summary>
        The double comparer for the tolerance comparison of the distances
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.#ctor(Mocassin.Symmetry.Analysis.IUnitCellProvider{`0},Mocassin.Mathematics.Comparer.NumericComparer)">
      <summary>
        Creates new chain cell searcher from a unit cell provider and double comparer for radial search with tolerance
      </summary>
      <param name="unitCellProvider"></param>
      <param name="numericComparer"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.MultiPointSearch(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Collections.Generic.IEnumerable{Mocassin.Symmetry.Analysis.CellEntry{`0}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        Get an enumerable that contains the chain searches around all provided start vectors for the specified reference
        geometry
      </summary>
      <param name="vectors"></param>
      <param name="refGeometry"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.PointSearch(Mocassin.Mathematics.ValueTypes.Fractional3D,System.Collections.Generic.IEnumerable{Mocassin.Symmetry.Analysis.CellEntry{`0}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        Get a default chain search enumerable from the provided start vector that contains all found geometry sequences
        that potentially match the provided reference
      </summary>
      <param name="startVector"></param>
      <param name="refGeometry"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.MakeSearchEnumerable(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{Mocassin.Symmetry.Analysis.CellEntry{`0}}},System.Collections.Generic.IList{Mocassin.Mathematics.Constraints.NumericConstraint},System.Collections.Generic.IList{System.Predicate{`0}})">
      <summary>
        Gets a custom chain search enumerable for the provided start sequence. The search is limited by the provided set of
        radial range constraints and predicates
      </summary>
      <param name="startSequence"></param>
      <param name="constraints"></param>
      <param name="predicates"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.ShellSearch(Mocassin.Mathematics.ValueTypes.Fractional3D,Mocassin.Mathematics.Constraints.NumericConstraint,System.Predicate{`0})">
      <summary>
        Get an enumerable for all cell entries around a specified start that fulfill the requirements of the distant
        constraint and provided predicate
      </summary>
      <param name="start"></param>
      <param name="constraint"></param>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.ExtendSearchSequence(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{Mocassin.Symmetry.Analysis.CellEntry{`0}}},Mocassin.Mathematics.Constraints.NumericConstraint,System.Predicate{`0})">
      <summary>
        Extends the chain search enumerable by the next cell search iterator
      </summary>
      <param name="sequences"></param>
      <param name="radialConstraint"></param>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.GetStartSequence(`0,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Creates the search starting sequence from a single cell entry information
      </summary>
      <param name="entry"></param>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.GetDefaultConstraints(System.Collections.Generic.List{Mocassin.Symmetry.Analysis.CellEntry{`0}})">
      <summary>
        Takes a reference geometry and creates a sequence of radial search constraints to lookup possible symmetry
        equivalents. Length is geometry -1
      </summary>
      <param name="geometry"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.GetDefaultPredicates(System.Collections.Generic.IList{Mocassin.Symmetry.Analysis.CellEntry{`0}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        Creates the default search predicates that compare the cell entries for equality using the provided comparer.
        Length is geometry - 1
      </summary>
      <param name="geometry"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.GetSearchConstraint(Mocassin.Mathematics.ValueTypes.Cartesian3D@,Mocassin.Mathematics.ValueTypes.Cartesian3D@)">
      <summary>
        Takes two cartesian vectors and creates a radial search constraint for the distance between the vector points
      </summary>
      <param name="first"></param>
      <param name="second"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.PositionChainSampler`1.GetDefaultEntryPredicate(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
        Creates the default entry comparer predicate that compares the occuring entries to the specified expected one
      </summary>
      <param name="expectedEntry"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.RadialPositionSampler">
      <summary>
        Generic unit cell entry locator that performs a radial search with a provided search criteria around a start
        position
        in a unit cell provider
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialPositionSampler.BaseOffset">
      <summary>
        The current basic offset for the active search
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialPositionSampler.StartVector">
      <summary>
        The currently active start position
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialPositionSampler.StartShift">
      <summary>
        The current shift vector (negative start vector as fractional)
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialPositionSampler.BoundaryInfo">
      <summary>
        The currently active boundary info
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialPositionSampler.Constraint">
      <summary>
        The currently active constraint for the search
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialPositionSampler.VectorEncoder">
      <summary>
        The currently active vector encoder found in the unit cell provider
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.RadialPositionSampler.VectorComparer">
      <summary>
        The vector comparer for cartesian objects that uses the same tolerance as the specified double constraint
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.RadialPositionSampler.Search``1(Mocassin.Symmetry.Analysis.IUnitCellProvider{``0},Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.Constraints.NumericConstraint)">
      <summary>
        Performs a radial entry search for entries in the unit cell provider.
        The search is limited by the hollow sphere defined by start and constraint
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="provider"></param>
      <param name="start"></param>
      <param name="constraint"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.RadialPositionSampler.Search``1(Mocassin.Symmetry.Analysis.IUnitCellProvider{``0},Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.Constraints.NumericConstraint,System.Collections.Generic.IComparer{Mocassin.Symmetry.Analysis.CellEntry{``0}})">
      <summary>
        Performs a radial entry search for entries in the unit cell provider.
        The search is limited by the hollow sphere defined by start and constraint and the result sorted using the provided
        comparer
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="provider"></param>
      <param name="start"></param>
      <param name="constraint"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.RadialPositionSampler.Search``1(Mocassin.Symmetry.Analysis.IUnitCellProvider{``0},Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.Constraints.NumericConstraint,System.Predicate{``0})">
      <summary>
        Performs a radial entry search for all entries fulfilling the predicate in the unit cell provider.
        The search is limited by the hollow sphere defined by start and constraint
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="provider"></param>
      <param name="start"></param>
      <param name="constraint"></param>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.RadialPositionSampler.Search``1(Mocassin.Symmetry.Analysis.IUnitCellProvider{``0},Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.Constraints.NumericConstraint,System.Predicate{``0},System.Collections.Generic.IComparer{Mocassin.Symmetry.Analysis.CellEntry{``0}})">
      <summary>
        Performs a radial entry search for all entries fulfilling the predicate in the unit cell provider.
        The search is limited by the hollow sphere defined by start and constraint and the result sorted by the supplied
        comparer
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="provider"></param>
      <param name="start"></param>
      <param name="constraint"></param>
      <param name="predicate"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.RadialPositionSampler.SearchCellSet``1(System.Collections.Generic.IList{Mocassin.Symmetry.Analysis.CellEntry{``0}},Mocassin.Symmetry.Analysis.IUnitCellProvider{``0},System.Predicate{``0},System.Int32)">
      <summary>
        Searches all unit cells with the specified offset from the start cell for positions within the constraint range
        that match the predicate
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="results"></param>
      <param name="provider"></param>
      <param name="predicate"></param>
      <param name="offset"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.RadialPositionSampler.SearchUnitCell``1(System.Collections.Generic.IList{Mocassin.Symmetry.Analysis.CellEntry{``0}},Mocassin.Symmetry.Analysis.IUnitCell{``0},System.Predicate{``0},Mocassin.Mathematics.ValueTypes.Cartesian3D@)">
      <summary>
        Searches a single cell that starts at the specified cartesian offset vector for entries matching the radial search
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="results"></param>
      <param name="unitCell"></param>
      <param name="predicate"></param>
      <param name="cellOffsetVector"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.RadialPositionSampler.SetBasicCalculationProperties``1(Mocassin.Symmetry.Analysis.IUnitCellProvider{``0},Mocassin.Mathematics.Constraints.NumericConstraint,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Sets the properties required for calculations (Base offset, start vector and boundary distance info) and corrects
        the boundary distances to the active start cell
      </summary>
      <param name="provider"></param>
      <param name="constraint"></param>
      <param name="start"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.RadialPositionSampler.CheckAndUpdateBoundaryInfo(System.Int32,Mocassin.Mathematics.Constraints.NumericConstraint)">
      <summary>
        Updates the boundaries by one step. Returns true if the boundary break condition (Search radius is smaller than
        current boundaries) is reached
      </summary>
      <param name="offset"></param>
      <param name="constraint"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.RadialPositionSampler.MakeDistancePriorityComparer``1(Mocassin.Mathematics.ValueTypes.Fractional3D,System.Collections.Generic.IComparer{``0})">
      <summary>
        Creates a combined distance and entry priority comparer that sorts cell entries by distance and than the priority
        of the entry
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="start"></param>
      <param name="entryComparer"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.SearchBoundaryProvider">
      <summary>
        Contains boundary distance information for a unit cell (Hess norm distances to plains AB, AC, BC) and distances
        between the plains
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.DistanceToAbPlain">
      <summary>
        Current distance to next AB plain
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.DistanceToAcPlain">
      <summary>
        Current distance to next AC plain
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.DistanceToBcPlain">
      <summary>
        Current distance to next BC plain
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.PlainToPlainDistanceAb">
      <summary>
        Distance to between two AB plains
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.PlainToPlainDistanceAc">
      <summary>
        Distance between two AC plain
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.PlainToPlainDistanceBc">
      <summary>
        Distance between two BC plains
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.#ctor(Mocassin.Mathematics.ValueTypes.Cartesian3D@,System.ValueTuple{Mocassin.Mathematics.ValueTypes.Cartesian3D,Mocassin.Mathematics.ValueTypes.Cartesian3D,Mocassin.Mathematics.ValueTypes.Cartesian3D}@)">
      <summary>
        Create new boundary info for provided start and base vectors of the unit cell
      </summary>
      <param name="start"></param>
      <param name="baseVectors"></param>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.ChangeAllDistances(System.Int32)">
      <summary>
        Increase the distance to all plains by the specified number of steps
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.ChangeDistanceToAbPlain(System.Int32)">
      <summary>
        Change the distance to plain AB by the specified number of steps
      </summary>
      <param name="steps"></param>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.ChangeDistanceToAcPlain(System.Int32)">
      <summary>
        Change the distance to plain AC by the specified number of steps
      </summary>
      <param name="steps"></param>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.ChangeDistanceToBcPlain(System.Int32)">
      <summary>
        Change the distance to plain BC by the specified number of steps
      </summary>
      <param name="steps"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.DistanceWithinBoundaries(System.Double,System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Checks if a radial length values is within the limitations of the current boundaries
      </summary>
      <param name="distance"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SearchBoundaryProvider.CalculateDistances(Mocassin.Mathematics.ValueTypes.Cartesian3D@,System.ValueTuple{Mocassin.Mathematics.ValueTypes.Cartesian3D,Mocassin.Mathematics.ValueTypes.Cartesian3D,Mocassin.Mathematics.ValueTypes.Cartesian3D}@)">
      <summary>
        Calculates the distance information from start and base vectors
      </summary>
      <param name="start"></param>
      <param name="baseVectors"></param>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.CellEntry`1">
      <summary>
        Basic cell entry wrapper that contains an entry information and a fractional vector describing its absolute
        position
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.CellEntry`1.AbsoluteVector">
      <summary>
        The absolute position of the cell entry
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.CellEntry`1.Entry">
      <summary>
        The entry affiliated with the position
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.CellEntry`1.#ctor(Mocassin.Mathematics.ValueTypes.Fractional3D,`0)">
      <summary>
        Create new unit cell entry
      </summary>
      <param name="absoluteVector"></param>
      <param name="entry"></param>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.CellEntry`1.GetShifted(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Get a shifted version of the unit cell entry
      </summary>
      <param name="offset"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.CellEntry`1.MakeComparer(System.Collections.Generic.IComparer{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Collections.Generic.IComparer{`0})">
      <summary>
        Creates a combined vector and entry comparer from two separated comparer interfaces
      </summary>
      <param name="vectorComparer"></param>
      <param name="entryComparer"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.CellWrapperFactory">
      <summary>
        Factory for wrapped unit and super-cells that can be used with the unit cell entry locator
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.CellWrapperFactory.CreateUnitCell``1(System.Collections.Generic.IList{``0},Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
      <summary>
        Creates new unit cell wrapper for the provided entries and vector encoder
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="entries"></param>
      <param name="vectorEncoder"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.CellWrapperFactory.CreateSupercell``1(``0[][0:,0:,0:],Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
      <summary>
        Creates new supercell for the provided entry lattice and vector encoder
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="entryLattice"></param>
      <param name="vectorEncoder"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.CellWrapperFactory.CreateSupercell``1(Mocassin.Symmetry.Analysis.IUnitCell{``0},Moccasin.Mathematics.ValueTypes.VectorI3@)">
      <summary>
        Extends the provided unit cell into a supercell of specified size
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="unitCell"></param>
      <param name="size"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.CellWrapperFactory.CreateSupercell``1(System.Collections.Generic.IEnumerable{``0},Moccasin.Mathematics.ValueTypes.VectorI3@,Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
      <summary>
        Takes a set of unit cell entries and vector encoder and creates a supercell with identical unit cells
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="cellEntry"></param>
      <param name="size"></param>
      <param name="vectorEncoder"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.CellWrapperFactory.CreateSupercell``1(System.Collections.Generic.IEnumerable{``0[]},Moccasin.Mathematics.ValueTypes.VectorI3@,Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
      <summary>
        Creates a supercell wrapper from a set of unit cell entry sets that each describe the unit cell at the linearized
        index
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="cellEntries"></param>
      <param name="size"></param>
      <param name="vectorEncoder"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.SupercellAdapter`1">
      <summary>
        Generic super cell wrapper that combines a (a,b,c,p) encoded set of positions with a basic structure information to
        describe a supercell lattice
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.Analysis.SupercellAdapter`1.SizeInfo">
      <summary>
        The supercell size information
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SupercellAdapter`1.CellEntries">
      <summary>
        The 4D (a,b,c,p) cell entry array that is a three dimensional array of cell entry arrays
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SupercellAdapter`1.CellSizeInfo">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SupercellAdapter`1.VectorEncoder">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.#ctor(`0[][0:,0:,0:],Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
      <summary>
        Create new supercell wrapper from cell entry array and unit cell vector encoder
      </summary>
      <param name="cellEntries"></param>
      <param name="vectorEncoder"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.GetCellEntry(System.Int32,System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.GetCellEntry(Moccasin.Mathematics.ValueTypes.VectorI3@,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.GetUnitCell(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.GetUnitCell(Moccasin.Mathematics.ValueTypes.VectorI3@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.TrimByPeriodicBoundary(Moccasin.Mathematics.ValueTypes.VectorI3@)">
      <summary>
        Corrects set of offset coordinates into the supercell by applying the periodic boundary conditions
      </summary>
      <param name="offset"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.TrimByPeriodicBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>
        Corrects set of offset coordinates into the supercell by applying the periodic boundary conditions
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.GetSupercellSizeInfo(`0[][0:,0:,0:])">
      <summary>
        Creates the supercell size info for a 4D entry set
      </summary>
      <param name="entries"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.GetCellEntry(Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SupercellAdapter`1.GetEntryValueAt(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.UnitCellAdapter`1">
      <summary>
        Basic generic (1,1,1) unit cell wrapper that wraps a set of additional position information and a vector encoder
        into unit cell provider
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.SizeInfo">
      <summary>
        The unit cell size info (1,1,1,#Entries)
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.CellEntries">
      <summary>
        The list interface of unit cell entries without the vector information
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.Offset">
      <summary>
        The current offset of the cell
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.VectorEncoder">
      <inheritdoc cref="P:Mocassin.Symmetry.Analysis.IUnitCellProvider`1.VectorEncoder" />
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.EntryCount">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.CellSizeInfo">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.#ctor(System.Collections.Generic.IList{`0},Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder)">
      <summary>
        Creates new unit cell wrapper for entry list and vector encoder
      </summary>
      <param name="entries"></param>
      <param name="vectorEncoder"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.#ctor(System.Collections.Generic.IList{`0},Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder,Moccasin.Mathematics.ValueTypes.VectorI3@)">
      <summary>
        Creates new unit cell wrapper for entry list and vector encoder with an additional initial offset
      </summary>
      <param name="entries"></param>
      <param name="vectorEncoder"></param>
      <param name="offset"></param>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.#ctor">
      <summary>
        Protected generation of an empty cell wrapper for shifting this unit cell
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.GetAllEntries">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.GetCellEntry(System.Int32,System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.GetCellEntry(Moccasin.Mathematics.ValueTypes.VectorI3@,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.GetUnitCell(System.Int32,System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.GetUnitCell(Moccasin.Mathematics.ValueTypes.VectorI3@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.GetCellEntry(Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.UnitCellAdapter`1.GetEntryValueAt(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.GeometricSymmetryAnalyzer">
      <summary>
        Symmetry analyzer that compares mass point groups based upon geometric properties
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.GeometricSymmetryAnalyzer.GetSymmetryIndicator(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.CartesianMassPoint3D},System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Takes a sequence of mass points and calculates the symmetry indicator value
      </summary>
      <param name="massPoints"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.GeometricSymmetryAnalyzer.GetSymmetryIndicator(Mocassin.Mathematics.ValueTypes.MassPointGeometryInfo,System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Calculates symmetry indicator form geometry info object
      </summary>
      <param name="info"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.GeometricSymmetryAnalyzer.GetFirstHashValue(System.Double,System.Double,System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Get the first hash value from the tensor length and torsional moment. Corrects almost equal zero values to zero
      </summary>
      <param name="tensorLength"></param>
      <param name="torsionalMoment"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.GeometricSymmetryAnalyzer.GetSecondHashValue(System.Double,System.Double,System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Get the second hash vale from total mass and point count. Corrects almost equal zero values to zero
      </summary>
      <param name="totalMass"></param>
      <param name="pointCount"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.SymmetryCompareIndicator">
      <summary>
        Contains the result of an approximated symmetry comparison between two geometric objects
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SymmetryCompareIndicator.IsSame">
      <summary>
        Flag that indicates if the approximated symmetry comparisons indicates equal symmetry
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SymmetryCompareIndicator.FirstIndicator">
      <summary>
        The symmetry indicator of the first analyzed geometric object
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SymmetryCompareIndicator.SecondIndicator">
      <summary>
        The symmetry indicator of the second analyzed geometric object
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SymmetryCompareIndicator.#ctor(System.Boolean,Mocassin.Symmetry.Analysis.SymmetryIndicator,Mocassin.Symmetry.Analysis.SymmetryIndicator)">
      <summary>
        Create ney symmetry comparison object with flag and the two indicators
      </summary>
      <param name="isSame"></param>
      <param name="firstIndicator"></param>
      <param name="secondIndicator"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SymmetryCompareIndicator.#ctor(Mocassin.Symmetry.Analysis.SymmetryIndicator,Mocassin.Symmetry.Analysis.SymmetryIndicator,System.Collections.Generic.IComparer{Mocassin.Symmetry.Analysis.SymmetryIndicator})">
      <summary>
        Creates new symmetry comparison object with two indicators and a comparer to automatically set the equality flag
      </summary>
      <param name="firstIndicator"></param>
      <param name="secondIndicator"></param>
      <param name="comparer"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SymmetryCompareIndicator.CheckEquivalency(System.Collections.Generic.IComparer{Mocassin.Symmetry.Analysis.SymmetryIndicator})">
      <summary>
        Checks for equivalency of the currently set values, sets the flag to false if both objects contain only zeros
      </summary>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.SymmetryIndicator">
      <summary>
        Geometry hash object that is used to do an approximated symmetry comparisons between groups of mass points based on hash values
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SymmetryIndicator.First">
      <summary>
        The first part of the hash value for almost equal comparisons
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SymmetryIndicator.Second">
      <summary>
        The second part of the hash value for almost equal comparisons
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.SymmetryIndicator.#ctor(System.Double,System.Double)">
      <summary>
        Creates a new symmetry indicator from two symmetry indicator values
      </summary>
      <param name="first"></param>
      <param name="second"></param>
    </member>
    <member name="M:Mocassin.Symmetry.Analysis.SymmetryIndicator.ToString">
      <summary>
        Overwrites objects ToString() method
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SymmetryIndicator.MakeComparer(System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Creates a compare adapter object for the indicator from a double comparer interface
      </summary>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.ISymmetryAnalysisService">
      <summary>
        Symmetry analysis service that supports comparisons of groups of mass points in cartesian coordinates (e.g. cell
        positions, atoms,...)
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.ISymmetryAnalysisService.IndicatorComparer">
      <summary>
        The comparer for symmetry indicators used within the approximated symmetry comparisons
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.ISymmetryAnalysisService.GetSymmetryIndicator(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.CartesianMassPoint3D})">
      <summary>
        Get an indicator object that can be used for approximated symmetry comparisons for cartesian mass point sets
      </summary>
      <param name="massPoints"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.ISymmetryAnalysisService.CompareSymmetryApprox(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.CartesianMassPoint3D},System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.CartesianMassPoint3D})">
      <summary>
        Performs an approximated symmetry comparison between two sequences of mass points and returns the comparison result
        indicator (Fast, small chance of invalid result)
      </summary>
      <param name="firstSet"></param>
      <param name="secondSet"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.Analysis.SymmetryAnalysisService">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SymmetryAnalysisService.IndicatorComparer">
      <summary>
        The comparer for the approx symmetry indicator comparison
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.Analysis.SymmetryAnalysisService.TransformerProvider">
      <summary>
        Provider for the vector transformer to change coordinate systems
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SymmetryAnalysisService.#ctor(System.Collections.Generic.IComparer{Mocassin.Symmetry.Analysis.SymmetryIndicator},Mocassin.Framework.Provider.IObjectProvider{Mocassin.Mathematics.Coordinates.IVectorTransformer})">
      <summary>
        Create new symmetry analysis service from indicator comparer and vector transformer provider
      </summary>
      <param name="indicatorComparer"></param>
      <param name="transformerProvider"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SymmetryAnalysisService.GetSymmetryIndicator(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.CartesianMassPoint3D})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.Analysis.SymmetryAnalysisService.CompareSymmetryApprox(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.CartesianMassPoint3D},System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.CartesianMassPoint3D})">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter">
      <summary>
        Defines a parameter of a crystal containing a value and an information if the value is fixed in its current context
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameter.Value">
      <summary>
        The value of the parameter
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameter.IsContextImmutable">
      <summary>
        Defines if the value is immutable in te current context
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalParameter.#ctor(System.Double,System.Boolean)">
      <summary>
        Creates new <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> from value and optional constant flag
      </summary>
      <param name="value"></param>
      <param name="isContextImmutable"></param>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalParameter.ChangeValue(System.Double)">
      <summary>
        Creates a new <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> with a changed value
      </summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange">
      <summary>
        Defines the range of a <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> and if the value is mutable
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange.MinValue">
      <summary>
        Get the minimal value
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange.MaxValue">
      <summary>
        Get the maximal value
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange.IsContextImmutable">
      <summary>
        Get a boolean flag if the value is immutable due to the crystal context
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange.IsAlwaysImmutable">
      <summary>
        Defines a boolean flag if the value is always immutable with min equal to max
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange.#ctor(System.Double,System.Double,System.Boolean)">
      <summary>
        Creates a new <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> with a minimal and maximal value
      </summary>
      <param name="minValue"></param>
      <param name="maxValue"></param>
      <param name="isContextImmutable"></param>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange.GetMinimalParameter">
      <summary>
        Creates a <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> that defines the smallest possible setting
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange.ToNumericConstraint(Mocassin.Mathematics.Comparer.NumericComparer,System.Boolean,System.Boolean)">
      <summary>
        Creates a <see cref="T:Mocassin.Mathematics.Constraints.NumericConstraint" /> instance from the contained values and a
        <see cref="T:Mocassin.Mathematics.Comparer.NumericComparer" />
      </summary>
      <param name="comparer"></param>
      <param name="includeMin"></param>
      <param name="includeMax"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet">
      <summary>
        Defines a set of lattice parameters values a, b, c with angles alpha, beta, gamma without the crystal context or fixing information
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.ParamA">
      <summary>
        The parameter A
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.ParamB">
      <summary>
        The parameter B
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.ParamC">
      <summary>
        The parameter C
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.Alpha">
      <summary>
        Angle alpha in radian
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.Beta">
      <summary>
        Angle beta in radian
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.Gamma">
      <summary>
        Angle gamma in radian
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.#ctor">
      <summary>
        Create new crystal parameter set with default values
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        Creates a new crystal parameter set
      </summary>
      <param name="paramA"></param>
      <param name="paramB"></param>
      <param name="paramC"></param>
      <param name="alpha"></param>
      <param name="beta"></param>
      <param name="gamma"></param>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.ToString">
      <summary>
        Returns a json representation of the object
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet.CreateDefault">
      <summary>
        Creates default crystal parameter set (All params 1.0, all angles 90° in radian)
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalSystem">
      <summary>
        Abstract crystal system class that defines and handles validations and coordinate system creation of the crystal
        systems
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.SystemVariation">
      <summary>
        Identifies the specific variation of the system (Majority of systems does not have a specific variation)
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.SystemType">
      <summary>
        The crystal system ID (0 to 6)
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.SystemName">
      <summary>
        The crystal system literal name
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.IsReady">
      <summary>
        Flag that indicates if the crystal system is ready for usage
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ParameterConstraint">
      <summary>
        The <see cref="T:Mocassin.Mathematics.Constraints.NumericConstraint" /> for the crystal parameters
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.BasicConstraint">
      <summary>
        The basic <see cref="T:Mocassin.Mathematics.Constraints.NumericConstraint" /> for vector lengths, vector entries and calculations
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.AlphaConstraint">
      <summary>
        The <see cref="T:Mocassin.Mathematics.Constraints.NumericConstraint" /> for the angle alpha
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.BetaConstraint">
      <summary>
        The <see cref="T:Mocassin.Mathematics.Constraints.NumericConstraint" /> for the angle beta
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.GammaConstraint">
      <summary>
        The <see cref="T:Mocassin.Mathematics.Constraints.NumericConstraint" /> for the angle gamma
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ParamA">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> for the A direction
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ParamB">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> for the B direction
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ParamC">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> for the C direction
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.Alpha">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> for the Alpha angle in radian
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.Beta">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> for the Beta angle in radian
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystem.Gamma">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameter" /> for the Gamma angle in radian
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.TrySetParameterValues(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <summary>
        Sets the parameters if they pass the constraints of the system, else returns false
      </summary>
      <param name="paramSet"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.SetParameterValues(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <summary>
        Sets the parameters and angles from a <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet" />
        without checking the validity
      </summary>
      <param name="paramSet"></param>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.CreateCoordinateSystem">
      <summary>
        Creates a fractional coordinate system from the crystal system parameters
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ValidateGeneralAngleCondition(System.Double,System.Double,System.Double)">
      <summary>
        Checks if three radians angles are basically valid crystal system angles without specified cyrstal system type
      </summary>
      <param name="alpha"></param>
      <param name="beta"></param>
      <param name="gamma"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ValidateAngleConstraintCondition(System.Double,System.Double,System.Double)">
      <summary>
        Validates that the angles fulfill the angle constraints specified by the implementing system
      </summary>
      <param name="alpha"></param>
      <param name="beta"></param>
      <param name="gamma"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ValidateSoftAngleCondition(System.Double,System.Double,System.Double)">
      <summary>
        Performs an angle validation that tests the soft angle condition of the crystal system (no hierarchy enforcement)
      </summary>
      <param name="alpha"></param>
      <param name="beta"></param>
      <param name="gamma"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ValidateAngleConditions(System.Double,System.Double,System.Double)">
      <summary>
        Performs a full angle validation that checks of both system specific and general sufficient angle conditions are
        met
      </summary>
      <param name="alpha"></param>
      <param name="beta"></param>
      <param name="gamma"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ValidateParameterConditions(System.Double,System.Double,System.Double)">
      <summary>
        Validate that the cell parameters fulfill both soft system condition and general parameter constraints
      </summary>
      <param name="paramA"></param>
      <param name="paramB"></param>
      <param name="paramC"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ValidateParameterConstraintCondition(System.Double,System.Double,System.Double)">
      <summary>
        Validates that the passed parameters fulfill the parameter constraints of the implementing system
      </summary>
      <param name="paramA"></param>
      <param name="paramB"></param>
      <param name="paramC"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ValidateSoftParameterCondition(System.Double,System.Double,System.Double)">
      <summary>
        Validates that the passed parameters fulfill the soft parameter condition (No hierarchy enforcement)
      </summary>
      <param name="paramA"></param>
      <param name="paramB"></param>
      <param name="paramC"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.CalculateBaseVectors">
      <summary>
        Calculates the base vectors from the crystal system parameters
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.GetLatticeVectorA">
      <summary>
        Calculates the lattice vector in A direction from the system parameters
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.GetLatticeVectorB">
      <summary>
        Calculates the lattice vector in B direction from the system parameters
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.GetLatticeVectorC">
      <summary>
        Calculates the lattice vector in C direction from the system parameters
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.BasicVectorValidation(Mocassin.Mathematics.ValueTypes.Coordinates3D,Mocassin.Mathematics.ValueTypes.Coordinates3D,Mocassin.Mathematics.ValueTypes.Coordinates3D)">
      <summary>
        Validates that the lattice vectors are potentially valid lattice vectors without checking if they match the actual
        crystal system type
      </summary>
      <param name="vectorA"></param>
      <param name="vectorB"></param>
      <param name="vectorC"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ValidateVectorLength(Mocassin.Mathematics.ValueTypes.Coordinates3D@)">
      <summary>
        Checks if a vector length is valid
      </summary>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.ApplyParameterDependencies(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <summary>
        Corrects potential parameter dependencies in a crystal parameter set using the rules of the specific crystal system
        implementation
      </summary>
      <param name="paramSet"></param>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystem.GetDefaultParameterSet">
      <summary>
        Returns a default parameter set that fulfills all restrictions of the actual crystal system
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext">
      <summary>
        Abstract crystal system context class that handles settings for crystal system creation
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.SettingsDictionary">
      <summary>
        Get the settings dictionary that maps
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification" /> to
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition" /> instances
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.TryGetSetting(Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition@)">
      <summary>
        Tries to find a <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition" /> by a
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification" />
      </summary>
      <param name="identification"></param>
      <param name="definition"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.FindSetting(System.Func{System.Collections.Generic.KeyValuePair{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition},System.Boolean})">
      <summary>
        Searches the dictionary using the provided expression, returns null if nothing is found ore throws an exception if
        more than one matches the condition
      </summary>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.FindSettingEntry(System.Func{System.Collections.Generic.KeyValuePair{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition},System.Boolean})">
      <summary>
        Searches the dictionary using the provided expression, returns null if nothing is found ore throws an exception if
        more than one matches the condition
      </summary>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.FindSettings(System.Func{System.Collections.Generic.KeyValuePair{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition},System.Boolean})">
      <summary>
        Searches the dictionary using the provided expression, returns all matching the condition
      </summary>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.FindSettingEntries(System.Func{System.Collections.Generic.KeyValuePair{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition},System.Boolean})">
      <summary>
        Searches the dictionary using the provided expression, returns all matching the condition
      </summary>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.CreateSystemDictionary">
      <summary>
        Creates the static dictionary based upon the settings defined in the implementing class
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.CreateSoftContext">
      <summary>
        Creates a new soft crystal system context that allows low symmetry systems to be defined with higher symmetry
        parameters
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.AddTriclinicSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <summary>
        Adds all triclinic settings defined in the implementing context
      </summary>
      <param name="dictionary"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.AddMonoclinicSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <summary>
        Adds all monoclinic settings defined in the implementing context
      </summary>
      <param name="dictionary"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.AddOrthorhombicSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <summary>
        Adds all orthorhombric settings defined in the implementing context
      </summary>
      <param name="dictionary"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.AddTetragonalSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <summary>
        Adds all tetragonal settings defined in the implementing context
      </summary>
      <param name="dictionary"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.AddTrigonalSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <summary>
        Adds all trigonal settings defined in the implementing context
      </summary>
      <param name="dictionary"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.AddHexagonalSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <summary>
        Adds all hexagonal settings defined in the implementing context
      </summary>
      <param name="dictionary"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.AddCubicSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <summary>
        Adds all cubic settings defined in the implementing context
      </summary>
      <param name="dictionary"></param>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext.Create``1">
      <summary>
        Factory function for a specific crystal system type
      </summary>
      <typeparam name="T1"></typeparam>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition">
      <summary>
        Defines a crystal system through information about parameter constraints, default construction, name and variation
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.Factory">
      <summary>
        Stores default <see cref="T:System.Func`1" /> factory delegate
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.CrystalVariation">
      <summary>
        The specific <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation" />
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.CrystalType">
      <summary>
        The specific <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemType" />
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.SystemName">
      <summary>
        The crystal system literal name
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.ParamARange">
      <summary>
        Get or set the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> for the parameter A
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.ParamBRange">
      <summary>
        Get or set the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> for the parameter B
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.ParamCRange">
      <summary>
        Get or set the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> for the parameter C
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.AlphaRange">
      <summary>
        Get or set the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> for the alpha angle (in radian)
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.BetaRange">
      <summary>
        Get or set the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> for the beta angle (in radian)
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.GammaRange">
      <summary>
        Get or set the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> for the gamma angle (in radian)
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.#ctor">
      <summary>
        Internal crystal system settings constructor
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.GetIdentification">
      <summary>
        Get a <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification" /> for the system definition
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.ApplySettings(Mocassin.Symmetry.CrystalSystems.CrystalSystem,System.Double,System.Double)">
      <summary>
        Applies the settings to a crystal system withe specified tolerance range and parameter max value
      </summary>
      <param name="system"></param>
      <param name="toleranceRange"></param>
      <param name="parameterMaxValue"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.SetParameterAndAngles(Mocassin.Symmetry.CrystalSystems.CrystalSystem)">
      <summary>
        Sets the parameters and angles to their default (min values) values and set the fixed flags + system ID
      </summary>
      <param name="system"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition.SetConstraints(Mocassin.Symmetry.CrystalSystems.CrystalSystem,System.Double,System.Double)">
      <summary>
        Creates and sets the resulting <see cref="T:Mocassin.Mathematics.Constraints.NumericConstraint" /> instances on a
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystem" /> with a limited max unit cell length
      </summary>
      <param name="system"></param>
      <param name="parameterMaxValue"></param>
      <param name="toleranceValue"></param>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemSource">
      <summary>
        Crystal system provider to enable creation of crystal systems with equal tolerance and range properties
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemSource.Context">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext" /> used by the source
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemSource.Tolerance">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemSource.ParameterMaxValue">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemSource.#ctor(Mocassin.Symmetry.CrystalSystems.CrystalSystemContext,System.Double,System.Double)">
      <summary>
        Creates new provider with the specified context, base double tolerance and max parameter value
      </summary>
      <param name="toleranceRange"></param>
      <param name="context"></param>
      <param name="parameterMaxValue"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemSource.Create(System.Func{System.Collections.Generic.KeyValuePair{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition},System.Boolean})">
      <summary>
        Creates a new crystal system with default parameters using the settings search expression (throws if more than one
        settings matches the condition)
      </summary>
      <param name="where"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemSource.GetSystem(Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemSource.GetSystem(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemSource.CreateSoft(System.Double,System.Double)">
      <summary>
        Factory to create a new crystal system provider for soft systems with the specified max parameter and tolerance
        value
      </summary>
      <param name="parameterMaxValue"></param>
      <param name="toleranceRange"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification">
      <summary>
        Defines a clear identification for a crystal system by
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemType" /> and
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation" />
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification.Triclinic">
      <summary>
        Get the default triclinic <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification" />
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification.CrystalType">
      <summary>
        Get the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemType" />
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification.CrystalVariation">
      <summary>
        Get the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation" />
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification.#ctor(Mocassin.Symmetry.CrystalSystems.CrystalSystemType,Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation)">
      <summary>
        Creates a new crystal identifier by <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemType" /> and
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation" />
      </summary>
      <param name="crystalType"></param>
      <param name="crystalVariation"></param>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification.Equals(Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification.GetHashCode">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemType">
      <summary>
        Enum to identify the 7 crystal systems by increasing symmetry
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemType.Triclinic">
      <summary>
        Identifies the triclinic crystal system
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemType.Monoclinic">
      <summary>
        Identifies the monoclinic crystal system
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemType.Orthorhombic">
      <summary>
        Identifies the orthorhombic crystal system
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemType.Tetragonal">
      <summary>
        Identifies the tetragonal crystal system
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemType.Trigonal">
      <summary>
        Identifies the trigonal crystal system
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemType.Hexagonal">
      <summary>
        Identifies the hexagonal crystal system
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemType.Cubic">
      <summary>
        Identifies the cubic crystal system
      </summary>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation">
      <summary>
        Enum that identifies specific variations of crystal systems e.g. hexagonal axes for trigonal type
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation.NoneOrOriginChoice">
      <summary>
        System has not special variation or the variation is an origin choice
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation.UniqueAxisA">
      <summary>
        System has a unique axis in A direction
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation.UniqueAxisB">
      <summary>
        System has a unique axis in B direction
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation.UniqueAxisC">
      <summary>
        System has a unique axis in C direction
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation.HexagonalAxes">
      <summary>
        System uses hexagonal coordinate axes
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation.RhombohedralAxes">
      <summary>
        System uses rhombohedral coordinate axes
      </summary>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.ICrystalSystemService">
      <summary>
        Represents a crystal system service for loading and supplying crystal systems and affiliated vector converters
        based on space group input
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.ICrystalSystemService.ActiveCrystalSystem">
      <summary>
        Get the currently loaded crystal system
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.ICrystalSystemService.VectorTransformer">
      <summary>
        Get the vector transformer that handles transformations between coordinate systems
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.ICrystalSystemService.TrySetParameters(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <summary>
        Tries to the the parameter set. The vector encoder is updated if the set was applied successfully
      </summary>
      <param name="parameterSet"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.ICrystalSystemService.LoadNewSystem(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <summary>
        Load a new crystal system into the service by space group interface (Returns false if already loaded)
      </summary>
      <param name="group"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.ICrystalSystemService.GetSystem(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <summary>
        Get a <see cref="P:Mocassin.Symmetry.CrystalSystems.ICrystalSystemService.ActiveCrystalSystem" /> for the passed
        <see cref="T:Mocassin.Symmetry.SpaceGroups.ISpaceGroup" />
      </summary>
      <param name="group"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.ICrystalSystemService.LoadNewSystem(Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification)">
      <summary>
        Load a new crystal system into the service by a
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification" />
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.ICrystalSystemService.CopyCurrentParameterSet">
      <summary>
        Get a copy of the current <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterSet" />
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.ICrystalSystemSource">
      <summary>
        Common interface for all crystal system provider implementations
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.ICrystalSystemSource.ParameterMaxValue">
      <summary>
        Get or set the max value for parameters
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.ICrystalSystemSource.Tolerance">
      <summary>
        Get or set tolerance range for parameter comparisons within the crystal systems
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.ICrystalSystemSource.GetSystem(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <summary>
        Get a <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystem" /> for the provided
        <see cref="T:Mocassin.Symmetry.SpaceGroups.ISpaceGroup" />
      </summary>
      <param name="group"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.ICrystalSystemSource.GetSystem(Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification)">
      <summary>
        Get a <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystem" /> based oon a
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification" />
      </summary>
      <param name="identification"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemService">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.CrystalSystemSource">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.ICrystalSystemSource" /> that supplies
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystem" /> instances
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.ActiveCrystalSystem">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.VectorTransformer">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.ToleranceRange">
      <summary>
        Defines the tolerance range used for equality comparisons in the spherical coordinate transformations
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.#ctor(Mocassin.Symmetry.CrystalSystems.ICrystalSystemSource,System.Double)">
      <summary>
        Create new crystal system service from the crystal system provider and vector transformer
      </summary>
      <param name="crystalSystemSource"></param>
      <param name="toleranceRange"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.TrySetParameters(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.GetDefaultSystem">
      <summary>
        Get the default crystal system (Triclinic)
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.LoadNewSystem(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.GetSystem(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.LoadNewSystem(Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.LoadIfDifferentSystem(Mocassin.Symmetry.CrystalSystems.CrystalSystem)">
      <summary>
        Sets a new crystal system if it is not equal to the currently set one
      </summary>
      <param name="newSystem"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.CreateVectorTransformer">
      <summary>
        Creates the vector transformer using the currently loaded crystal system
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.UpdateVectorTransformer">
      <summary>
        Triggers an update of the vector transformer
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.CrystalSystemService.CopyCurrentParameterSet">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext">
      <summary>
        A <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemContext" /> for handling of soft crystal system settings (Crystal hierarchy is not strictly enforced)
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.SoftSystemDictionary">
      <summary>
        Static settings dictionary for all existing soft settings (12 in total)
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.OpenAngleRange">
      <summary>
        Default open angle range (context mutable, from 0 to 2*PI)
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.DependentAngleRange">
      <summary>
        Default closed angle range that is dependent from another (context immutable, from 0 to 2*PI)
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.CubicAngleRange">
      <summary>
        Default fixed right or cubic angle range (fully immutable, always 0.5*PI)
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.HexagonalAngleRange">
      <summary>
        Default fixed hexagonal angle range (fully immutable, always 2/3*PI)
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.SettingsDictionary">
      <summary>
        Property access for the static soft settings dictionary
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.SetLengthRangesToTriclinic(Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition)">
      <summary>
        Sets the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> data for A,B,C to fit all immutable triclinic systems on a
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition" />
      </summary>
      <param name="definition"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.SetLengthRangesToCubic(Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition)">
      <summary>
        Sets the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> data for A,B,C to fit partial immutable cubic systems on a
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition" />
      </summary>
      <param name="definition"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.SetLengthRangesToHexagonal(Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition)">
      <summary>
        Sets the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalParameterRange" /> data for A,B,C to fit partial immutable hexagonal systems on a
        <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition" />
      </summary>
      <param name="definition"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.AddTriclinicSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.AddMonoclinicSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.AddOrthorhombicSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.AddTetragonalSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.AddTrigonalSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.AddHexagonalSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCrystalSystemContext.AddCubicSettings(System.Collections.Generic.Dictionary{Mocassin.Symmetry.CrystalSystems.CrystalSystemIdentification,Mocassin.Symmetry.CrystalSystems.CrystalSystemDefinition})">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.SoftCubicCrystalSystem">
      <summary>
        Class for a soft cubic crystal system that supports the crystal system hierarchy (i.e. the hard cubic condition is
        not enforced)
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCubicCrystalSystem.ApplyParameterDependencies(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCubicCrystalSystem.ValidateSoftAngleCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftCubicCrystalSystem.ValidateSoftParameterCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.SoftCubicCrystalSystem.GetDefaultParameterSet">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.SoftHexagonalCrystalSystem">
      <summary>
        Class for a soft hexagonal crystal system that supports the crystal system hierarchy (i.e. the hard hexagonal
        condition is not enforced)
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftHexagonalCrystalSystem.ApplyParameterDependencies(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftHexagonalCrystalSystem.ValidateSoftAngleCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftHexagonalCrystalSystem.ValidateSoftParameterCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.SoftHexagonalCrystalSystem.GetDefaultParameterSet">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.SoftMonoclinicCrystalSystem">
      <summary>
        Class for a soft monoclinic crystal system that supports the crystal system hierarchy (i.e. the hard monoclinic
        condition is not enforced)
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftMonoclinicCrystalSystem.ApplyParameterDependencies(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftMonoclinicCrystalSystem.ValidateSoftAngleCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftMonoclinicCrystalSystem.ValidateSoftParameterCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.SoftMonoclinicCrystalSystem.GetDefaultParameterSet">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.SoftOrthorhombicCrystalSystem">
      <summary>
        Class for a soft orthorhombic crystal system that supports the crystal system hierarchy (i.e. the hard orthorhombic
        condition is not enforced)
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftOrthorhombicCrystalSystem.ApplyParameterDependencies(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftOrthorhombicCrystalSystem.ValidateSoftAngleCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftOrthorhombicCrystalSystem.ValidateSoftParameterCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.SoftOrthorhombicCrystalSystem.GetDefaultParameterSet">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.SoftTetragonalCrystalSystem">
      <summary>
        Class for a soft tetragonal crystal system that supports the crystal system hierarchy (i.e. the hard tetragonal
        condition is not enforced)
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftTetragonalCrystalSystem.ApplyParameterDependencies(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftTetragonalCrystalSystem.ValidateSoftAngleCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftTetragonalCrystalSystem.ValidateSoftParameterCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.SoftTetragonalCrystalSystem.GetDefaultParameterSet">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.SoftTriclinicCrystalSystem">
      <summary>
        Class for a soft triclinic crystal system that supports the crystal system hierarchy (i.e. the hard triclinic
        condition is not enforced)
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftTriclinicCrystalSystem.ApplyParameterDependencies(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftTriclinicCrystalSystem.ValidateSoftAngleCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftTriclinicCrystalSystem.ValidateSoftParameterCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.SoftTriclinicCrystalSystem.GetDefaultParameterSet">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.CrystalSystems.SoftTrigonalCrystalSystem">
      <summary>
        Class for a soft trigonal crystal system that supports the crystal system hierarchy (i.e. the hard trigonal
        condition is not enforced)
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftTrigonalCrystalSystem.ApplyParameterDependencies(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftTrigonalCrystalSystem.ValidateSoftAngleCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.CrystalSystems.SoftTrigonalCrystalSystem.ValidateSoftParameterCondition(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.CrystalSystems.SoftTrigonalCrystalSystem.GetDefaultParameterSet">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupContext">
      <summary>
        The <see cref="T:Mocassin.Framework.SQLiteCore.SqLiteContext`1" /> for a
        <see cref="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity" /> database
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupContext.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupContext.SpaceGroups">
      <summary>
        The <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> of
        <see cref="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity" /> instances
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupContext.SymmetryOperations">
      <summary>
        The <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> of
        <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationEntity" /> instances
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupContextProvider">
      <summary>
        Provider for the space group database context
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupContextProvider.DefaultFilepath">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupContextProvider.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService">
      <summary>
        Common interface for all space groups service implementations
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.HasDbConnection">
      <summary>
        Get a boolean flag if the service has a database connection to load space groups
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.LoadedGroup">
      <summary>
        Get the currently loaded space group interface
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.Comparer">
      <summary>
        The vector comparer used to compare fractional vectors
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.CreateCrystalSystem(Mocassin.Symmetry.CrystalSystems.ICrystalSystemSource)">
      <summary>
        Creates the crystal system to the currently loaded group from a crystal system provider
      </summary>
      <param name="source"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetOperationDictionary(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Creates a <see cref="T:Mocassin.Symmetry.SpaceGroups.IPositionOperationDictionary" /> for the provided source vector that informs about which operations can be
        used to create which position
      </summary>
      <param name="sourceVector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetSelfProjectionOperations(Mocassin.Mathematics.ValueTypes.Fractional3D@,System.Boolean)">
      <summary>
        Get a list interface of all symmetry operations that do not change the input vector (Optional with shift
        correction)
      </summary>
      <param name="sourceVector"></param>
      <param name="shiftCorrection"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetPointOperationGroup(Mocassin.Mathematics.ValueTypes.Fractional3D@,System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <summary>
        Get the point operation group for the provided origin point and point sequence based upon the currently loaded
        space group
      </summary>
      <param name="originPoint"></param>
      <param name="pointSequence"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetFullP1PathExtension(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <summary>
        Gets the unfiltered and untrimmed list of all extended position sequences symmetry equivalent to the input sequence
      </summary>
      <param name="refSequence"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetUnitCellP1PathExtension(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <summary>
        Gets the ordered, filtered and trimmed list of all extended position sequences that begin in the (0,0,0) origin unit
        cell
      </summary>
      <param name="refSequence"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetMinimalUnitCellP1PathExtensionOperations(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Boolean)">
      <summary>
        Gets a minimal set of <see cref="T:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation" /> instances required to fully describe the passed vector set
        in a P1 extended unit cell context (Warning: Removing the inverses is only valid for display purposes)
      </summary>
      <param name="refSequence"></param>
      <param name="filterInverses"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetUnitCellP1PositionExtension(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Gets a sorted list of unique fractional vectors that represent all positions equivalent to the original
        (Including original)
      </summary>
      <param name="refVector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetUnitCellP1PositionExtensions(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <summary>
        Get multiple sorted unique lists of extended positions that each includes the original reference vector
      </summary>
      <param name="refVectors"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetUnitCellP1PositionExtension``1(``0)">
      <summary>
        Gets a sorted list of unique structs that implement the fractional vector interface that represent all equivalent
        positions to the original (Including original)
      </summary>
      <typeparam name="TSource"></typeparam>
      <param name="refVector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetUnitCellP1PositionExtensions``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Get multiple sorted unique sets of positions with the same type as the provided fractional vector type
      </summary>
      <typeparam name="TSource"></typeparam>
      <param name="refVectors"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetEnvironmentDictionary(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <summary>
        Translates a reference sequence of positions onto each equivalent start position in the unit cell
      </summary>
      <param name="refSequence"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetFullGroupList">
      <summary>
        Gets a sorted list of all unique space group interfaces the service can provide
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.TryLoadGroup(System.Linq.Expressions.Expression{System.Func{Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity,System.Boolean}})">
      <summary>
        Tries to load a space group into the service using the provided search function (Returns false if no match is
        found)
      </summary>
      <param name="searchExpression"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.TryLoadGroup(Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry)">
      <summary>
        Tries to load a space group into the service that matches the provided space group identifier (Returns false if no
        match is found)
      </summary>
      <param name="entry"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.LoadGroup(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <summary>
        Loads the passed <see cref="T:Mocassin.Symmetry.SpaceGroups.ISpaceGroup" /> into the service
      </summary>
      <param name="spaceGroup"></param>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetSpecialVectorComparer``1">
      <summary>
        Creates a vector comparer for a special type of 3D vector interface
      </summary>
      <typeparam name="T1"></typeparam>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.ShiftFirstToOriginCell(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Double)">
      <summary>
        Shifts a sequence of fractional vectors in a manner that the first vector in the sequence is in the (0,0,0) origin
        cell
      </summary>
      <param name="source"></param>
      <param name="tolerance"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.ShiftFirstToOriginCell(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Shifts a sequence of fractional vectors in a manner that the first vector in the sequence is in the (0,0,0) origin
        cell
      </summary>
      <param name="source"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetOriginCellShiftedOperations(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Symmetry.SpaceGroups.ISymmetryOperation,System.Double)">
      <summary>
        Checks if the passed <see cref="T:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation" /> pushes the provided vector outside of the origin cell and
        returns either the operation itself or a origin shift corrected version
      </summary>
      <param name="start"></param>
      <param name="operation"></param>
      <param name="tolerance"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetOriginCellShiftedOperations(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Symmetry.SpaceGroups.ISymmetryOperation,System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Checks if the passed <see cref="T:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation" /> pushes the provided vector outside of the origin cell and
        returns either the operation itself or a origin shift corrected version
      </summary>
      <param name="start"></param>
      <param name="operation"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetOperationToTarget(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Creates the first possible operation that transforms the passed source vector onto the target.
        Returns null if none is found
      </summary>
      <param name="source"></param>
      <param name="target"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetPositionsInCuboid(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Gets all symmetry equivalent positions to the source that are within the limits of the edges of a cuboid
      </summary>
      <param name="source"></param>
      <param name="start"></param>
      <param name="end"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.GetPositionsInCuboid(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.FractionalBox3D@)">
      <summary>
        Gets all symmetry equivalent positions to the source that are within the provided
        <see cref="T:Mocassin.Mathematics.ValueTypes.FractionalBox3D" />
      </summary>
      <param name="source"></param>
      <param name="boundingBox"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.CheckInteractionGeometryIsChiral(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Checks a pair interaction geometry for chirality within the current space group. Caller has to ensure that both
        coordinates belong to the same sub-lattice
      </summary>
      <param name="left"></param>
      <param name="right"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroupService.CheckInteractionGeometryIsChiralPair(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Checks two pair interaction geometries for being a chiral pair within the current space group. Caller has to ensure
        that all coordinates belong to the same sub-lattice
      </summary>
      <param name="left0"></param>
      <param name="right0"></param>
      <param name="left1"></param>
      <param name="right1"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.IPositionOperationDictionary">
      <summary>
        Represents a position operation dictionary for lookup of the operation lists of specific positions
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.IPositionOperationDictionary.SpaceGroup">
      <summary>
        The space group the dictionary belongs to
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.IPositionOperationDictionary.SourcePosition">
      <summary>
        The original source position
      </summary>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.ISpaceGroup">
      <summary>
        Common interface for all objects that represent a space group
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroup.InternationalIndex">
      <summary>
        The index of the space group in the international space group tables
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroup.MauguinNotation">
      <summary>
        The Mauguin notation <see cref="T:System.String" /> of the group
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroup.VariationName">
      <summary>
        The name of the <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation" />
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroup.CrystalVariation">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemVariation" /> of the group
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroup.CrystalType">
      <summary>
        The <see cref="T:Mocassin.Symmetry.CrystalSystems.CrystalSystemType" /> of the group
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroup.Operations">
      <summary>
        Gets the sequence of <see cref="T:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation" /> operations defined in the
        <see cref="T:Mocassin.Symmetry.SpaceGroups.ISpaceGroup" />
      </summary>
      <returns></returns>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISpaceGroup.OperationLiterals">
      <summary>
        Get a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of the operation strings
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.ISpaceGroup.GetGroupEntry">
      <summary>
        Get the space group entry that contains group index, literal name and the specifier
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation">
      <summary>
        Represents a symmetry operation for fractional vectors in a translation invariant system
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.Core">
      <summary>
        Get the <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore" /> reference
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.Literal">
      <summary>
        Literal description of the operation in the (x,y,z) + (x_i,y_i,z_i) style
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.FlipsOrientation">
      <summary>
        Get a boolean flag if the operation causes an geometry orientation flip
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.TrimTolerance">
      <summary>
        The trim tolerance value
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.TrimTransform(System.Double,System.Double,System.Double)">
      <summary>
        Applies the symmetry operation to an unspecified coordinate point and creates new coordinate information that is trimmed to the 0,0,0 unit cell
      </summary>
      <param name="orgA"></param>
      <param name="orgB"></param>
      <param name="orgC"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.Transform(System.Double,System.Double,System.Double)">
      <summary>
        Applies the symmetry operation to an unspecified coordinate point and creates new coordinate information (Does not
        trim result into unit cell)
      </summary>
      <param name="orgA"></param>
      <param name="orgB"></param>
      <param name="orgC"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.TrimTransform(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Applies operation to a basic fractional vector with a unit cell trim
      </summary>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.TrimTransform(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Applies the symmetry operation to the passed vector, trims it into the unit cell and returns the applied shift
        to create the trim
      </summary>
      <param name="vector"></param>
      <param name="trimVector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.TrimTransform(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <summary>
        Applies operation to a sequence of fractional vectors with a unit cell trim
      </summary>
      <param name="vectors"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.Transform(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Applies operation to a basic fractional vector (Result is not trimmed to unit cell)
      </summary>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.Transform(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <summary>
        Applies operation to a sequence of fractional vectors without a unit cell trim
      </summary>
      <param name="vectors"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.TrimTransform(Mocassin.Mathematics.ValueTypes.IFractional3D)">
      <summary>
        Applies the symmetry operation to a fractional vector (With trim to origin cell)
      </summary>
      <param name="original"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.Transform(Mocassin.Mathematics.ValueTypes.IFractional3D)">
      <summary>
        Applies the symmetry operation to a fractional vector (No trim to origin cell)
      </summary>
      <param name="original"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation.GetOperationsArray">
      <summary>
        Get the linearized 12 entry operations array, the entries are ordered as row_1_column_1, row_1_column_2,...
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity">
      <summary>
        Class for a space group entity that provides the crystal symmetry information and can be stored in a database
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.OrderedOperations">
      <summary>
        Get the <see cref="T:System.Collections.Generic.IReadOnlyList`1" /> of
        <see cref="T:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation" /> where orientation flipping operations
        are at the end
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.MauguinNotation">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.VariationName">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.InternationalIndex">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.CrystalVariation">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.CrystalType">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.Operations">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.OperationLiterals">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.Id">
      <summary>
        The context ID for database storage and retrieval
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.BaseSymmetryOperations">
      <summary>
        The list of matrix symmetry operations of the group
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.#ctor">
      <summary>
        Creates new empty space group
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.IsReady">
      <summary>
        Checks if the symmetry operation array is empty
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.Equals(Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.GetGroupEntry">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity.CompareTo(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <summary>
        Compares to other space group interface by index and specifier index
      </summary>
      <param name="other"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationEntity">
      <summary>
        Symmetry operation entity class containing 3x4 matrix translational information for fractional coordinate vectors
        and can be stored in a database
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationEntity.TrimTolerance">
      <summary>
        Default trim tolerance value of 1.0e-10
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationEntity.ContextId">
      <summary>
        The database context ID
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationEntity.SpaceGroupId">
      <summary>
        The space group context ID
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationEntity.SpaceGroup">
      <summary>
        The affiliated space group
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationEntity.OperationString">
      <summary>
        The comma separated symmetry operation string for serialization and deserialization
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationEntity.SerializeToAttributeString(System.Char,System.IFormatProvider)">
      <summary>
        Creates a string from the symmetry operation matrix
      </summary>
      <param name="separator"></param>
      <param name="formatProvider"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationEntity.DeserializeFromAttributeString(System.String,System.Char,System.IFormatProvider)">
      <summary>
        Deserializes the operation matrix from a string of separated values
      </summary>
      <param name="serial"></param>
      <param name="separator"></param>
      <param name="formatProvider"></param>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup">
      <summary>
        Represents a point operation group that provides various symmetry operation sets to deal with symmetry equivalent
        point geometry sequences
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.SpaceGroupEntry">
      <summary>
        The space group entry this operation collection is valid fro
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.OriginPoint">
      <summary>
        The origin point for the operation collection
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.GetPointSequence">
      <summary>
        Get the point sequence the collection is valid for
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.GetUniquePointSequences">
      <summary>
        Get all existing unique point sequences of the group
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.GetPointOperations">
      <summary>
        Get the unfiltered list of all point symmetry operations of the origin point
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.GetUniqueSequenceOperations">
      <summary>
        Get the filtered list of all operations that yield unique vector sequences of the original point sequence
      </summary>
      <remarks> Unique in the sense that two sequences are not identical and cannot trivially matched by inverting one </remarks>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.GetSelfProjectionOperations">
      <summary>
        Get the filtered list of symmetry operations that project the original sequence onto itself in any order
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.GetUniqueProjectionOrders">
      <summary>
        Get a sequence of index lists that describe the possible orders if the vector sequence is projected onto itself
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.GetUniquePermutations``1(Mocassin.Mathematics.Permutation.IPermutationSource{``0},System.Collections.Generic.IEqualityComparer{``0},System.Func{``0,System.Int32})">
      <summary>
        Get all unique permutations (Value and geometry) within the provided permutation provider using the provided
        equality comparer and single value selector
        function for hash value generation
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="permProvider"></param>
      <param name="comparer"></param>
      <param name="selector"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.IPointOperationGroup.HasPermutationMultiplicity">
      <summary>
        Returns true if permuting the point sequence with values can show multiple equivalent values
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.PointOperationGroup">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.SpaceGroupEntry">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.OriginPoint">
      <summary>
        The origin point for the operation collection
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.PointSequence">
      <summary>
        The point sequence the collection is valid for
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.PointOperations">
      <summary>
        The unfiltered list of all point symmetry operations of the origin point
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.UniqueSequenceOperations">
      <summary>
        The filtered list of all operations that yield unique vector sequences of the original point sequence
      </summary>
      <remarks> Unique in the sense that two sequences are not identical cannot trivially matched by inverting one </remarks>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.SelfProjectionOperations">
      <summary>
        Get all operations that project the original point sequence onto itself
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.UniqueSelfProjectionOrders">
      <summary>
        Matrix that describes all possible equivalent orders of the vector sequence when performing a self projection (For
        value permutations)
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.GetUniquePointSequences">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.GetPointOperations">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.GetPointSequence">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.GetUniqueSequenceOperations">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.GetSelfProjectionOperations">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.GetUniqueProjectionOrders">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.GetUniquePermutations``1(Mocassin.Mathematics.Permutation.IPermutationSource{``0},System.Collections.Generic.IEqualityComparer{``0},System.Func{``0,System.Int32})">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.HasPermutationMultiplicity">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.PointOperationGroup.MakePermutationEqualityComparer``1(System.Collections.Generic.IEqualityComparer{``0},System.Func{``0[],System.Int32})">
      <summary>
        Checks if two permutations sets are directly identical or a equivalent within one of the existing equivalent self
        projection orders
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="valueComparer"></param>
      <param name="hashFunction"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry">
      <summary>
        Space group entry class that contains all information required to fully define a space group
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.IndexConstraint">
      <summary>
        The group number constraint from 1 to 230
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.Index">
      <summary>
        The group number
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.Literal">
      <summary>
        The name of the space group
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.Specifier">
      <summary>
        The specifier name, does only exist for groups with multiple specified versions
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.#ctor">
      <summary>
        Default constructor for a space group entry (Should be used for serialization only)
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.#ctor(System.Int32,System.String,System.String)">
      <summary>
        Create from values
      </summary>
      <param name="index"></param>
      <param name="literal"></param>
      <param name="specifier"></param>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.#ctor(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <summary>
        Create directly from a space group object
      </summary>
      <param name="group"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.CompareTo(Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry)">
      <summary>
        Compares the identifier
      </summary>
      <param name="other"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.CreateDefault">
      <summary>
        Creates the default space group entry (P1 group)
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry.Equals(Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupSet">
      <summary>
        XML Serializable container for space groups
      </summary>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupSet.#ctor">
      <summary>
        Create new space group set
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupSet.SpaceGroups">
      <summary>
        The space group list
      </summary>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.SpaceGroup">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.SourcePosition">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.OperationDictionary">
      <summary>
        Sorted position dictionary that holds a list of operations for each of the equivalent positions
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.Keys">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.Values">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.Count">
      <inheritdoc />
    </member>
    <member
      name="P:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.Item(Mocassin.Mathematics.ValueTypes.Fractional3D)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.#ctor(Mocassin.Mathematics.ValueTypes.Fractional3D,Mocassin.Symmetry.SpaceGroups.ISpaceGroup,System.Collections.Generic.SortedDictionary{Mocassin.Mathematics.ValueTypes.Fractional3D,Mocassin.Framework.Collections.SetList{Mocassin.Symmetry.SpaceGroups.ISymmetryOperation}})">
      <summary>
        Creates new operation dictionary with the passed source position and operation dictionary
      </summary>
      <param name="sourcePosition"></param>
      <param name="spaceGroup"></param>
      <param name="operationDictionary"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.ContainsKey(Mocassin.Mathematics.ValueTypes.Fractional3D)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.TryGetValue(Mocassin.Mathematics.ValueTypes.Fractional3D,System.Collections.Generic.IEnumerable{Mocassin.Symmetry.SpaceGroups.ISymmetryOperation}@)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.GetEnumerator">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.PositionOperationDictionary.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperation">
      <summary>
        Serializable non entity version of the matrix based symmetry operation
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperation.TrimTolerance">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperation.CreateShifted(Mocassin.Symmetry.SpaceGroups.ISymmetryOperation,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Creates a new <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperation" /> by adding a shift to an existing
        <see cref="T:Mocassin.Symmetry.SpaceGroups.ISymmetryOperation" />
      </summary>
      <param name="source"></param>
      <param name="shift"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase">
      <summary>
        Base class for all symmetry operation implementations
      </summary>
    </member>
    <member name="F:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.operationCore">
      <summary>
        The <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore" /> backing field
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.Core">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.FlipsOrientation">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.TrimTolerance">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.Literal">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.TrimTransform(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.TrimTransform(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.Transform(System.Double,System.Double,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.TrimTransform(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.Transform(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.TrimTransform(Mocassin.Mathematics.ValueTypes.IFractional3D)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.Transform(Mocassin.Mathematics.ValueTypes.IFractional3D)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.TrimTransform(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.Transform(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.GetOperationsArray">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationBase.SetCore(Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore@)">
      <summary>
        Sets the <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore" /> from an implementing class
      </summary>
      <param name="core"></param>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore">
      <summary>
        The core of a symmetry operation that contains the matrix entries. The layout is row wise and operations are
        performed as matrix * vector
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M11">
      <summary>
        Entry at row 1 column 1
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M12">
      <summary>
        Entry at row 1 column 2
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M13">
      <summary>
        Entry at row 1 column 3
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M14">
      <summary>
        Entry at row 1 column 4
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M21">
      <summary>
        Entry at row 2 column 1
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M22">
      <summary>
        Entry at row 2 column 2
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M23">
      <summary>
        Entry at row 2 column 3
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M24">
      <summary>
        Entry at row 2 column 4
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M31">
      <summary>
        Entry at row 3 column 1
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M32">
      <summary>
        Entry at row 3 column 2
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M33">
      <summary>
        Entry at row 3 column 3
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.M34">
      <summary>
        Entry at row 3 column 4
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        Creates a new <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore" /> from 12 basis entries
      </summary>
      <param name="m11"></param>
      <param name="m12"></param>
      <param name="m13"></param>
      <param name="m14"></param>
      <param name="m21"></param>
      <param name="m22"></param>
      <param name="m23"></param>
      <param name="m24"></param>
      <param name="m31"></param>
      <param name="m32"></param>
      <param name="m33"></param>
      <param name="m34"></param>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.#ctor(System.Double[])">
      <summary>
        Creates a new <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore" /> from an array with the 12 basis entries
      </summary>
      <param name="values"></param>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.ToString">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.op_Multiply(Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Performs a left multiplication with <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" /> vector as M * v. Returns the transformed
        <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" />
      </summary>
      <param name="core"></param>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.Transform(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Performs a left transform with <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" /> vector as M * v. Returns the transformed
        <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" />
      </summary>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.TrimTransform(Mocassin.Mathematics.ValueTypes.Fractional3D@,System.Double)">
      <summary>
        Performs a left transform with <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" /> vector as M * v. Returns the transformed
        <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" /> and trims it into the 0,0,0 unit cell with the provided tolerance
      </summary>
      <param name="vector"></param>
      <param name="trimTolerance"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.Transform(System.Double,System.Double,System.Double)">
      <summary>
        Performs a left transform with <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" /> vector as M * v. Returns the transformed
        <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" />
      </summary>
      <param name="orgA"></param>
      <param name="orgB"></param>
      <param name="orgC"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.TrimTransform(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        Performs a left transform with vector coordinates as M * v. Returns the transformed
        <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" /> and trims it into the 0,0,0 unit cell with the provided tolerance
      </summary>
      <param name="orgC"></param>
      <param name="trimTolerance"></param>
      <param name="orgA"></param>
      <param name="orgB"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.DeterminantTop3X3">
      <summary>
        Get the determinant of the non translational part of the operation (Upper 3x3 matrix)
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.FlipsOrientation(System.Double)">
      <summary>
        Checks if the operation flips orientation of elements when used as a transform
      </summary>
      <param name="tolerance"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.ToArray">
      <summary>
        Get the <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore" /> operation entries as a 12 entry array
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.Offset(System.Double,System.Double,System.Double)">
      <summary>
        Adds an a,b,c offset and returns the new <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore" />
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore.Offset(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Adds an <see cref="T:Mocassin.Mathematics.ValueTypes.Fractional3D" /> offset vector and returns the new
        <see cref="T:Mocassin.Symmetry.SpaceGroups.SymmetryOperationCore" />
      </summary>
      <param name="offset"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupService">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.ContextProvider">
      <summary>
        The space group context provider
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.HasDbConnection">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.LoadedGroup">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.VectorComparer">
      <summary>
        The equality comparator which contains the almost equal information for the double vectors
      </summary>
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.Comparer">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.DoubleComparer">
      <summary>
        Get the <see cref="T:System.Collections.Generic.IComparer`1" /> for double values used by the vector comparer
      </summary>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.#ctor(System.String,System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Creates new <see cref="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupService" /> that uses the provided comparer and database file path
      </summary>
      <param name="dbFilepath"></param>
      <param name="comparer"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.#ctor(System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Creates a new <see cref="T:Mocassin.Symmetry.SpaceGroups.SpaceGroupService" /> with the passed comparer that does not have a database connection
      </summary>
      <param name="comparer"></param>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.#ctor(System.String,System.Double)">
      <summary>
        Creates new space group service using the default space group context, database path and tolerance value for
        comparisons
      </summary>
      <param name="dbFilepath"></param>
      <param name="tolerance"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.#ctor(Mocassin.Framework.SQLiteCore.ISqLiteContextProvider{Mocassin.Symmetry.SpaceGroups.SpaceGroupContext},System.Collections.Generic.IComparer{System.Double})">
      <summary>
        Creates new space group service from custom SQLiteCoreContextProvider
      </summary>
      <param name="contextProvider"></param>
      <param name="comparer"></param>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.TryLoadGroup(System.Linq.Expressions.Expression{System.Func{Mocassin.Symmetry.SpaceGroups.SpaceGroupEntity,System.Boolean}})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.TryLoadGroup(Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.LoadGroup(Mocassin.Symmetry.SpaceGroups.ISpaceGroup)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.CreateCrystalSystem(Mocassin.Symmetry.CrystalSystems.ICrystalSystemSource)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetFullGroupList">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetUnitCellP1PositionExtension(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetUnitCellP1PositionExtensions(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetUnitCellP1PositionExtension``1(``0)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetUnitCellP1PositionExtensions``1(System.Collections.Generic.IEnumerable{``0})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.CreatePositionSetList(Mocassin.Mathematics.ValueTypes.Fractional3D)">
      <summary>
        Creates the position set list of all equivalent vectors to the passed source
      </summary>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.CreatePositionSetList(System.Double,System.Double,System.Double)">
      <summary>
        Creates a basic fractional position set list from double coordinate values
      </summary>
      <param name="a"></param>
      <param name="b"></param>
      <param name="c"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.CreatePositionSetList``1(``0)">
      <summary>
        Creates a source type fractional position set list where all results carry the original information of the source
      </summary>
      <typeparam name="TSource"></typeparam>
      <param name="vector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetFullP1PathExtension(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetUnitCellP1PathExtension(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetMinimalUnitCellP1PathExtensionOperations(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Boolean)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.ShiftFirstToOriginCell(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.ShiftFirstToOriginCell(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Collections.Generic.IComparer{System.Double})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetOriginCellShiftedOperations(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Symmetry.SpaceGroups.ISymmetryOperation,System.Double)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetOriginCellShiftedOperations(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Symmetry.SpaceGroups.ISymmetryOperation,System.Collections.Generic.IComparer{System.Double})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetOperationToTarget(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetPositionsInCuboid(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.FractionalBox3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetPositionsInCuboid(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.CheckInteractionGeometryIsChiralPair(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.CheckInteractionGeometryIsChiral(Mocassin.Mathematics.ValueTypes.Fractional3D@,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.ShiftFirstToPosition(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Shifts all positions so that the resulting sequence first position is on the new position
      </summary>
      <param name="source"></param>
      <param name="newFirst"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetOperationDictionary(Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetSelfProjectionOperations(Mocassin.Mathematics.ValueTypes.Fractional3D@,System.Boolean)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetPointOperationGroup(Mocassin.Mathematics.ValueTypes.Fractional3D@,System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetEnvironmentDictionary(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetTranslationShiftedOperation(Mocassin.Symmetry.SpaceGroups.ISymmetryOperation,Mocassin.Mathematics.ValueTypes.Fractional3D@)">
      <summary>
        Add a translation shift to a symmetry operation and returns a new symmetry operation that contains the new
        operations array and literal description
      </summary>
      <param name="operation"></param>
      <param name="shift"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.MakeProjectionMatrix(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Collections.Generic.IEnumerable{Mocassin.Symmetry.SpaceGroups.ISymmetryOperation})">
      <summary>
        Determines the unique possible projection orders of the positions within the passed vector sequence and operation
        set
      </summary>
      <param name="vectors"></param>
      <param name="symmetryOperations"></param>
      <returns> Operations have to be self projection operations for this function to yield meaningful results </returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.MakeVectorSequenceEquivalenceComparer">
      <summary>
        Creates a geometry sequence comparer that returns true if two sequences are equivalent or reversing one sequence
        makes them equivalent
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.MakeVectorSequenceProjectionComparer">
      <summary>
        Creates a geometry sequence comparer that returns true if two sequences contain the same set of vectors in any
        order
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Symmetry.SpaceGroups.SpaceGroupService.GetSpecialVectorComparer``1">
      <inheritdoc />
    </member>
  </members>
</doc>