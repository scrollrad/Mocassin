<?xml version="1.0"?>

<doc>
  <assembly>
    <name>Mocassin.Framework</name>
  </assembly>
  <members>
    <member name="T:Mocassin.Framework.Async.IAwaitable">
      <summary>
        Represent an asynchronous awaitable sequence or object that supports the compiler 'await' statement and supplies
        nothing on completion
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Async.IAwaitable.GetAwaiter">
      <summary>
        Returns new awaiter for async/await that awaits a result of type Void
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Async.IAwaitable`1">
      <summary>
        Represent an asynchronous awaitable sequence or object that supports the compiler 'await' statement and supplies a
        value on completion
      </summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Mocassin.Framework.Async.IAwaitable`1.GetAwaiter">
      <summary>
        Returns new awaiter for async/await that awaits a result of type TResult
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Async.IAwaiter">
      <summary>
        Represents an Async/Await awaiter object that returns nothing and schedules async method continuations when it
        completes
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Async.IAwaiter.IsCompleted">
      <summary>
        Indicates if the awaitable operation is completed
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Async.IAwaiter.GetResult">
      <summary>
        Returns the result
      </summary>
    </member>
    <member name="T:Mocassin.Framework.Async.IAwaiter`1">
      <summary>
        Represents an Async/Await awaiter object that returns a value and schedules async method continuations when it
        completes
      </summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Async.IAwaiter`1.IsCompleted">
      <summary>
        Indicates if the awaitable operation is completed
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Async.IAwaiter`1.GetResult">
      <summary>
        Returns the result
      </summary>
    </member>
    <member name="T:Mocassin.Framework.Async.ObservableAwaiter">
      <summary>
        Abstract base class for asynchronous awaiter that get notified for completion through an IObservable source and
        supply no value on completion
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Async.ObservableAwaiter.CheckStatus">
      <summary>
        Completion status checker delegate
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Async.ObservableAwaiter.ContinueSubscription">
      <summary>
        The subscription disposable for the continue subscription
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Async.ObservableAwaiter.IsCompleted">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Async.ObservableAwaiter.#ctor(System.Func{System.Boolean})">
      <summary>
        Creates a new <see cref="T:Mocassin.Framework.Async.ObservableAwaiter" /> using the provided
        <see cref="T:System.Func`1" /> completion check
      </summary>
      <param name="checkStatus"></param>
    </member>
    <member name="M:Mocassin.Framework.Async.ObservableAwaiter.GetResult">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Async.ObservableAwaiter.OnCompleted(System.Action)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Async.ObservableAwaiter.Create``1(System.IObservable{``0},System.Func{System.Boolean})">
      <summary>
        Creates a new ObservableAwaiter for a notification source of arbitrary type
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="notifier"></param>
      <param name="checkStatus"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Async.ObservableAwaiter.Empty">
      <summary>
        Creates an empty awaiter that ddoes nothing other than allowing to be awaited (Will instantly continue)
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Async.ObservableAwaiter`1">
      <summary>
        Universal class for asynchronous awaiter that get notified for completion through an IObservable
        source and supply no value on completion
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Async.ObservableAwaiter`1.Notifier">
      <summary>
        Source of the continue notification
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Async.ObservableAwaiter`1.#ctor(System.IObservable{`0},System.Func{System.Boolean})">
      <summary>
        Creates new awaiter for the provided observable and check status method
      </summary>
      <param name="notifier"></param>
      <param name="checkStatus"></param>
    </member>
    <member name="M:Mocassin.Framework.Async.ObservableAwaiter`1.OnCompleted(System.Action)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Async.EmptyAwaiter">
      <summary>
        Empty awaiter that does nothing except allowing to use the await keyword on non awaitable awaitable implementers
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Async.EmptyAwaiter.IsCompleted">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Async.EmptyAwaiter.GetResult">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Async.EmptyAwaiter.OnCompleted(System.Action)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Collections.CompareAdapter`1">
      <summary>
        Generic compare adapter for compare delegates that implements both generic IComparer and IEqualityComparer
      </summary>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Collections.CompareAdapter`1.CompareFunction">
      <summary>
        The wrapper comparison delegate
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Collections.CompareAdapter`1.#ctor(System.Func{`0,`0,System.Int32})">
      <summary>
        Creates new wrapped comparer from the passed delegate
      </summary>
      <param name="compareFunction"></param>
    </member>
    <member name="M:Mocassin.Framework.Collections.CompareAdapter`1.Equals(`0,`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CompareAdapter`1.GetHashCode(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CompareAdapter`1.Compare(`0,`0)">
      <summary>
        Compares two values
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Collections.EqualityCompareAdapter`1">
      <summary>
        Equality compare adapter that encapsulates an equality comparer from compare and hash delegate
      </summary>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Collections.EqualityCompareAdapter`1.CompareFunction">
      <summary>
        The equality compare delegate
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.EqualityCompareAdapter`1.HashFunction">
      <summary>
        The hash function used by the comparer
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.EqualityCompareAdapter`1.#ctor(System.Func{`0,`0,System.Boolean},System.Func{`0,System.Int32})">
      <summary>
        Create new compare adapter from delegate and hash function delegate
      </summary>
      <param name="compareDelegate"></param>
      <param name="hashFunction"></param>
    </member>
    <member name="M:Mocassin.Framework.Collections.EqualityCompareAdapter`1.#ctor(System.Func{`0,`0,System.Boolean})">
      <summary>
        Creates new equality compare adapter with the passed compare delegate and the default hash function
      </summary>
      <param name="compareDelegate"></param>
    </member>
    <member name="M:Mocassin.Framework.Collections.EqualityCompareAdapter`1.Equals(`0,`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.EqualityCompareAdapter`1.GetHashCode(`0)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Collections.TupleComparer`2">
      <summary>
        Generic value tuple comparer for tuples with 2 comparable components that compares the actual content in tuple
        definition order
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.TupleComparer`2.Equals(System.ValueTuple{`0,`1},System.ValueTuple{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.TupleComparer`2.GetHashCode(System.ValueTuple{`0,`1})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Collections.TupleComparer`2.Compare(System.ValueTuple{`0,`1},System.ValueTuple{`0,`1})">
      <summary>
        Compares the content of two tuples in tuple definition order
      </summary>
      <param name="x"></param>
      <param name="y"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Collections.ArrayCode`1">
      <summary>
        Defines an abstract base class wrapper for implementations of arrays that describe an encoding
      </summary>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Collections.ArrayCode`1.CodeValues">
      <summary>
        The code array sequence
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.ArrayCode`1.Count">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Collections.ArrayCode`1.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ArrayCode`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ArrayCode`1.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Collections.ArrayCode`1.CopyTo(Mocassin.Framework.Collections.ArrayCode{`0},System.Int32)">
      <summary>
        Copies the code sequence to another starting at the specified index
      </summary>
      <param name="other"></param>
      <param name="index"></param>
    </member>
    <member name="M:Mocassin.Framework.Collections.ArrayCode`1.GetTypeName">
      <summary>
        Get the type name of the array code
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Collections.ArrayCode`1.ToString">
      <summary>
        Get a JSON representation of the object
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Collections.ListReadOnlyWrapper`1">
      <summary>
        Emulates a read only behavior of a list while providing the generic IList interface
      </summary>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.Data">
      <summary>
        The encapsulated list interface
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.Count">
      <inheritdoc cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count" />
    </member>
    <member name="P:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.Item(System.Int32)">
      <inheritdoc cref="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)" />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.#ctor">
      <summary>
        Create new read only list
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.IndexOf(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.Insert(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.Contains(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.CopyTo(`0[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Collections.ListReadOnlyWrapper`1.FromEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Creates read only list from an enumerable of potentially derived type
      </summary>
      <typeparam name="T2"></typeparam>
      <param name="list"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Collections.BinarySearchableList`1">
      <summary>
        Generic abstract base class for sorted lists that support binary search operations
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.BinarySearchableList`1.List">
      <summary>
        The internally wrapped list of type T1
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.BinarySearchableList`1.Comparer">
      <summary>
        The used comparer of type T1 to sort the entries
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.BinarySearchableList`1.Count">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Collections.BinarySearchableList`1.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Collections.BinarySearchableList`1.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Collections.BinarySearchableList`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>
        Creates a new binary searchable list with the specified comparer. Uses default comparer if none is specified
      </summary>
      <param name="comparer"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.BinarySearchableList`1.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
      <summary>
        Creates a new binary searchable list with the specified comparer and capacity
      </summary>
      <param name="comparer"></param>
      <param name="capacity"></param>
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.Contains(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.CopyTo(`0[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.IndexOf(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.Insert(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.TrimExcess">
      <summary>
        Calls excess trim on the internal list object
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.GetCppLowerBound(`0)">
      <summary>
        C++ Style lower bound binary search for sorted (provided comparer) collections: O log(n) complexity search of first
        entry that does not compare less than value
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.GetCppUpperBound(`0)">
      <summary>
        C++ Style upper bound binary search for sorted (provided comparer) collections: O log(n) complexity search of first
        entry that does not compare less than value
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.GetCppEnclosingBounds(`0)">
      <summary>
        C++ style lower and upper bound binary range search for sorted (provided comparer) collections: 2* O log(n) search
        for first entry not lesser and first entry greater than value
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.BinarySearchableList`1.Add(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        Adds multiple new entries from a sequence
      </summary>
      <param name="source"></param>
    </member>
    <member name="M:Mocassin.Framework.Collections.BinarySearchableList`1.Add(`0[])">
      <summary>
        Add multiple entries from a params set
      </summary>
      <param name="source"></param>
    </member>
    <member name="T:Mocassin.Framework.Collections.MultisetList`1">
      <summary>
        Wrapped list that is always sorted utilizing the provided comparer and allows multiple entries that compare equal
        to each other
      </summary>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="M:Mocassin.Framework.Collections.MultisetList`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Collections.MultisetList`1.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.MultisetList`1.Insert(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.MultisetList`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.MultisetList`1.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.MultisetList`1.IndexOf(`0)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Collections.SetList`1">
      <summary>
        Wrapped list that is always sorted utilizing the provided comparer and does not allow multiple entries that compare
        equal to each other
      </summary>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="M:Mocassin.Framework.Collections.SetList`1.#ctor">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.SetList`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Collections.SetList`1.#ctor(System.Collections.Generic.IComparer{`0},System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.SetList`1.IndexOf(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.SetList`1.Insert(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.SetList`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.SetList`1.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Collections.ContainerFactory">
      <summary>
        Contains factory methods to create special containers without too much generic argument cluttering
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.ContainerFactory.CreateSetList``1(System.Collections.Generic.IComparer{``0})">
      <summary>
        Creates a new set equivalent list that uses the specified comparer (All entries are unique and sorted)
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.ContainerFactory.CreateSetList``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Creates new set list with the provided comparer that is filled with a sequence of initial values
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="comparer"></param>
      <param name="initialValues"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.ContainerFactory.CreateMultisetList``1(System.Collections.Generic.IComparer{``0})">
      <summary>
        Creates a new multiset equivalent list that uses the specified comparer (All entries are sorted but not unique)
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.ContainerFactory.CreateMultisetList``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Creates new multiset list with the provided comparer that is filled with a sequence of initial values
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="comparer"></param>
      <param name="initialValues"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Collections.CsvSerializableList`1">
      <summary>
        Generic string convertible list wrapper that supplies serializing and deserializing the list into a string in a csv
        style
      </summary>
      <typeparam name="T"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Collections.CsvSerializableList`1.Separator">
      <summary>
        The separator for the values
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.CsvSerializableList`1.Values">
      <summary>
        The inner list of values
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.CsvSerializableList`1.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Collections.CsvSerializableList`1.Count">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Collections.CsvSerializableList`1.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.#ctor">
      <summary>
        Default construct a new string convertible list. Default separator is a comma
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.#ctor(System.Int32)">
      <summary>
        Default construct new convertible list with initial capacity
      </summary>
      <param name="capacity"></param>
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.Contains(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.CopyTo(`0[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.IndexOf(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.Insert(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.CsvSerializableList`1.ToString">
      <summary>
        Creates a single string from the list where values are separated by the defined separator
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.CsvSerializableList`1.FromString(System.String,System.Func{System.String,`0})">
      <summary>
        Loads the list from a single separated value string and a converter delegate that converts a substring to the
        correct type
      </summary>
      <param name="linearized"></param>
      <param name="converter"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.CsvSerializableList`1.Parse(System.String,System.Func{System.String,`0},System.Char)">
      <summary>
        Parse a string of separated values into a csv list of the specified type using the provided string to value
        converter and separator
      </summary>
      <param name="linearized"></param>
      <param name="converter"></param>
      <param name="separator"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.CsvSerializableList`1.Parse(System.String,System.Func{System.String,`0})">
      <summary>
        Parses a string of separated values into a csv list of the specified type using the provided converter and default
        separator ','
      </summary>
      <param name="linearized"></param>
      <param name="converter"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Collections.GenericListAdapter`1">
      <summary>
        Adapter that emulates a generic list interface for a non generic list
      </summary>
      <typeparam name="T1"></typeparam>
      <remarks> Circumvents the C# invalid cast problem of list interfaces to list interfaces of derived type </remarks>
    </member>
    <member name="P:Mocassin.Framework.Collections.GenericListAdapter`1.List">
      <summary>
        The encapsulated non generic list interface
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.GenericListAdapter`1.Count">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Collections.GenericListAdapter`1.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Collections.GenericListAdapter`1.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.#ctor(System.Collections.IList)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.IndexOf(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.Insert(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.Contains(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.CopyTo(`0[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Collections.GenericListAdapter`1.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Collections.IKeyValueSetter`2">
      <summary>
        Represents a setter access for key value information that allows only to set existing values
      </summary>
      <typeparam name="TKey"></typeparam>
      <typeparam name="TValue"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Collections.IKeyValueSetter`2.Keys">
      <summary>
        Get the collection of existing keys
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.IKeyValueSetter`2.Values">
      <summary>
        Get the collection of existing values
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Collections.IKeyValueSetter`2.TrySetValue(`0,`1)">
      <summary>
        Tries to set a value if the key already exists
      </summary>
      <param name="key"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Collections.InputDictionary`2">
      <summary>
        Input only wrapper for a dictionary that allows to manipulate only values for already existing keys
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.InputDictionary`2.ValueDictionary">
      <summary>
        The wrapped dictionary interface that contains the values
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.InputDictionary`2.Keys">
      <summary>
        The collection of keys
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Collections.InputDictionary`2.Values">
      <summary>
        The collection of values
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Collections.InputDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>
        Creates an input wrapper around the passed value dictionary
      </summary>
      <param name="valueDictionary"></param>
    </member>
    <member name="M:Mocassin.Framework.Collections.InputDictionary`2.GetEnumerator">
      <summary>
        Get the enumerator for the dictionary
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Collections.InputDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        Get the enumerator for the dictionary
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Collections.InputDictionary`2.TrySetValue(`0,`1)">
      <summary>
        Tries to set a value. If the key does not exists the method returns false
      </summary>
      <param name="key"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Constraints.IObjectConstraint`2">
      <summary>
        General generic interface for all object constraints of an unrestricted source type to a restricted target type
        (target can be identical to source if no value object is used)
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Constraints.IObjectConstraint`2.TryParse(`0,`1@)">
      <summary>
        Parses source to target if the internal constraint is not violated (Returns false on violation)
      </summary>
      <param name="sourceValue"></param>
      <param name="targetValue"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Constraints.IObjectConstraint`2.IsValid(`0)">
      <summary>
        Validates if the given source object violates the internal constraints
      </summary>
      <param name="sourceValue"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Constraints.RegexStringConstraint">
      <summary>
        A regular expression based string constraint that limits characters, length and formatting of a string
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Constraints.RegexStringConstraint.Regex">
      <summary>
        Get the constraint <see cref="P:Mocassin.Framework.Constraints.RegexStringConstraint.Regex" />
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Constraints.RegexStringConstraint.#ctor(System.Text.RegularExpressions.Regex)">
      <summary>
        Creates new regex based string constraint with the given regex
      </summary>
      <param name="regex"></param>
    </member>
    <member name="M:Mocassin.Framework.Constraints.RegexStringConstraint.IsValid(System.String)">
      <summary>
        Check if the internal regex is a match for the source string
      </summary>
      <param name="sourceValue"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Constraints.RegexStringConstraint.TryParse(System.String,System.String@)">
      <summary>
        Parses string to out string if internal regex is not violated, returns false on violation
      </summary>
      <param name="sourceValue"></param>
      <param name="targetValue"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Constraints.IValueSeries">
      <summary>
        Represents a double precision series of flp values ranging from a lower limit to an upper limit in internally
        defined steps
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Constraints.IValueSeries.LowerLimit">
      <summary>
        The lower limit of the series. Values are greater or equal to this value
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Constraints.IValueSeries.UpperLimit">
      <summary>
        The upper limit of the series. Values are lesser or equal to this value
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Constraints.IValueSeries.GetValueCount">
      <summary>
        The number of values in the series
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Constraints.IValueSeries.GetValues">
      <summary>
        Get an enumerbale seqeunce containing all values of the series
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Constraints.ValueSeries">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Constraints.ValueSeries.LowerLimit">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Constraints.ValueSeries.UpperLimit">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Constraints.ValueSeries.Increment">
      <summary>
        The increment step of the series
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueSeries.#ctor(System.Double,System.Double,System.Double)">
      <summary>
        Create new value series with lower limit, upper limit and the increment value. Auto sorts lower and upper by value
      </summary>
      <param name="lowerLimit"></param>
      <param name="upperLimit"></param>
      <param name="increment"></param>
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueSeries.#ctor">
      <summary>
        Create new default value series
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueSeries.GetValueCount">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueSeries.GetValues">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueSeries.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueSeries.System#Collections#IEnumerable#GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueSeries.MakeSingle(System.Double)">
      <summary>
        Creates a pseudo value series that contains only a single value
      </summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Constraints.IValueConstraint`2">
      <summary>
        Generic value constraint of an unrestricted source type struct to a restricted target type (target can be identical
        to source if no value object is used)
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Constraints.IValueConstraint`2.MaxValue">
      <summary>
        The upper boundary value of the source type
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Constraints.IValueConstraint`2.MinValue">
      <summary>
        The lower boundary value of the source type
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Constraints.IValueConstraint`2.MinIsIncluded">
      <summary>
        Indicates if the maximum boundary value is included or not
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Constraints.IValueConstraint`2.MaxIsIncluded">
      <summary>
        Indicates if the minimal boundary value is included or not
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Constraints.IValueConstraint`2.TryParse(`0,`1@)">
      <summary>
        Parses source to target if the internal constraint is not violated (Returns false on violation)
      </summary>
      <param name="sourceValue"></param>
      <param name="targetValue"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Constraints.IValueConstraint`2.IsValid(`0)">
      <summary>
        Validates if the given source object violates the internal constraint
      </summary>
      <param name="sourceValue"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Constraints.ValueConstraint`1">
      <summary>
        Generic value constraint for cases where source and target type of the constraint are identical
      </summary>
      <typeparam name="TSource"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Constraints.ValueConstraint`1.MaxValue">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Constraints.ValueConstraint`1.MinValue">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Constraints.ValueConstraint`1.MinIsIncluded">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Constraints.ValueConstraint`1.MaxIsIncluded">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueConstraint`1.#ctor(System.Boolean,`0,`0,System.Boolean)">
      <summary>
        Creates new basic value constraint with the given limitation information
      </summary>
      <param name="maxValue"></param>
      <param name="minValue"></param>
      <param name="minIsIncluded"></param>
      <param name="maxIsIncluded"></param>
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueConstraint`1.IsValid(`0)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueConstraint`1.TryParse(`0,`0@)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Constraints.ValueConstraint`1.ToString">
      <summary>
        Display the value constraint
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Constraints.ValueConstraint`1.EnsureLimit(`0,`0,`0,System.Collections.Generic.IComparer{`0})">
      <summary>
        Forces the limits onto the passed value. Returns either the value itself or the closest set boundary
      </summary>
      <param name="value"></param>
      <param name="upper"></param>
      <param name="lower"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Events.ReactiveEvent`1">
      <summary>
        Reactive event that wraps a System.Reactive subject for generic push based asynchronous event system
        implementations
        implementation
      </summary>
      <typeparam name="TSubject"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Events.ReactiveEvent`1.Subject">
      <summary>
        The subject of the event to enable subscriptions and distribution of push notifications
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Events.ReactiveEvent`1.HasObservers">
      <summary>
        Get a boolean flag if the event has any subscribers
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Events.ReactiveEvent`1.#ctor">
      <summary>
        Creates a new event provider
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Events.ReactiveEvent`1.AsObservable">
      <summary>
        Hides the identity of the observable sequence and provides an interface for event subscriptions
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Events.ReactiveEvent`1.OnNextAsync(`0)">
      <summary>
        Distributes a new event value through a new task
      </summary>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Events.ReactiveEvent`1.OnNextAsync">
      <summary>
        Distributes a default argument event through a new task
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Events.ReactiveEvent`1.OnNext(`0)">
      <summary>
        Distributes the event synchronous
      </summary>
      <param name="value"></param>
    </member>
    <member name="M:Mocassin.Framework.Events.ReactiveEvent`1.OnNext">
      <summary>
        Distributes the event synchronous with a subject default argument
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Events.ReactiveEvent`1.OnError(System.Exception)">
      <summary>
        Distributes an error synchronously to all subscribers
      </summary>
      <param name="exception"></param>
    </member>
    <member name="M:Mocassin.Framework.Events.ReactiveEvent`1.OnCompleted">
      <summary>
        Distributes completion to all subscribers synchronously
      </summary>
    </member>
    <member name="T:Mocassin.Framework.Exceptions.CustomException">
      <inheritdoc />
      <remarks> Abstract base class for all custom errors. Do not use to encapsulate basic .NET exceptions </remarks>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.CustomException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.CustomException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Exceptions.CustomException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.CustomException.ToString">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Exceptions.InvalidGenericTypeException">
      <summary>
        Exception thrown if generic components or methods do not support the specified type
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.InvalidGenericTypeException.ParameterType">
      <summary>
        The type of the parameter
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidGenericTypeException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidGenericTypeException.#ctor(System.String,System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidGenericTypeException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Exceptions.InvalidGenericTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidGenericTypeException.ToString">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Exceptions.InvalidObjectStateException">
      <summary>
        Exception thrown if a method/property call fails due to its internal state rather than the passed parameters (e.g.
        unset fields or flags)
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.InvalidObjectStateException.DataMemberName">
      <summary>
        The name of the invalid property or field
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidObjectStateException.#ctor(System.String)">
      <summary>
        Creates new exception from the specified message
      </summary>
      <param name="message"></param>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidObjectStateException.#ctor(System.String,System.String)">
      <summary>
        Creates new exception from the specified message and the data member name that was invalid
      </summary>
      <param name="message"></param>
      <param name="dataMemberName"></param>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidObjectStateException.#ctor(System.String,System.Exception)">
      <summary>
        Creates new exception from the specified message and inner exception
      </summary>
      <param name="message"></param>
      <param name="innerException"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Exceptions.InvalidObjectStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        Creates new exception from serialization info and a streaming context
      </summary>
      <param name="info"></param>
      <param name="context"></param>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidObjectStateException.ToString">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Exceptions.InvalidPipelineInputException">
      <summary>
        Exception thrown if a processing pipeline receives a non-processable type and no default handle case exists
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.InvalidPipelineInputException.InputType">
      <summary>
        The actual model object type that caused the exception
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidPipelineInputException.#ctor(System.String,System.Type)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidPipelineInputException.ToString">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Exceptions.InvalidStateChangeException">
      <summary>
        Exception thrown if a method/property access to an object tries to change an inherited field/property that is
        immutable in the implementing type
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.InvalidStateChangeException.DataMemberName">
      <summary>
        The name of the immutable property or field
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidStateChangeException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidStateChangeException.#ctor(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidStateChangeException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Exceptions.InvalidStateChangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.InvalidStateChangeException.ToString">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Exceptions.ConsoleOutputSpy">
      <summary>
        An event driven <see cref="T:System.IO.TextWriter" /> that supports spying on the console output stream
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.ConsoleOutputSpy.ConsoleOutBackup">
      <summary>
        Get or set a backup of the original console <see cref="T:System.IO.TextWriter" />
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.ConsoleOutputSpy.StringWriteEvent">
      <summary>
        Get the <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for string write events
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.ConsoleOutputSpy.ErrorWriteEvent">
      <summary>
        Get the <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for error write events
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.ConsoleOutputSpy.Encoding">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Exceptions.ConsoleOutputSpy.StringWriteNotifications">
      <summary>
        Get an <see cref="T:System.IObservable`1" /> that notifies about string write events
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.ConsoleOutputSpy.ErrorWriteNotifications">
      <summary>
        Get an <see cref="T:System.IObservable`1" /> that notifies about string write events
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.ConsoleOutputSpy.IsSuppressingConsole">
      <summary>
        Get or set a boolean flag if the console output should be suppressed
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Exceptions.ConsoleOutputSpy.IsAttached">
      <summary>
        Get a boolean flag if the spy is attached to the console
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.#ctor(System.Text.Encoding)">
      <summary>
        Creates a new <see cref="T:Mocassin.Framework.Exceptions.ConsoleOutputSpy" /> using the provided
        <see cref="P:Mocassin.Framework.Exceptions.ConsoleOutputSpy.Encoding" />
      </summary>
      <param name="encoding"></param>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.#ctor">
      <summary>
        Creates a <see cref="T:Mocassin.Framework.Exceptions.ConsoleOutputSpy" /> that uses UTF16 encoding
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.Attach">
      <summary>
        Attaches to the <see cref="T:System.Console" />
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.Detach">
      <summary>
        Detaches from the <see cref="T:System.Console" /> and restores the original output behavior
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.Write(System.Char)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.Write(System.String)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.Dispose(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.Write(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.WriteLine(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Exceptions.ConsoleOutputSpy.WriteLine(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinArrayExtensions">
      <summary>
        ICon shared array extension class for generic array extensions methods
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.GetDimensions``1(``0[0:,0:])">
      <summary>
        Gets the dimensions of a 2D array as value tuple
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="array"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.Populate``1(``0[],``0)">
      <summary>
        Populates an array with a default value
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="values"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.PopulateByCounter(System.Int32[],System.Int32)">
      <summary>
        Populates an integer array by a continuous counter starting at te provided index
      </summary>
      <param name="values"></param>
      <param name="start"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.Populate``1(``0[],System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Populates a one dimensional array with values from an enumerable sequence
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="target"></param>
      <param name="values"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.Populate``1(``0[],System.Func{``0})">
      <summary>
        Populates a one dimensional array with values from a provider delegate
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="target"></param>
      <param name="provider"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.Populate``1(``0[0:,0:],System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Populates a two dimensional array with values from an enumerable sequence
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="target"></param>
      <param name="values"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.Populate``1(``0[0:,0:],System.Func{``0})">
      <summary>
        Populates a two dimensional array with values from a provider delegate
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="target"></param>
      <param name="provider"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.Populate``1(``0[0:,0:,0:],System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Populates a three dimensional array with values from an enumerable sequence
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="target"></param>
      <param name="values"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.Populate``1(``0[0:,0:,0:],System.Func{``0})">
      <summary>
        Populates a three dimensional array with values from an enumerable sequence
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="target"></param>
      <param name="provider"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinArrayExtensions.MakeBlockItemCounts(System.Array)">
      <summary>
        Determines the index skips for each dimension (except the last as it is always equal to 1) if the passed array
        would be accessed as one dimensional
      </summary>
      <param name="array"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinCollectionExtensions">
      <summary>
        Extension class for general extension collections
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinCollectionExtensions.SelectRandom``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Random)">
      <summary>
        Uniformly select a subset of entries from a collection using the provided random number generator
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="collection"></param>
      <param name="count"></param>
      <param name="random"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinCollectionExtensions.SelectRandom``2(System.Collections.Generic.ICollection{``0},System.Int32,System.Random,System.Func{``0,``1})">
      <summary>
        Project each element of a uniformly selected subset of specified size from a generic collection into a new form
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <param name="collection"></param>
      <param name="count"></param>
      <param name="random"></param>
      <param name="selector"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinCollectionExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Adds multiple values to a generic collection
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="collection"></param>
      <param name="values"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinCollectionExtensions.SelectRandomIndex``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Random)">
      <summary>
        Selects a set of random index entries from a <see cref="T:System.Collections.Generic.ICollection`1" />
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="collection"></param>
      <param name="count"></param>
      <param name="random"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinCollectionExtensions.ListenToContentChanges``1(System.Collections.Generic.IList{``0},System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>
        Causes a one way synchronization of an <see cref="T:System.Collections.Generic.IList`1" /> to an
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />
        observable. Returns a <see cref="T:System.IDisposable" /> to cancel the synchronization. Only content is synchronized, not
        content order
      </summary>
      <typeparam name="T"></typeparam>
      <param name="observer"></param>
      <param name="observable"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinCollectionExtensions.FirstOrNew``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},System.Func{``0},System.Boolean)">
      <summary>
        Tries to find and return the first item that matches the predicate or uses the provided constructor to create a new
        one. Optional flag to add/not add the item to the source collection
      </summary>
      <typeparam name="T"></typeparam>
      <param name="collection"></param>
      <param name="predicate"></param>
      <param name="constructor"></param>
      <param name="addNewToSource"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinCollectionExtensions.DisposeAllAndClear``1(System.Collections.Generic.ICollection{``0})">
      <summary>
        Disposes all disposables of a <see cref="T:System.Collections.Generic.ICollection`1" /> of
        <see cref="T:System.IDisposable" /> and clears then clears
        the collection
      </summary>
      <typeparam name="T"></typeparam>
      <param name="collection"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinCollectionExtensions.DisposeAllAndClear``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>
        Disposes all disposables of a <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> of
        <see cref="T:System.IDisposable" /> and clears then
        clears the collection
      </summary>
      <typeparam name="T"></typeparam>
      <param name="collection"></param>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinLinqExtensions">
      <summary>
        Contains linq style extension methods for the IEnumerable interface
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.GetReverseIterator``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Get a reverse iterator for a generic enumerable sequence (Uses the list or generic interface if available, else
        linq reverse)
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="sequence"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.ToCollection``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Casts the enumerable to a generic collection if possible or creates a new collection from the enumerable
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="enumerable"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.Action``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
        Perform an action on each element of an enumerable sequence and returns the modified value
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="values"></param>
      <param name="action"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.LexicographicCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Generic lexicographical compare for two sequences of values where the items implement generic IComparable
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="lhs"></param>
      <param name="rhs"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.LexicographicCompare``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>
        Perform a sequence comparison of two sequences in order using the provided comparer interface.
        If the sequences are identical till point of completion of the first, the lengths are compared
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="lhs"></param>
      <param name="rhs"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.SelectConsecutivePairs``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
      <summary>
        Performs a select operation on consecutive pairs within the enumerable yielding N-1 results. First argument of
        function is last value, second is current value
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <param name="values"></param>
      <param name="function"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.AsSingleton``1(``0)">
      <summary>
        Enables passing of a single item as en enumerable sequence containing only that item
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.IndexOfMany``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>
        Returns the enumeration index of all entries that match the search predicate
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="searchSequence"></param>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.ToList``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
        Linq style <see cref="T:System.Collections.Generic.List`1" /> conversion extension with initial capacity value
      </summary>
      <typeparam name="T"></typeparam>
      <param name="source"></param>
      <param name="capacity"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
        Linq style <see cref="T:System.Array" /> conversion for cases where the size of the
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> is known
      </summary>
      <typeparam name="T"></typeparam>
      <param name="source"></param>
      <param name="length"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.ToObservableCollection``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Linq style <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> conversion extension
      </summary>
      <typeparam name="T"></typeparam>
      <param name="source"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.AsCollection``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Get an <see cref="T:System.Collections.Generic.ICollection`1" /> from the provided
        <see cref="T:System.Collections.Generic.IEnumerable`1" />. If the source does not
        implement the interface a new collection is created by invoking the sequence
      </summary>
      <typeparam name="T"></typeparam>
      <param name="source"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Get an <see cref="T:System.Collections.Generic.IList`1" /> from the provided
        <see cref="T:System.Collections.Generic.IEnumerable`1" />. If the source does not implement
        the interface a new list is created by invoking the sequence
      </summary>
      <typeparam name="T"></typeparam>
      <param name="source"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinLinqExtensions.Load``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Enumerates the provided <see cref="T:System.Collections.Generic.IEnumerable`1" />. Equivalent to calling ToList() and throwing away the list
        without the overhead of actually creating a list
      </summary>
      <typeparam name="T"></typeparam>
      <param name="source"></param>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinListExtensions">
      <summary>
        Extension class for objects that implement the generic IList interface, provides e.g. extended C++ style search
        functionality
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinListExtensions.CppLowerBound``3(``0,``1,``2)">
      <summary>
        C++ Style lower bound binary search for sorted (provided comparer) collections:
        O log(n) complexity search of first entry that does not compare less than value (Returns Count if non found)
      </summary>
      <typeparam name="TList"></typeparam>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TComp"></typeparam>
      <param name="list"></param>
      <param name="value"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinListExtensions.CppLowerBound``2(``0,``1)">
      <summary>
        C++ Style lower bound binary search for sorted (default comparer) collections:
        O log(n) complexity search of first entry that does not compare less than value (Returns Count if non found)
      </summary>
      <typeparam name="TList"></typeparam>
      <typeparam name="TValue"></typeparam>
      <param name="list"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinListExtensions.CppUpperBound``3(``0,``1,``2)">
      <summary>
        C++ Style upper bound binary search for sorted (provided comparer) collections:
        O log(n) complexity search of first entry that does not compare less than value (Returns Count if non found)
      </summary>
      <typeparam name="TList"></typeparam>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TComp"></typeparam>
      <param name="list"></param>
      <param name="value"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinListExtensions.CppUpperBound``2(``0,``1)">
      <summary>
        C++ Style upper bound binary search for sorted (default comparer) collections:
        O log(n) complexity search of first entry that does compare greater than value (Returns Count if non found)
      </summary>
      <typeparam name="TList"></typeparam>
      <typeparam name="TValue"></typeparam>
      <param name="list"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinListExtensions.CppEnclosingBounds``3(``0,``1,``2)">
      <summary>
        C++ style lower and upper bound binary range search for sorted (provided comparer) collections:
        2* O log(n) search for first entry not lesser and first entry greater than value (Returns Count for non existing
        indexes)
      </summary>
      <typeparam name="TList"></typeparam>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TComp"></typeparam>
      <param name="list"></param>
      <param name="value"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinListExtensions.CppEnclosingBounds``2(``0,``1)">
      <summary>
        C++ style lower and upper bound binary range search for sorted (default comparer) collections:
        2* O log(n) search for first entry not lesser and first entry greater than value (Returns Count if non are found)
      </summary>
      <typeparam name="TList"></typeparam>
      <typeparam name="TValue"></typeparam>
      <param name="list"></param>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.ToMultisetList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Creates a new sorted multiset list from an IEnumerable interface with the default comparer of that type
      </summary>
      <typeparam name="TValue"></typeparam>
      <param name="enumerable"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.ToMultisetList``2(System.Collections.Generic.IEnumerable{``0},``1)">
      <summary>
        Creates a new sorted multiset list from an IEnumerable interface with the provided comparer
      </summary>
      <typeparam name="TValue"></typeparam>
      <typeparam name="TComp"></typeparam>
      <param name="enumerable"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.ToSetList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Creates a new sorted duplicate free set list from IEnumerable interface and default comparer of type T1
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="enumerable"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.ToSetList``2(System.Collections.Generic.IEnumerable{``1},``0)">
      <summary>
        Creates a new sorted duplicate free set list from IEnumerable interface and the provided comparer of that type
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="TComp"></typeparam>
      <param name="enumerable"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.ReplaceFirstOrAdd``1(System.Collections.Generic.IList{``0},System.Predicate{``0},``0)">
      <summary>
        Replaces the first element matching the predicate and returns the index, if non is found list.Add()
        is called and the new last index is returned
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="list"></param>
      <param name="predicate"></param>
      <param name="item"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
      <summary>
        RemoveAll implementation of the default list for the list interface that removes all items that compare to true in
        the defined predicate
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="list"></param>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.GetSequenceEqualityDirectionTo``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
        Gets the sequence equality direction for list one to the second. Returns 1 for positive or -1 for inverted
        direction. Retruns 0 if sequences are not equal in
        either direction
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="lhs"></param>
      <param name="rhs"></param>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.RemoveDuplicatesAndGetRemovedIndices``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
        Removes all duplicates from a list based upon the provided equality comparer and returns removed indices
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="list"></param>
      <param name="comparer"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.RemoveDuplicatesAndGetRemovedIndices``1(System.Collections.Generic.IList{``0},System.Func{``0,``0,System.Boolean})">
      <summary>
        Removes all duplicates from a list based upon the provided equality compare function and returns removed indices
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="list"></param>
      <param name="compareFunc"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.RemoveDuplicates``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
        Removes the duplicates from a list based upon the passed equality comparer
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="list"></param>
      <param name="comparer"></param>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinListExtensions.Populate``2(``0,``1,System.Int32)">
      <summary>
        Populates a generic list with a default value
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="TList"></typeparam>
      <param name="values"></param>
      <param name="value"></param>
      <param name="counts"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.Populate``2(``0,System.Func{``1},System.Int32)">
      <summary>
        Populates a generic list from a provider function to the specified size
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="TList"></typeparam>
      <param name="list"></param>
      <param name="provider"></param>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.Shuffle``1(System.Collections.Generic.IList{``0},System.Random,System.Int32)">
      <summary>
        Shuffles the entries of a list multiple times using the provided random number generator
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="list"></param>
      <param name="random"></param>
      <param name="count"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
      <summary>
        Swap the values at the provided indices within a list
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="list"></param>
      <param name="lhs"></param>
      <param name="rhs"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.SelectByIndexing``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        Selects entries from an index-able list interface in the order of a passed indexing
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="list"></param>
      <param name="indices"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinListExtensions.SelectByIndexing``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
        Selects entries from an index-able list interface in the order of a passed indexing
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="list"></param>
      <param name="indices"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinComparerExtensions">
      <summary>
        Contains extensions methods for comparer objects and IComparer interfaces
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinComparerExtensions.ToEqualityComparer``1(System.Collections.Generic.IComparer{``0})">
      <summary>
        Wraps an IComparer interface into a delegate based equality comparer using the (first.CompareTo(second) == 0)
        formalism
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="comparer"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinConvertExtensions">
      <summary>
        Provides base type value conversions as extension methods for types implementing IConvertible (Only compatible with
        primitive types)
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinConvertExtensions.ToPrimitive``1(System.String)">
      <summary>
        Converts a string to a primitive type using invariant culture format provider (Throws if type is not primitive)
      </summary>
      <typeparam name="TTarget"></typeparam>
      <param name="literal"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinConvertExtensions.ToPrimitive``1(System.String,System.IFormatProvider)">
      <summary>
        Converts a string to a primitive type using the provided format provider (Throws if type is not primitive)
      </summary>
      <typeparam name="TTarget"></typeparam>
      <param name="literal"></param>
      <param name="provider"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinConvertExtensions.ToPrimitive``2(``0)">
      <summary>
        Converts a primitive type to another primitive type using the invariant culture format provider (Throws if type is
        not primitive)
      </summary>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TTarget"></typeparam>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinConvertExtensions.ToPrimitive``2(``0,System.IFormatProvider)">
      <summary>
        Converts a primitive type to another primitive type using the provided format provider (Throws if type is not
        primitive)
      </summary>
      <typeparam name="TSource"></typeparam>
      <typeparam name="TTarget"></typeparam>
      <param name="value"></param>
      <param name="provider"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinConvertExtensions.ToPrimitiveArray``1(System.String[])">
      <summary>
        Converts array of strings to a primitive type using the culture invariant format provider (Throws if type is not
        primitive)
      </summary>
      <typeparam name="TTarget"></typeparam>
      <param name="literals"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Extensions.MocassinConvertExtensions.PrimitiveToString``1(``0)">
      <summary>
        Converts a primitive type to a string using the culture invariant format provider (Throws if type is not primitive)
      </summary>
      <typeparam name="TSource"></typeparam>
      <param name="value"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinConvertExtensions.PrimitiveToString``1(``0,System.IFormatProvider)">
      <summary>
        Converts a primitive type to a string using the provided format provider (Throws if type is not primitive)
      </summary>
      <typeparam name="TSource"></typeparam>
      <param name="value"></param>
      <param name="formatProvider"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinStringBuilderExtensions">
      <summary>
        ICon string builder extension class that provides specific enumerator converters for compatibility with the C++
        XMLNode
        implementation
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStringBuilderExtensions.AppendCommaSeparatedValueList``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Appends a comma separated value list to the builder based upon an enumerator and the ToString() method
      </summary>
      <typeparam name="TValue"></typeparam>
      <param name="builder"></param>
      <param name="enumerator"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStringBuilderExtensions.AppendSeparatedToString``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.Char)">
      <summary>
        Appends multiple values by ToString call and a separator
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="builder"></param>
      <param name="values"></param>
      <param name="separator"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStringBuilderExtensions.BuildCommaSeparatedValueString``1(System.Text.StringBuilder,``0[])">
      <summary>
        Creates comma separated value string from parameter list
      </summary>
      <typeparam name="TValue"></typeparam>
      <param name="builder"></param>
      <param name="values"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStringBuilderExtensions.AppendSeparated(System.Text.StringBuilder,System.Char,System.Collections.Generic.IEnumerable{System.IConvertible})">
      <summary>
        Appends a set of convertibles as comma separated invariant strings
      </summary>
      <param name="builder"></param>
      <param name="separator"></param>
      <param name="convertibles"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStringBuilderExtensions.RemoveConsecutiveNewLines(System.Text.StringBuilder)">
      <summary>
        Removes all consecutive line break duplicates
      </summary>
      <param name="builder"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStringBuilderExtensions.PopBack(System.Text.StringBuilder,System.Int32)">
      <summary>
        Removes the specified number of characters from the end of the current builder content
      </summary>
      <param name="builder"></param>
      <param name="count"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStringBuilderExtensions.PopBack(System.Text.StringBuilder,System.Int32,System.String)">
      <summary>
        Removes the specified number of characters from the end of the builder content and replaces them with a new end
        string
      </summary>
      <param name="builder"></param>
      <param name="count"></param>
      <param name="newEnd"></param>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinStringExtensions">
      <summary>
        ICon extension class for strings
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStringExtensions.TrySplitToSpecificSubstringCount(System.String,System.Int32,System.Char,System.String[]@)">
      <summary>
        Splits a string by the given delimiter and sets the result if the specified entry count is matched
      </summary>
      <param name="literal"></param>
      <param name="entryCount"></param>
      <param name="delimiter"></param>
      <param name="result"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStringExtensions.ParseToValueList``1(System.String,System.Func{System.String,``0},System.Char)">
      <summary>
        Parse a character separated string into the actual values using the provided converter delegate.
      </summary>
      <typeparam name="T"></typeparam>
      <param name="separated"></param>
      <param name="converter"></param>
      <param name="separator"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinStructExtensions">
      <summary>
        ICon shared struct extensions that provide generic extension methods specifically fro struct types
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStructExtensions.CountMatches``1(``0,System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>
        Counts how many of the passed parameter values compare equal to the reference value
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="value"></param>
      <param name="comparer"></param>
      <param name="testValues"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinStructExtensions.CountMatches``1(``0,System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Counts how many values compare equal to the reference value
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="value"></param>
      <param name="comparer"></param>
      <param name="values"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinObservableExtensions">
      <summary>
        Defines extension methods for the IObservable interface of the reactive extensions
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinObservableExtensions.Spy``1(System.IObservable{``0},System.Action{``0})">
      <summary>
        Creates an intercepted observable that spies upon pushed values to subscribers before sending it to the actual
        subscriber (Does not manipulate pushed data)
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="source"></param>
      <param name="spyNext"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinObservableExtensions.Spy``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception})">
      <summary>
        Creates an intercepted observable that spies upon pushed values to subscribers before sending it to the actual
        subscriber (Does not manipulate pushed data)
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="source"></param>
      <param name="spyNext"></param>
      <param name="spyError"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinObservableExtensions.Spy``1(System.IObservable{``0},System.Action{``0},System.Action{System.Exception},System.Action)">
      <summary>
        Creates an intercepted observable that spies upon pushed values to subscribers before sending it to the actual
        subscriber (Does not manipulate pushed data)
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="source"></param>
      <param name="spyNext"></param>
      <param name="spyError"></param>
      <param name="spyCompleted"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinObservableExtensions.Spy``1(System.IObservable{``0},System.IObserver{``0})">
      <summary>
        Creates an intercepted observable that spies upon pushed values to subscribers before sending it to the actual
        subscriber (Does not manipulate pushed data)
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="source"></param>
      <param name="observer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinObservableExtensions.Forge``1(System.IObservable{``0},System.Func{``0,``0})">
      <summary>
        Creates an intercepted observable that manipulates pushed values to subscribers before sending it to the actual
        subscriber
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="source"></param>
      <param name="forger"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinObservableExtensions.Forge``1(System.IObservable{``0},System.Func{``0,``0},System.Func{System.Exception,System.Exception})">
      <summary>
        Creates an intercepted observable that manipulates pushed values to subscribers before sending it to the actual
        subscriber
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="source"></param>
      <param name="forger"></param>
      <param name="exceptionForger"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinObservableExtensions.AllowIf``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
        Creates an intercepted observable that filters pushed values to subscribers and sends only values that are
        evaluated to true by a filter function
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="source"></param>
      <param name="passCondition"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinObservableExtensions.BlockIf``1(System.IObservable{``0},System.Func{``0,System.Boolean})">
      <summary>
        Creates an intercepted observable that filters pushed values to subscribers and blocks all values that
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="source"></param>
      <param name="blockCondition"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Extensions.MocassinTaskingExtensions">
      <summary>
        Contains ICon extension methods for threading and tasking
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinTaskingExtensions.RunMany``1(System.Collections.Generic.IEnumerable{System.Func{``0}})">
      <summary>
        Starts many tasks on the task pool and returns an array of the task objects
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="runActions"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Extensions.MocassinTaskingExtensions.RunAndGetResults``1(System.Collections.Generic.IEnumerable{System.Func{``0}})">
      <summary>
        Starts multiple tasks on the task pool, await all results and returns the results in order
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="runActions"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Messaging.ErrorMessage">
      <summary>
        Exception message class that carries error information including the thrown exceptions (Only to be used when
        program errors occure)
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.ErrorMessage.Exception">
      <summary>
        The caught exception
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.ErrorMessage.DetailSequence">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.ErrorMessage.#ctor(System.Object,System.String)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.ErrorMessage.EnumerateException">
      <summary>
        Enumerates the contents of the set <see cref="P:Mocassin.Framework.Messaging.ErrorMessage.Exception" /> into a sequence of
        <see cref="T:System.String" /> values
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Messaging.InfoMessage">
      <summary>
        Information message class that carries information massages or warnings from the framework or model libraries (non
        critical messages)
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.InfoMessage.Details">
      <summary>
        Contains additional information and explanations
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.InfoMessage.DetailSequence">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.InfoMessage.#ctor(System.Object,System.String)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Messaging.PushMessage">
      <summary>
        Abstract push notification message base class for all messages within ICon that are designed to be distributed and
        handled through the callback messaging system
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.PushMessage.Sender">
      <summary>
        The instance that the operation message was send from
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.PushMessage.DetailSequence">
      <summary>
        Get an <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of <see cref="T:System.String" />
        that describe details fo the message
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.PushMessage.IndentedDetailsJson">
      <summary>
        Get an indented JSON representation of the message details
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.PushMessage.DetailsJson">
      <summary>
        Get an default JSON representation of the message details
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.PushMessage.ShortInfo">
      <summary>
        Basic short message describing the contents of the model message
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.PushMessage.TimeStamp">
      <summary>
        Get the <see cref="T:System.DateTime" /> when the message was created
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Messaging.PushMessage.#ctor(System.Object,System.String)">
      <summary>
        Creates a new operation message with the minimal information
      </summary>
      <param name="sender"></param>
      <param name="shortInfo"></param>
    </member>
    <member name="M:Mocassin.Framework.Messaging.PushMessage.ToString">
      <summary>
        Creates a single string from all the message contents
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Messaging.PushMessage.DetailsToJson(Newtonsoft.Json.Formatting)">
      <summary>
        Converts the message details to a JSON string
      </summary>
      <param name="formatting"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Messaging.WarningMessage">
      <summary>
        ICon validation message class that is used for all user input validation messages (informing about good or bad user
        input)
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.WarningMessage.IsCritical">
      <summary>
        Flag that indicates if the warning is critical
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.WarningMessage.Details">
      <summary>
        Contains additional information and explanations why the warning occured
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.WarningMessage.DetailSequence">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.WarningMessage.#ctor(System.Object,System.String)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.WarningMessage.AddDetails(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
        Add a sequence of strings as details to the warning
      </summary>
      <param name="details"></param>
    </member>
    <member name="M:Mocassin.Framework.Messaging.WarningMessage.AddDetails(System.String[])">
      <summary>
        Add an arbitrary number of strings as details to the warning
      </summary>
      <param name="details"></param>
    </member>
    <member name="M:Mocassin.Framework.Messaging.WarningMessage.CreateCritical(System.Object,System.String)">
      <summary>
        Creates a new warning message that is directly marked with the critical flag
      </summary>
      <param name="sender"></param>
      <param name="shortInfo"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Messaging.AsyncMessageSystem">
      <summary>
        Asynchronous reactive push messaging system to distribute messages through subscriptions to IObservables
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.SendInfoMessageEvent">
      <summary>
        The <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for
        <see cref="T:Mocassin.Framework.Messaging.InfoMessage" /> notifications
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.SendErrorMessageEvent">
      <summary>
        The <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for
        <see cref="T:Mocassin.Framework.Messaging.ErrorMessage" /> notifications
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.SendWarningMessageEvent">
      <summary>
        The <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for
        <see cref="T:Mocassin.Framework.Messaging.WarningMessage" /> notifications
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.SendPushMessageEvent">
      <summary>
        The <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for
        <see cref="T:Mocassin.Framework.Messaging.PushMessage" /> notifications
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.InfoMessageNotification">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.WarningMessageNotification">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.ErrorMessageNotification">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.AnyMessageNotification">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.ConsoleSubscriptionActive">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncMessageSystem.ConsoleSubscription">
      <summary>
        Stores the console subscription disposable
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.#ctor">
      <summary>
        Creates new async message system for push notifications
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.SendMessage(Mocassin.Framework.Messaging.InfoMessage)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.SendMessage(Mocassin.Framework.Messaging.ErrorMessage)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.SendMessage(Mocassin.Framework.Messaging.WarningMessage)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.DumpMessageToConsole(Mocassin.Framework.Messaging.PushMessage)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.SubscribeConsoleDisplay">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.UnsubscribeConsoleDisplay">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.OnInfoMessageReceived(Mocassin.Framework.Messaging.InfoMessage)">
      <summary>
        Creates a new task that sends the information message to all subscribers
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.OnWarningMessageReceived(Mocassin.Framework.Messaging.WarningMessage)">
      <summary>
        Creates a new task that sends the warning message to all subscribers
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.OnErrorMessageReceived(Mocassin.Framework.Messaging.ErrorMessage)">
      <summary>
        Creates a new task that sends the error message to all subscribers
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.OnMessageReceived(Mocassin.Framework.Messaging.PushMessage)">
      <summary>
        Creates a new task that sends the message to all subscribers
      </summary>
      <param name="message"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncMessageSystem.MessageToString(Mocassin.Framework.Messaging.PushMessage)">
      <summary>
        Creates a display string from a message event that contains the sender information
      </summary>
      <param name="message"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Messaging.IPushMessageSystem">
      <summary>
        Interface for all push message systems that distribute messages through observable subscriptions (Can be Sync or
        Async)
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.IPushMessageSystem.ErrorMessageNotification">
      <summary>
        Observable for error message subscriptions
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.IPushMessageSystem.InfoMessageNotification">
      <summary>
        Observable for info message subscriptions
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.IPushMessageSystem.WarningMessageNotification">
      <summary>
        Observable for warning message subscriptions
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.IPushMessageSystem.AnyMessageNotification">
      <summary>
        Observable for subscriptions to all messages
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.IPushMessageSystem.ConsoleSubscriptionActive">
      <summary>
        Flag if the console output is subscribed to the messages
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.IPushMessageSystem.SendMessage(Mocassin.Framework.Messaging.ErrorMessage)">
      <summary>
        Sends an error message to all subscribers of error messages
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.IPushMessageSystem.SendMessage(Mocassin.Framework.Messaging.InfoMessage)">
      <summary>
        Send an info message to all subscribers of info messages
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.IPushMessageSystem.SendMessage(Mocassin.Framework.Messaging.WarningMessage)">
      <summary>
        Send a warning message to all subscribers of warning messages
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.IPushMessageSystem.DumpMessageToConsole(Mocassin.Framework.Messaging.PushMessage)">
      <summary>
        Function that dumps a push message to the console
      </summary>
      <param name="message"></param>
    </member>
    <member name="M:Mocassin.Framework.Messaging.IPushMessageSystem.SubscribeConsoleDisplay">
      <summary>
        Subscribes the console dumb of the messages if not already subscribed
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Messaging.IPushMessageSystem.UnsubscribeConsoleDisplay">
      <summary>
        Cancels the console dumb subscription if present
      </summary>
    </member>
    <member name="T:Mocassin.Framework.Messaging.MessageSystem">
      <summary>
        Synchronous reactive push messaging system to distribute messages through subscriptions to IObservables
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.SendInfoMessageEvent">
      <summary>
        The <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for
        <see cref="T:Mocassin.Framework.Messaging.InfoMessage" /> notifications
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.SendErrorMessageEvent">
      <summary>
        The <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for
        <see cref="T:Mocassin.Framework.Messaging.ErrorMessage" /> notifications
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.SendWarningMessageEvent">
      <summary>
        The <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for
        <see cref="T:Mocassin.Framework.Messaging.WarningMessage" /> notifications
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.SendPushMessageEvent">
      <summary>
        The <see cref="T:Mocassin.Framework.Events.ReactiveEvent`1" /> for
        <see cref="T:Mocassin.Framework.Messaging.PushMessage" /> notifications
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.InfoMessageNotification">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.WarningMessageNotification">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.ErrorMessageNotification">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.AnyMessageNotification">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.ConsoleSubscriptionActive">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.ConsoleSubscription">
      <summary>
        Stores the console subscription disposable
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.MessageSystem.AwaitCompletion">
      <summary>
        Counts how many messages are currently send and await completion
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Messaging.MessageSystem.#ctor">
      <summary>
        Creates new sync message system for push notifications
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Messaging.MessageSystem.SendMessage(Mocassin.Framework.Messaging.InfoMessage)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.MessageSystem.SendMessage(Mocassin.Framework.Messaging.ErrorMessage)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.MessageSystem.SendMessage(Mocassin.Framework.Messaging.WarningMessage)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.MessageSystem.DumpMessageToConsole(Mocassin.Framework.Messaging.PushMessage)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.MessageSystem.SubscribeConsoleDisplay">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.MessageSystem.UnsubscribeConsoleDisplay">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Messaging.MessageSystem.SendMessage(Mocassin.Framework.Messaging.PushMessage)">
      <summary>
        Takes arbitrary operation message and distributes the message to all registered observers
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.MessageSystem.OnInfoMessageReceived(Mocassin.Framework.Messaging.InfoMessage)">
      <summary>
        Invokes the subscription handlers on all info message subscribers
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.MessageSystem.OnWarningMessageReceived(Mocassin.Framework.Messaging.WarningMessage)">
      <summary>
        Invokes the subscription handlers on all warning message subscribers
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.MessageSystem.OnErrorMessageReceived(Mocassin.Framework.Messaging.ErrorMessage)">
      <summary>
        Invokes the subscription handlers on all error message subscribers
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.MessageSystem.OnMessageReceived(Mocassin.Framework.Messaging.PushMessage)">
      <summary>
        Invokes the subscription handlers on all arbitrary message subscribers
      </summary>
      <param name="message"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.MessageSystem.MessageToString(Mocassin.Framework.Messaging.PushMessage)">
      <summary>
        Creates a display string from a message event that contains the sender information
      </summary>
      <param name="message"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Messaging.MessageSystem.PrepareSending">
      <summary>
        Locks the sender lock and counts the number of uncompleted senders up
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Messaging.MessageSystem.FinishSending">
      <summary>
        Locks the sender object and counts the number of unfinished messages down and notifies awaiters of completion
      </summary>
    </member>
    <member name="T:Mocassin.Framework.Messaging.AsyncReportSystem">
      <summary>
        Async reporting system to distribute reports to subscribers from a running operation thread
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncReportSystem.ConsoleSubscription">
      <summary>
        Disposable for the activation of operation report console dumps
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncReportSystem.OnOperationReports">
      <summary>
        Reactive event provider for operation report distribution and subscription
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncReportSystem.OnValidationReports">
      <summary>
        Reactive event provider for validation report distribution and subscription
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncReportSystem.OnConflictReports">
      <summary>
        Reactive event provider for conflict report distribution and subscription
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncReportSystem.WhenOperationReportSend">
      <summary>
        Observable for subscriptions to push based notifications await new operation reports
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncReportSystem.WhenValidationReportSend">
      <summary>
        Observable for subscriptions to push based notifications await new validation reports
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Messaging.AsyncReportSystem.WhenConflictReportSend">
      <summary>
        Observable for subscriptions to push based notifications await new conflict reports
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Messaging.AsyncReportSystem.Send(Mocassin.Framework.Operations.IOperationReport)">
      <summary>
        Sends an operation report in a new thread to all subscribers
      </summary>
      <param name="report"></param>
    </member>
    <member name="T:Mocassin.Framework.Operations.IConflictReport">
      <summary>
        Represents an information object on data conflict occurence and potential resolving actions by a data conflict
        resolver
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Operations.IConflictReport.GetWarnings">
      <summary>
        Get the warning sequence
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Operations.IConflictReport.Merge(Mocassin.Framework.Operations.IConflictReport)">
      <summary>
        Merges the data from the other conflict report into this one
      </summary>
      <param name="other"></param>
    </member>
    <member name="T:Mocassin.Framework.Operations.IOperationReport">
      <summary>
        Represents an information object about success or failure of a model change attempt by an outside source
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IOperationReport.IsError">
      <summary>
        Flag that indicates if a program error occured during the change attempt
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IOperationReport.HasValidationError">
      <summary>
        Boolean flag that indicates if the report contains a validation failure
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IOperationReport.HasUnsolvedConflict">
      <summary>
        Boolean flag that indicates if the report has relevant conflict handling information
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IOperationReport.IsBusySignal">
      <summary>
        Flag that indicates that the project returned a busy signal because an input operation is already in progress
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IOperationReport.OperationDescription">
      <summary>
        String that represents a short description of the operation
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IOperationReport.Exceptions">
      <summary>
        Contains potentially occured exception
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IOperationReport.ValidationReport">
      <summary>
        Access to the validation information produced during the model change attempt
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IOperationReport.ConflictReport">
      <summary>
        Access to the resolver report if an operation called the conflict resolver
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IOperationReport.TimeStamp">
      <summary>
        Get the <see cref="T:System.DateTime" /> when the report was created
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Operations.IOperationReport.AddException(System.Exception)">
      <summary>
        Adds an exception to the operation report
      </summary>
      <param name="exception"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Operations.IOperationReport.Merge(Mocassin.Framework.Operations.IOperationReport)">
      <summary>
        Collects all information from the passed operation report and merges the data into this report
      </summary>
      <param name="other"></param>
    </member>
    <member name="T:Mocassin.Framework.Operations.IReport">
      <summary>
        Represents a report about a subject that could fail or be a success an contains information
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.IReport.IsGood">
      <summary>
        Flag that indicates if the report was created due to success or failure
      </summary>
    </member>
    <member name="T:Mocassin.Framework.Operations.IValidationReport">
      <summary>
        Represents an information object about success or failure of a model data validation
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Operations.IValidationReport.GetWarnings">
      <summary>
        Get all stored warnings messages
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Operations.IValidationReport.Merge(Mocassin.Framework.Operations.IValidationReport)">
      <summary>
        Merges the data from another validation report into this one
      </summary>
      <param name="other"></param>
    </member>
    <member name="T:Mocassin.Framework.Operations.ConflictReport">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.ConflictReport.IsGood">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.ConflictReport.Warnings">
      <summary>
        List of contained warnings
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.ConflictReport.InnerReports">
      <summary>
        List of inner reports in cases where resolving or updating has triggered other resolvers or update actions
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Operations.ConflictReport.#ctor">
      <summary>
        Creates new conflict resolver report with empty warning list
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Operations.ConflictReport.GetWarnings">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Operations.ConflictReport.Merge(Mocassin.Framework.Operations.IConflictReport)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Operations.ConflictReport.AddWarning(Mocassin.Framework.Messaging.WarningMessage)">
      <summary>
        Adds a new warning message to the report. Automatically un-sets the good flag if the warning is critical
      </summary>
      <param name="message"></param>
    </member>
    <member name="M:Mocassin.Framework.Operations.ConflictReport.CreateNoResolveRequiredReport(System.Object)">
      <summary>
        Creates the default report for cases that cannot be automatically resolved because no resolver exists
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Operations.ConflictReport.ToString">
      <summary>
        Returns json string of the object
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Operations.OperationReport">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.OperationDescription">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.IsGood">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.IsError">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.HasValidationError">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.HasUnsolvedConflict">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.IsCacheExpired">
      <summary>
        Flag that indicates if the operation has caused on demand data to expire
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.IsBusySignal">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.Exceptions">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.ValidationReport">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.ConflictReport">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.OperationReport.TimeStamp">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Operations.OperationReport.#ctor">
      <summary>
        Creates new unnamed operation result that is by default a success until set otherwise
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Operations.OperationReport.#ctor(System.String)">
      <summary>
        Creates new shortly described operation result that is a success by default
      </summary>
      <param name="description"></param>
    </member>
    <member name="M:Mocassin.Framework.Operations.OperationReport.AddException(System.Exception)">
      <summary>
        Adds an exception and updates the affiliated flags
      </summary>
      <param name="exception"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Operations.OperationReport.Merge(Mocassin.Framework.Operations.IOperationReport)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Operations.OperationReport.SetValidationReport(Mocassin.Framework.Operations.IValidationReport)">
      <summary>
        Sets the validation result and updates the affiliated flags
      </summary>
      <param name="report"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Operations.OperationReport.SetConflictReport(Mocassin.Framework.Operations.IConflictReport)">
      <summary>
        Sets the conflict resolver report and updates affiliated flags if required
      </summary>
      <param name="report"></param>
    </member>
    <member name="M:Mocassin.Framework.Operations.OperationReport.AsBusySignal">
      <summary>
        Marks the operation result as a busy signal without changing already existing content
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Operations.OperationReport.MakeUnexpectedTypeResult(System.Type,System.Type[])">
      <summary>
        Creates a new model operation result that represents an input argument failure due to unexpected type
      </summary>
      <param name="unexpectedType"></param>
      <param name="expectedTypes"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Operations.OperationReport.MakeObjectBuildErrorReport(System.String,System.String)">
      <summary>
        Creates a new <see cref="T:Mocassin.Framework.Operations.OperationReport" /> for model build errors
      </summary>
      <param name="description"></param>
      <param name="message"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Operations.OperationReport.ToString">
      <summary>
        Returns json string of the object
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Operations.ValidationReport">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.ValidationReport.IsGood">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Operations.ValidationReport.Warnings">
      <summary>
        List of warning messages produces during the validation
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Operations.ValidationReport.#ctor">
      <summary>
        Creates a new validation result that is by default a success
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Operations.ValidationReport.#ctor(Mocassin.Framework.Operations.IValidationReport)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Operations.ValidationReport.GetWarnings">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Operations.ValidationReport.Merge(Mocassin.Framework.Operations.IValidationReport)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Operations.ValidationReport.AddWarning(Mocassin.Framework.Messaging.WarningMessage)">
      <summary>
        Adds a warning message and sets validation to failed if the warning is critical
      </summary>
      <param name="message"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Operations.ValidationReport.AddWarnings(System.Collections.Generic.IEnumerable{Mocassin.Framework.Messaging.WarningMessage})">
      <summary>
        Address multiple warnings messages and sets validation to failed if one is critical
      </summary>
      <param name="messages"></param>
    </member>
    <member name="M:Mocassin.Framework.Operations.ValidationReport.ToString">
      <summary>
        Returns json string of the object
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Processing.AsyncBreakPipeline`1">
      <summary>
        Async version of the break pipeline that processes an object with the first accepting handler and returns a new
        task processing the object
      </summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member
      name="M:Mocassin.Framework.Processing.AsyncBreakPipeline`1.#ctor(Mocassin.Framework.Processing.IObjectProcessor{System.Threading.Tasks.Task{`0}})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Processing.AsyncBreakPipeline`1.#ctor(Mocassin.Framework.Processing.IObjectProcessor{System.Threading.Tasks.Task{`0}},System.Collections.Generic.List{Mocassin.Framework.Processing.IObjectProcessor{System.Threading.Tasks.Task{`0}}})">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Processing.AsyncBreakPipeline`1.#ctor(Mocassin.Framework.Processing.IObjectProcessor{System.Threading.Tasks.Task{`0}},System.Collections.Generic.IEnumerable{Mocassin.Framework.Processing.IAsyncObjectProcessor{`0}})">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Processing.BreakPipeline`1">
      <summary>
        Abstract generic processing pipeline that supplies a set of handlers and walks through pipeline until a handler
        accepts the object
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Processing.BreakPipeline`1.Handlers">
      <summary>
        The list of known processing handlers in order of execution
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Processing.BreakPipeline`1.OnCannotProcess">
      <summary>
        Handler that is called if the processing of the object fails
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Processing.BreakPipeline`1.#ctor(Mocassin.Framework.Processing.IObjectProcessor{`0})">
      <summary>
        Creates new break pipeline with respecified handler for processing failure
      </summary>
      <param name="onCannotProcess"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Processing.BreakPipeline`1.#ctor(Mocassin.Framework.Processing.IObjectProcessor{`0},System.Collections.Generic.List{Mocassin.Framework.Processing.IObjectProcessor{`0}})">
      <summary>
        Creates new break pipeline with handler list and handler for processing failure
      </summary>
      <param name="handlers"></param>
      <param name="onCannotProcess"></param>
    </member>
    <member name="M:Mocassin.Framework.Processing.BreakPipeline`1.CanProcess(System.Object,System.Object[])">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Processing.BreakPipeline`1.Process(System.Object,System.Object[])">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Processing.IAsyncObjectProcessor`1">
      <summary>
        Represents a handler for objects that processes passed values in a new task and returns the processing task if the
        object could be processed
      </summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="T:Mocassin.Framework.Processing.IObjectProcessor`1">
      <summary>
        Represents an handler for objects that processes passed values and returns the result if the object could be
        processed
      </summary>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="M:Mocassin.Framework.Processing.IObjectProcessor`1.CanProcess(System.Object,System.Object[])">
      <summary>
        Checks if the handler can process the provided set of objects
      </summary>
      <param name="obj"></param>
      <param name="args"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Processing.IObjectProcessor`1.Process(System.Object,System.Object[])">
      <summary>
        Handles the passed set of objects, behavior on failure is specified by the implementation
      </summary>
      <param name="obj"></param>
      <param name="args"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Processing.AsyncObjectProcessor`2">
      <summary>
        Generic async object handler class that handles one argument of specific type in a new task (Cannot be used for
        tuple types!)
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member
      name="M:Mocassin.Framework.Processing.AsyncObjectProcessor`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Processing.AsyncObjectProcessor`2.#ctor(System.Func{`0,`1})">
      <summary>
        Creates new one argument async object handler from sync delegate
      </summary>
      <param name="syncHandler"></param>
    </member>
    <member name="T:Mocassin.Framework.Processing.AsyncObjectProcessor`3">
      <summary>
        Generic async object handler class that handles two arguments of specific type in a new task (Cannot be used for
        tuple types!)
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member
      name="M:Mocassin.Framework.Processing.AsyncObjectProcessor`3.#ctor(System.Func{`0,`1,System.Threading.Tasks.Task{`2}})">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Processing.AsyncObjectProcessor`3.#ctor(System.Func{`0,`1,`2})">
      <summary>
        Creates new two argument async object handler from sync delegate
      </summary>
      <param name="syncHandler"></param>
    </member>
    <member name="T:Mocassin.Framework.Processing.ObjectProcessor`2">
      <summary>
        Generic object handler class for functions that accept one argument (Do not use for tuple systems!)
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Processing.ObjectProcessor`2.ProcessDelegate">
      <summary>
        Delegate for handling a passed object
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessor`2.#cctor">
      <summary>
        Static constructor that checks if the type argument of the handler is of type value tuple or tuple
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessor`2.#ctor(System.Func{`0,`1})">
      <summary>
        Creates new object handler from a processing delegate
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessor`2.CanProcess(System.Object,System.Object[])">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessor`2.Process(System.Object,System.Object[])">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Processing.ObjectProcessor`3">
      <summary>
        Generic object handler class that handles an argument of specific tuple type and returns a handling result (Wraps
        internally into tuples of objects)
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Processing.ObjectProcessor`3.ProcessDelegate">
      <summary>
        Delegate for handling passed objects
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessor`3.#ctor(System.Func{`0,`1,`2})">
      <summary>
        Creates new object handler from a processing delegate
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessor`3.CanProcess(System.Object,System.Object[])">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessor`3.Process(System.Object,System.Object[])">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Processing.ObjectProcessorFactory">
      <summary>
        Factory that provides functions to create object handlers both sync and async
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessorFactory.Create``2(System.Func{``0,``1})">
      <summary>
        Creates new object handler from the provided delegate
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="TResult"></typeparam>
      <param name="handler"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessorFactory.CreateAsync``2(System.Func{``0,``1})">
      <summary>
        Creates new async object handler from the provided delegate
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="TResult"></typeparam>
      <param name="handler"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessorFactory.Create``3(System.Func{``0,``1,``2})">
      <summary>
        Creates new object handler for two value tuple from the provided delegate
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
      <param name="handler"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessorFactory.CreateAsync``3(System.Func{``0,``1,``2})">
      <summary>
        Creates new async object handler for two value tuple from the provided delegate
      </summary>
      <typeparam name="T1"></typeparam>
      <typeparam name="T2"></typeparam>
      <typeparam name="TResult"></typeparam>
      <param name="handler"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessorFactory.AnyIsTuple(System.Type[])">
      <summary>
        Checks a series of types for being of generic tuple or value tuple type (Does not check the base class in the
        tuple case!)
      </summary>
      <param name="types"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessorFactory.GetGenericTupleTypes">
      <summary>
        Returns full array of existing generic tuple types
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Processing.ObjectProcessorFactory.GetGenericValueTupleTypes">
      <summary>
        Returns full array of existing generic value tuple types
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Provider.ExternalLoadInfo">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Provider.ExternalLoadInfo.IsUndefined">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Provider.ExternalLoadInfo.AssemblyPath">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Provider.ExternalLoadInfo.FullClassName">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Provider.ExternalLoadInfo.MethodName">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Provider.ExternalLoadInfo.#ctor">
      <summary>
        Default construct an empty load info
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Provider.ExternalLoadInfo.#ctor(Mocassin.Framework.Provider.IExternalLoadInfo)">
      <summary>
        Construct load information from an load information interface
      </summary>
      <param name="loadInfo"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Provider.ExternalLoadInfo.IsValidProviderFor(System.Type,System.Type,System.Exception@)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Provider.ExternalLoadInfo.ToString">
      <summary>
        Returns a string representing the load information
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Provider.IExternalLoadInfo">
      <summary>
        Represents a load information for externally defined data provider functions
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Provider.IExternalLoadInfo.IsUndefined">
      <summary>
        Boolean flag that indicates if the load info is undefined and can be ignored
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Provider.IExternalLoadInfo.AssemblyPath">
      <summary>
        The path of the assembly that should be loaded
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Provider.IExternalLoadInfo.FullClassName">
      <summary>
        The full name of the class the function is defined in
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Provider.IExternalLoadInfo.MethodName">
      <summary>
        The name of the method used for data provision
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Provider.IExternalLoadInfo.IsValidProviderFor(System.Type,System.Type,System.Exception@)">
      <summary>
        Check if the load info actually describes a valid method with the described input type and output type. Provides
        caught exceptions
        if the method returns false
      </summary>
      <param name="inputType"></param>
      <param name="outputType"></param>
      <param name="exception"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Provider.ExternalProvider`2">
      <summary>
        Provider class for provider systems defined in external DLLs that handles assembly loading and provider delegate
        creation
      </summary>
      <typeparam name="TOut"></typeparam>
      <typeparam name="TIn"></typeparam>
      <remarks> No void specific implementation exists, use null reference as input for this case </remarks>
    </member>
    <member name="P:Mocassin.Framework.Provider.ExternalProvider`2.IsLoaded">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Provider.ExternalProvider`2.ProviderInstance">
      <summary>
        The class instance of the provider
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Provider.ExternalProvider`2.ProviderDelegate">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.Provider.ExternalProvider`2.LoadInfo">
      <summary>
        Defines the dll load information by dll path, provider class and method name on the provider
      </summary>
    </member>
    <member
      name="P:Mocassin.Framework.Provider.ExternalProvider`2.Mocassin#Framework#Provider#IExternalProvider#ProviderDelegate">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Provider.ExternalProvider`2.GetValue(`1)">
      <inheritdoc />
    </member>
    <member
      name="M:Mocassin.Framework.Provider.ExternalProvider`2.Mocassin#Framework#Provider#IExternalProvider#GetValue(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Provider.ExternalProvider`2.TryLoadProvider(System.Exception@,System.Object[])">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Provider.IExternalProvider">
      <summary>
        Non generic external provider that
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Provider.IExternalProvider.ProviderDelegate">
      <summary>
        Get the delegate that the provider uses for object provision
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Provider.IExternalProvider.IsLoaded">
      <summary>
        Boolean flag that indicates if the provider system is loaded and ready for use
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Provider.IExternalProvider.TryLoadProvider(System.Exception@,System.Object[])">
      <summary>
        Tries to load the provider system into the assembly and create in instance with the passed construction arguments.
        Returns false if loading fails and sets caught exception to out parameter
      </summary>
      <param name="exception"></param>
      <param name="constArgs"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Provider.IExternalProvider.GetValue(System.Object)">
      <summary>
        Calls the provider with an input object to get an output object
      </summary>
      <param name="inputObject"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Provider.IExternalProvider`2">
      <summary>
        Represents an external provider for data that takes an input object and returns the matching result
      </summary>
      <typeparam name="TOut"></typeparam>
      <typeparam name="TIn"></typeparam>
    </member>
    <member name="P:Mocassin.Framework.Provider.IExternalProvider`2.ProviderDelegate">
      <summary>
        Get the delegate that the provider uses for object provision
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Provider.IExternalProvider`2.GetValue(`1)">
      <summary>
        Calls the provider with an input object to get an output object
      </summary>
      <param name="inputObject"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Provider.IObjectProvider`1">
      <summary>
        Represents an object provider for a generic object and hides the origin of the object
      </summary>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="M:Mocassin.Framework.Provider.IObjectProvider`1.Get">
      <summary>
        Get the provided object
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Provider.ObjectProvider">
      <summary>
        Abstract base class for object providers that supplies factory functions
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Provider.ObjectProvider.Create``1(System.Func{``0})">
      <summary>
        Creates new object provider from and retrieval delegate
      </summary>
      <typeparam name="T1"></typeparam>
      <param name="retrievalDelegate"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Provider.ObjectProvider`1">
      <summary>
        Basic implementation for an object provider that functions on a retrieval delegate basis
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Provider.ObjectProvider`1.RetrievalDelegate">
      <summary>
        Delegate to the source of the requested object
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Provider.ObjectProvider`1.#ctor(System.Func{`0})">
      <summary>
        Create new object provider for a retrieval delegate
      </summary>
      <param name="retrievalDelegate"></param>
    </member>
    <member name="M:Mocassin.Framework.Provider.ObjectProvider`1.Get">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.Random.PcgRandom32">
      <summary>
        Implementation of the PCG family 32 bit minimal random number generator
      </summary>
    </member>
    <member name="F:Mocassin.Framework.Random.PcgRandom32.DefaultIncrement">
      <summary>
        The default state increment value
      </summary>
    </member>
    <member name="F:Mocassin.Framework.Random.PcgRandom32.DoubleStepping">
      <summary>
        The factor used to create a random double from a random uint
      </summary>
    </member>
    <member name="F:Mocassin.Framework.Random.PcgRandom32.Global">
      <summary>
        The global pcg 32 random number generator
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Random.PcgRandom32.Increment">
      <summary>
        The increase value of the generator
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Random.PcgRandom32.State">
      <summary>
        The current state of the random number generator
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.#ctor">
      <summary>
        Default initialized random generator using the c# crypto provider
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.#ctor(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.#ctor(System.String)">
      <summary>
        Initializes the generator from a single string value
      </summary>
      <param name="seed"></param>
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.#ctor(System.UInt64,System.UInt64)">
      <summary>
        Seed the pcg by state and increment value
      </summary>
      <param name="state"></param>
      <param name="increment"></param>
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.NextUnsigned">
      <summary>
        Get the next random 32 bit unsigned integer
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.Next">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.ToString">
      <summary>
        Returns the current status of the generator as a string
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.Next(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.Next(System.Int32,System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.NextBytes(System.Byte[])">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.NextDouble">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.Random.PcgRandom32.Seed(System.UInt64,System.UInt64)">
      <summary>
        Seeds the random number generator from state and increment
      </summary>
      <param name="state"></param>
      <param name="increment"></param>
    </member>
    <member name="T:Mocassin.Framework.Reflection.DelegateCreator">
      <summary>
        Delegate creator class that use reflection to search for methods that fulfill specific conditions and creates
        delegates for these methods
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Reflection.DelegateCreator.RawActionTypes">
      <summary>
        Static array of raw action types where the array index is the number of parameters
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Reflection.DelegateCreator.RawFunctionTypes">
      <summary>
        Static array of raw function types where the array index is the number of parameters
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Reflection.DelegateCreator.#cctor">
      <summary>
        Static constructor that creates the action and function type lists
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Reflection.DelegateCreator.CreateWhere(System.Object,System.Predicate{System.Reflection.MethodInfo},System.Reflection.BindingFlags)">
      <summary>
        Searches the provided instance for methods that match the predicate and binding flags and returns a sequence of
        delegates to these methods
      </summary>
      <param name="instance"></param>
      <param name="predicate"></param>
      <param name="bindingFlags"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Reflection.DelegateCreator.CreateWhere(System.Object,System.Predicate{System.Reflection.MethodInfo})">
      <summary>
        Searches the provided instance for methods that match the predicate (both public and non public) and returns a
        sequence of delegates to these methods
      </summary>
      <param name="instance"></param>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Reflection.DelegateCreator.MakeDelegateTypes(System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo})">
      <summary>
        Takes a sequence of methods infos and creates a sequence of delegates for these methods
      </summary>
      <param name="methodInfos"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Reflection.DelegateCreator.FindInstanceMethods(System.Type,System.Predicate{System.Reflection.MethodInfo})">
      <summary>
        Finds all instance methods of a type that match the given predicate
      </summary>
      <param name="objType"></param>
      <param name="predicate"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Reflection.DelegateCreator.FindMethods(System.Type,System.Predicate{System.Reflection.MethodInfo},System.Reflection.BindingFlags)">
      <summary>
        Finds all instance methods of a type that match the given predicate, prefilters with binding flags
      </summary>
      <param name="objType"></param>
      <param name="predicate"></param>
      <param name="bindingFlags"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.DelegateCreator.GetGenericDelegateType(System.Reflection.MethodInfo)">
      <summary>
        Get the delegate type for the provided method info
      </summary>
      <param name="methodInfo"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.DelegateCreator.GetRawActionType(System.Int32)">
      <summary>
        Get the raw type of an action that has the specified number of parameters
      </summary>
      <param name="paramCount"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.DelegateCreator.GetRawFunctionType(System.Int32)">
      <summary>
        Get the raw type of a function that has specified number of parameters
      </summary>
      <param name="paramCount"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.DelegateCreator.GetRawActionTypes">
      <summary>
        Creates an array that contains the supported raw action types, each index affiliates to the number of delegate
        parameters
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.DelegateCreator.GetRawFunctionTypes">
      <summary>
        Creates an array that contains the supported raw function types, each index affiliates to the number of delegate
        parameters
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Reflection.ObjectProcessorCreator">
      <summary>
        Supplies automatic analysis of class instances to create sets of object processors for pipeline constructs
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Reflection.ObjectProcessorCreator.RawProcessorTypes">
      <summary>
        Static array of the raw processor types where the index is the number of arguments (0 is always null)
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Reflection.ObjectProcessorCreator.RawAsyncProcessorTypes">
      <summary>
        Static array of the raw async processor types where the index is the number of arguments (0 is always null)
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Reflection.ObjectProcessorCreator.CreateProcessors``1(System.Object,System.Predicate{System.Reflection.MethodInfo},System.Reflection.BindingFlags)">
      <summary>
        Searches the provided class instance for methods that match the predicate and binding flags and returns a sequence
        of object processors for all found methods
      </summary>
      <typeparam name="TResult"></typeparam>
      <param name="instance"></param>
      <param name="predicate"></param>
      <param name="bindingFlags"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Reflection.ObjectProcessorCreator.CreateAsyncProcessors``1(System.Object,System.Predicate{System.Reflection.MethodInfo},System.Reflection.BindingFlags)">
      <summary>
        Searches the provided class instance for methods that match the predicate and binding flags and returns a sequence
        of sync object processors fo all found methods
      </summary>
      <typeparam name="TResult"></typeparam>
      <param name="instance"></param>
      <param name="predicate"></param>
      <param name="bindingFlags"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.ObjectProcessorCreator.CreateProcessor(System.Delegate)">
      <summary>
        Creates an object processor for the provided delegate
      </summary>
      <param name="delegate"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.ObjectProcessorCreator.CreateAsyncProcessor(System.Delegate)">
      <summary>
        Creates an async object processor for the provided delegate type
      </summary>
      <param name="delegate"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.ObjectProcessorCreator.GetRawProcessorType(System.Int32)">
      <summary>
        Get the raw type for an object processor with the specified number of handled objects
      </summary>
      <param name="objectCount"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.ObjectProcessorCreator.GetRawAsyncProcessorType(System.Int32)">
      <summary>
        Get the raw type for an async object processor with the specified number of handled objects
      </summary>
      <param name="objectCount"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.ObjectProcessorCreator.GetRawProcessorTypes">
      <summary>
        Get an array that contains the supported raw processor types (index equals number of handled objects, index 0 is
        always null)
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Reflection.ObjectProcessorCreator.GetRawAsyncProcessorTypes">
      <summary>
        Get an array that contains the supported raw async processor types (index equals number of handled objects, index 0
        is always null)
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Xml.ISinglePropertySerializable`1">
      <summary>
        Interface that specifies that the class or struct uses serialization/deserialization through a single splittable
        attribute string
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Xml.ISinglePropertySerializable`1.SerializationString">
      <summary>
        Get or set the class by attribute string
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Xml.ISinglePropertySerializable`1.ToSerializationString(System.Char)">
      <summary>
        Serializes the values to the attribute string
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.ISinglePropertySerializable`1.FromSerializationString(System.String,System.Char)">
      <summary>
        Deserializes the values to the attribute string
      </summary>
      <param name="serial"></param>
      <param name="separator"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Xml.DataContractConvert">
      <summary>
        Static class that contains methods for using
        <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> in a convenient way
      </summary>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.DataContractConvert.Serialize(System.Object,System.Text.Encoding,System.Runtime.Serialization.DataContractSerializer)">
      <summary>
        Serializes the passed <see cref="T:System.Object" /> using the
        <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> and provided
        <see cref="T:System.Text.Encoding" /> into a string, null defaults to UTF8 and default serializer
      </summary>
      <param name="obj"></param>
      <param name="encoding"></param>
      <param name="serializer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.DataContractConvert.Serialize(System.Object,System.String,System.Text.Encoding,System.Runtime.Serialization.DataContractSerializer)">
      <summary>
        Serializes the passed <see cref="T:System.Object" /> using the
        <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> and provided
        <see cref="T:System.Text.Encoding" /> into a new file at the provided location, null defaults to UTF8 and default serializer
      </summary>
      <param name="obj"></param>
      <param name="filePath"></param>
      <param name="encoding"></param>
      <param name="serializer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.DataContractConvert.Deserialize``1(System.String,System.Text.Encoding,System.Runtime.Serialization.DataContractSerializer)">
      <summary>
        Deserializes an object using the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> and provided
        <see cref="T:System.Text.Encoding" /> from a string, null defaults to UTF8 and default serializer
      </summary>
      <param name="xml"></param>
      <param name="encoding"></param>
      <param name="serializer"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.DataContractConvert.DeserializeFromFile``1(System.String,System.Text.Encoding,System.Runtime.Serialization.DataContractSerializer)">
      <summary>
        Deserializes an object using the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> and provided
        <see cref="T:System.Text.Encoding" /> from a file path, null defaults to UTF8 and default serializer
      </summary>
      <param name="filePath"></param>
      <param name="encoding"></param>
      <param name="serializer"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Xml.XmlEventHandlers">
      <summary>
        Class to store multiple event handlers for all types of Xml deserialization events
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Xml.XmlEventHandlers.AttributeHandlers">
      <summary>
        All to be called event handlers for unknown attribute events
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Xml.XmlEventHandlers.ElementHandlers">
      <summary>
        All to be called event handlers for unknown element events
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Xml.XmlEventHandlers.NodeHandlers">
      <summary>
        All to be called event handlers for unknown nodes events
      </summary>
    </member>
    <member name="P:Mocassin.Framework.Xml.XmlEventHandlers.ObjectHandlers">
      <summary>
        All to be called event handlers for unreferenced object events
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlEventHandlers.#ctor">
      <summary>
        Creates new package with empty lists
      </summary>
    </member>
    <member name="T:Mocassin.Framework.Xml.XmlStreamService">
      <summary>
        Abstract base class for implementations Xml stream services
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService.CreateDefaultReader(System.IO.Stream)">
      <summary>
        Creates a new default <see cref="T:System.Xml.XmlReader" /> from the provided stream
      </summary>
      <param name="stream"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService.CreateDefaultWriter(System.IO.Stream)">
      <summary>
        Creates a new default <see cref="T:System.Xml.XmlWriter" /> from the provided file stream
      </summary>
      <param name="stream"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService.GetDefaultReaderSettings">
      <summary>
        Gets the default reader settings object and attach the event handlers
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService.GetDefaultWriterSettings">
      <summary>
        Get the default writer settings
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService.GetDefaultNamespaces">
      <summary>
        Get the default (empty) xml serializer namespaces
      </summary>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.XmlStreamService.AttachHandlerPackageToSerializer(System.Xml.Serialization.XmlSerializer,Mocassin.Framework.Xml.XmlEventHandlers)">
      <summary>
        Attaches all non null event handlers of a handler package to a serializer
      </summary>
      <param name="serializer"></param>
      <param name="handlers"></param>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.XmlStreamService.GetSerializer(System.Type,Mocassin.Framework.Xml.XmlEventHandlers)">
      <summary>
        Creates a new XML serializer matching the passed object type and attaches all events handlers
      </summary>
      <param name="type"></param>
      <param name="handlers"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService.Create``1(``0)">
      <summary>
        Factory method to create new stream service for serializable object
      </summary>
      <typeparam name="TSerializable"></typeparam>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.XmlStreamService.TryDeserialize``1(System.String,Mocassin.Framework.Xml.XmlEventHandlers,``0@,System.Exception@)">
      <summary>
        Tries to deserialize and object from the passed file through the XML format
      </summary>
      <typeparam name="TSerializable"></typeparam>
      <param name="filePath"></param>
      <param name="handlers"></param>
      <param name="obj"></param>
      <param name="exception"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService.TrySerialize``1(System.String,``0,System.Exception@)">
      <summary>
        Tries to serialize the passed object to the passed file path
      </summary>
      <typeparam name="TSerializable"></typeparam>
      <param name="filePath"></param>
      <param name="obj"></param>
      <param name="exception"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService.TrySerialize``1(System.IO.Stream,``0,System.Exception@)">
      <summary>
        Tries to serialize the passed object to the passed stream
      </summary>
      <typeparam name="TSerializable"></typeparam>
      <param name="stream"></param>
      <param name="obj"></param>
      <param name="exception"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.XmlStreamService.Serialize(System.Object,System.Text.Encoding,Mocassin.Framework.Xml.XmlEventHandlers)">
      <summary>
        Serializes the given object into its xml representation without further formatting options
      </summary>
      <param name="obj"></param>
      <param name="encoding"></param>
      <param name="eventHandlers"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.XmlStreamService.Deserialize(System.String,System.Type,Mocassin.Framework.Xml.XmlEventHandlers)">
      <summary>
        Deserializes an xml representation into an object of the specified type without further formatting options
      </summary>
      <param name="xml"></param>
      <param name="type"></param>
      <param name="eventHandlers"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.Xml.XmlStreamService`1">
      <summary>
        Generic XML stream service that handles serialization and deserialization of data into/from streams containing data
        in the XML format
      </summary>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService`1.TrySerialize(System.IO.Stream,`0,System.Exception@)">
      <summary>
        Tries to serialize the object to the stream, returns false if not serializable
      </summary>
      <param name="obj"></param>
      <param name="stream"></param>
      <param name="exception"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService`1.TrySerializeToConsole(`0,System.Exception@)">
      <summary>
        Tries to serialize the object to the console output
      </summary>
      <param name="obj"></param>
      <param name="exception"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.Xml.XmlStreamService`1.TrySerialize(System.String,`0,System.Exception@)">
      <summary>
        Tries to serialize the object to the provided file, the file is overwritten
      </summary>
      <param name="filepath"></param>
      <param name="obj"></param>
      <param name="exception"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.XmlStreamService`1.TryDeserialize(System.IO.FileStream,Mocassin.Framework.Xml.XmlEventHandlers,`0@,System.Exception@)">
      <summary>
        Tries to deserialize a stream into the given out parameter, returns false on failed and sets the out parameter to
        default
      </summary>
      <param name="stream"></param>
      <param name="handlers"></param>
      <param name="obj"></param>
      <param name="exception"></param>
      <returns></returns>
    </member>
    <member
      name="M:Mocassin.Framework.Xml.XmlStreamService`1.TryDeserialize(System.String,Mocassin.Framework.Xml.XmlEventHandlers,`0@,System.Exception@)">
      <summary>
        Tries to deserialize an object directly from a file
      </summary>
      <param name="filepath"></param>
      <param name="handlers"></param>
      <param name="obj"></param>
      <param name="exception"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.SQLiteCore.IQueryableDataSource">
      <summary>
        Provides a general interface for data sources that provide <see cref="T:System.Linq.IQueryable`1" />
      </summary>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.IQueryableDataSource.Set``1">
      <summary>
        Gets an <see cref="T:System.Linq.IQueryable`1" /> of the
      </summary>
      <typeparam name="TEntity"></typeparam>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.SQLiteCore.ISqLiteContextProvider`1">
      <summary>
        Generic context provider for an SQLite database context
      </summary>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.ISqLiteContextProvider`1.CreateContext">
      <summary>
        Factory method that creates new context with the stored context parameter information
      </summary>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext">
      <summary>
        Adapter class to provide <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances for read only query access
      </summary>
    </member>
    <member name="F:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext.dbContext">
      <summary>
        The wrapped <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
      </summary>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext.#ctor(Microsoft.EntityFrameworkCore.DbContext)">
      <summary>
        Creates new <see cref="T:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext" /> for the passed
        <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
      </summary>
      <param name="dbContext"></param>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext.Dispose">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext.Set``1">
      <summary>
        Get a <see cref="T:System.Linq.IQueryable`1" /> for the requested entity type
      </summary>
      <typeparam name="TEntity"></typeparam>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.SQLiteCore.SqLiteContext">
      <summary>
        An abstract SQLite EFCore context class that supports the ICon context provider system and ensures that the
        database is created
      </summary>
    </member>
    <member name="P:Mocassin.Framework.SQLiteCore.SqLiteContext.OptionsBuilderParameterString">
      <summary>
        The total file string parameter passed to the options builder to find the database
      </summary>
    </member>
    <member name="P:Mocassin.Framework.SQLiteCore.SqLiteContext.FileName">
      <summary>
        Get or set the file name <see cref="T:System.String" /> of the database
      </summary>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.SqLiteContext.#ctor(System.String)">
      <summary>
        Creates a new context with the provided options builder string parameter and ensures that the database is created
      </summary>
      <param name="optionsBuilderParameterString"></param>
    </member>
    <member
      name="M:Mocassin.Framework.SQLiteCore.SqLiteContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
      <inheritdoc />
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.SqLiteContext.AsReadOnly">
      <summary>
        Get a <see cref="T:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext" /> of the current
      </summary>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.SqLiteContext.OpenDatabase``1(System.String,System.Boolean)">
      <summary>
        Creates a new generic <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> of using the provided file path and ensures
        that the database is drop-created if requested (Note: No overwrite warning is provided!)
      </summary>
      <param name="filePath"></param>
      <param name="dropCreate"></param>
      <returns></returns>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.SqLiteContext.DetachAllEntities">
      <summary>
        Detaches all entities from the context change tracking system
      </summary>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.SqLiteContext.OpenDatabaseAsReadOnly``1(System.String)">
      <summary>
        Creates a new generic <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> for the provided database filepath and returns a
        <see cref="T:Mocassin.Framework.SQLiteCore.ReadOnlyDbContext" /> wrapper for it
      </summary>
      <param name="filePath"></param>
      <returns></returns>
    </member>
    <member name="T:Mocassin.Framework.SQLiteCore.SqLiteContext`1">
      <summary>
        An abstract generic SQLite EFCore context class that supports the ICon context provider system and ensures that the
        database is created
      </summary>
      <typeparam name="T1"></typeparam>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.SqLiteContext`1.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:Mocassin.Framework.SQLiteCore.SqLiteContextProvider`1">
      <inheritdoc />
    </member>
    <member name="P:Mocassin.Framework.SQLiteCore.SqLiteContextProvider`1.DefaultFilepath">
      <summary>
        The default filepath for the context database
      </summary>
    </member>
    <member name="P:Mocassin.Framework.SQLiteCore.SqLiteContextProvider`1.Filepath">
      <summary>
        The actually used filepath
      </summary>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.SqLiteContextProvider`1.#ctor(System.String)">
      <summary>
        Creates a context provider with the specified filepath (Checks if filepath exists)
      </summary>
      <param name="filepath"></param>
    </member>
    <member name="M:Mocassin.Framework.SQLiteCore.SqLiteContextProvider`1.CreateContext">
      <inheritdoc />
    </member>
    <member name="T:ICon.Framework.Random.UniquePoolSampler`1">
      <summary>
        Selection helper for quick uniform subset selection from an item sequence
      </summary>
      <remarks>
        Algorithm is by C. T. Fan, M. E. Muller, I. Rezucha, J. Amer. Stat. Assoc. 57 (1962), 387-402
        Discussed in D. E. Knuth "The Art of Computer Programming Vol. 2 - Seminumerical Algorithms" (1997) 142-143
      </remarks>
    </member>
    <member
      name="M:ICon.Framework.Random.UniquePoolSampler`1.SelectSubset(System.Collections.Generic.IEnumerable{`0},System.UInt32,System.Random)">
      <summary>
        Select a subset of defined size from a <see cref="T:System.Collections.Generic.IEnumerable`1" />
      </summary>
      <param name="pool"></param>
      <param name="samplingSize"></param>
      <param name="rng"></param>
      <returns></returns>
    </member>
  </members>
</doc>