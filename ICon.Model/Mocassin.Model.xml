<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mocassin.Model</name>
    </assembly>
    <members>
        <member name="T:Mocassin.Model.Basic.CacheMethodResultAttribute">
            <summary>
                Attribute to instruct a cache manager to ad a method to its caching system
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.CacheMethodResultAttribute.GenericDataWrapperType">
            <summary>
                The type of the cached object wrapper
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.CacheMethodResultAttribute.#ctor">
            <summary>
                Creates the default version that uses the "AutoCachedData" wrapper for the data object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.CacheMethodResultAttribute.#ctor(System.Type)">
            <summary>
                Creates new attribute where the generic type of the caching wrapper is defined
            </summary>
            <param name="genericDataWrapperType"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ConflictHandlerAttribute">
            <summary>
                Attribute to mark properties as conflict resolvers for a specific type of data operation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ConflictHandlerAttribute.DataOperationType">
            <summary>
                The type of data operation the resolver is supposed to handle
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ConflictHandlerAttribute.#ctor(Mocassin.Model.Basic.DataOperationType)">
            <summary>
                Creates new attribute class with the provided data operation type
            </summary>
            <param name="dataOperationType"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ConflictHandlingMethodAttribute">
            <summary>
                Attribute that marks a method as conflict handling method
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ConflictHandlingMethodAttribute.DataOperationType">
            <summary>
                Get the type of the conflict the method is supposed to handle
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.HandlerFactoryMethodAttribute">
            <summary>
                Attribute to mark methods as a provider method for conflict resolvers for a specific data operation.
                Should be used to enforce overwrite of default handlers in auto generated pipeline systems
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.HandlerFactoryMethodAttribute.DataOperationType">
            <summary>
                The type of data operation the resolver is supposed to handle
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.HandlerFactoryMethodAttribute.#ctor(Mocassin.Model.Basic.DataOperationType)">
            <summary>
                Creates new attribute class with the provided data operation type
            </summary>
            <param name="dataOperationType"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.EventHandlerMethodAttribute">
            <summary>
                Attribute to mark a method as a data event handler method of a specific type
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.EventHandlerMethodAttribute.OperationType">
            <summary>
                The type of the model data event the method can handle
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.EventHandlerMethodAttribute.#ctor(Mocassin.Model.Basic.DataOperationType)">
            <summary>
                Creates new model event attribute of the specified event type
            </summary>
            <param name="dataOperationType"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.EventHandlingMethodAttribute">
            <summary>
                Attribute that marks a method as an event handler method which can handle a specific type of data operation
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.EventPortConnectorAttribute">
            <summary>
                Attribute that marks a method as an event port connector method
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.UpdateHandlerAttribute">
            <summary>
                Attribute that marks a class as a data update event handler which provides handler pipelines and a port connection
                function
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.UpdateHandlerAttribute.EventSourceType">
            <summary>
                Defines the type of the event port source that the handler is designed to handle
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.UpdateHandlerAttribute.#ctor(System.Type)">
            <summary>
                Create new data update event handler attribute with the defines type of event port
            </summary>
            <param name="eventSourceType"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.IndexedModelDataAttribute">
            <summary>
                Attribute that marks a property as indexed model data which supports reindexing operations and a specific model
                object interface
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IndexedModelDataAttribute.IsAutoManaged">
            <summary>
                Flag that marks the indexed model data aus automatically generated and managed by the manager (No custom input
                support)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IndexedModelDataAttribute.InterfaceType">
            <summary>
                Type of the model object interface that is supported by the container (Required for event distribution)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IndexedModelDataAttribute.#ctor(System.Type)">
            <summary>
                Create new indexed model data attribute with the specified type of the indexed objects access interface
            </summary>
            <param name="interfaceType"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelParameterAttribute">
            <summary>
                Attribute to mark a property as a model parameter which supports a specific model parameter interface
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelParameterAttribute.InterfaceType">
            <summary>
                The type of the parameter interface supported by the parameter
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelParameterAttribute.#ctor(System.Type)">
            <summary>
                Create new model parameter attribute with the specified parameter interface type
            </summary>
            <param name="interfaceType"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.DataOperationType">
            <summary>
                Enum for data operation types that can be applied to the model data and are supported by the automated pipeline build system
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.DataOperationType.NewObject">
            <summary>
                Defines an operation that registers a new object
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.DataOperationType.ObjectChange">
            <summary>
                Defines an operation that changes an existing object
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.DataOperationType.ObjectRemoval">
            <summary>
                Defines an operation that removes an existing object
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.DataOperationType.ParameterChange">
            <summary>
                Defines an operation that changes a unique parameter
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.DataOperationType.ObjectCleaning">
            <summary>
                Defines an operation that performs object cleanup
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.DataOperationAttribute">
            <summary>
                Attribute to mark methods as data operations that add or manipulate the model data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataOperationAttribute.OperationType">
            <summary>
                The type of the operation the marked method performs
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataOperationAttribute.#ctor(Mocassin.Model.Basic.DataOperationType)">
            <summary>
                Creates new data operation method attribute with the type of operation that is performed by the marked operation
            </summary>
            <param name="operationType"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ValidationType">
            <summary>
                Enum that is used to specify the type of validation that is performed
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.ValidationType.Object">
            <summary>
                The validation handles an indexed model object
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.ValidationType.Parameter">
            <summary>
                The validation handles a unique model parameter
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ValidationOperationAttribute">
            <summary>
                Attribute to mark methods as validation methods for model data input
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ValidationOperationAttribute.ValidationType">
            <summary>
                The type of validation the method is used for
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationOperationAttribute.#ctor(Mocassin.Model.Basic.ValidationType)">
            <summary>
                Create new data validation method attribute with the specified validation type
            </summary>
            <param name="validationType"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.AccessLockSource">
            <summary>
                Access lock source for model data that tries to access the data a specified number of times within certain
                intervals
                before throwing an exception
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.AccessLockSource.Attempts">
            <summary>
                The number of attempts for locking
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.AccessLockSource.Interval">
            <summary>
                The interval in between attempts
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.AccessLockSource.#ctor(System.Int32,System.TimeSpan)">
            <summary>
                Creates new access lock source from interval length and attempt counter
            </summary>
            <param name="attempts"></param>
            <param name="interval"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.AccessLockSource.TryGetReadAccess(Mocassin.Model.Basic.ModelData)">
            <summary>
                Tries to get a read only lock on the model data object until internal timeout occurs
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.AccessLockSource.TryGetFullAccess(Mocassin.Model.Basic.ModelData)">
            <summary>
                Tries to get a full access lock on the model data object until internal timeout occurs
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.DataAccessor`1">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.DataAccessor`1.Data">
            <summary>
                The data object that should be modified
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataAccessor`1.Lock">
            <summary>
                The disposable lock on the data object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessor`1.#ctor(`0,Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Creates new data writer for a data object, throw exception on locking timeout
            </summary>
            <param name="data"></param>
            <param name="lockSource"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessor`1.#ctor(`0)">
            <summary>
                Creates new data writer for a data object that is not require an access lock
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessor`1.Query(System.Action{`0})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessor`1.Query``1(System.Func{`0,``0})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessor`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessor`1.AsReader``1">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessor`1.AsReader``1(Mocassin.Model.Basic.IDataReaderSource{``0})">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ReadOnlyDataAccessorAdapter`2">
            <summary>
                Adapter class for data accessors that restricts to port based reading access
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TPort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ReadOnlyDataAccessorAdapter`2.Access">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ReadOnlyDataAccessorAdapter`2.Accessor">
            <summary>
                The wrapped accessor object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ReadOnlyDataAccessorAdapter`2.#ctor(Mocassin.Model.Basic.DataAccessor{`0})">
            <summary>
                Creates new read only wrapped data accessor
            </summary>
            <param name="accessor"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ReadOnlyDataAccessorAdapter`2.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.DataAccessorSource">
            <summary>
                Base class for all model data writer providers that offers data writers fro model data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataAccessorSource.LockSource">
            <summary>
                The data locker that tries to get a valid lock on a data object for its internally specified attempt time
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessorSource.#ctor(Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Creates new data model writer provider with the specified data locker
            </summary>
            <param name="lockSource"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessorSource.Create``1(``0,Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Factory to create new model data writer providers
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="data"></param>
            <param name="lockSource"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.DataAccessorSource`1">
            <summary>
                Generic provider for data accessors for model data objects
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.DataAccessorSource`1.DataObject">
            <summary>
                Data object used for writing provision
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessorSource`1.#ctor(`0,Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Generates new data writer provider for a data object
            </summary>
            <param name="dataObject"></param>
            <param name="lockSource"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessorSource`1.Create">
            <summary>
                Creates a new model data accessor for the internal data object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessorSource`1.CreateUnsafe">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessorSource`1.Mocassin#Model#Basic#IDataAccessorSource{TData}#Create">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.DataReader">
            <summary>
                Base class for implementations of disposable model data readers
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataReader.Lock">
            <summary>
                The disposable lock on the data object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataReader.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataReader.DisposeDataPort">
            <summary>
                Abstract method that disposes the data port
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.DataReader`2">
            <summary>
                Generic disposable model data reader that locks a data object for changing operations making it read only as long
                as
                a non disposed reader exists
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataReader`2.Access">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataReader`2.#ctor(`0,Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Creates new data writer for a data object and the read only data port
            </summary>
            <param name="data"></param>
            <param name="lockSource"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataReader`2.DisposeDataPort">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.DataReaderSource">
            <summary>
                Abstract base class for all model data reader providers that create safe data readers for read only model data
                access
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataReaderSource.LockSource">
            <summary>
                The data locker that tries to get a valid lock on a data object for its internally specified attempt time
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataReaderSource.#ctor(Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Creates new model data reader provider base for read only access with the provided data locker
            </summary>
            <param name="lockSource"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataReaderSource.Create``2(``0,``1,Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Factory to create new model data readers for the provided data object and
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TPort"></typeparam>
            <param name="data"></param>
            <param name="dataPort"></param>
            <param name="lockSource"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.DataReaderSource`2">
            <summary>
                Generic provider for data readers for model data objects completely hiding the write access to the data object
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TPort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.DataReaderSource`2.DataObject">
            <summary>
                Data object used for reader provision
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataReaderSource`2.#ctor(`0,Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Generates new data reader provider for a data object
            </summary>
            <param name="dataObject"></param>
            <param name="lockSource"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataReaderSource`2.Create">
            <summary>
                Creates a new model data reader for the internal data object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.DataReaderSource`2.CreateInterface">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.IndexedDataManager`1">
            <summary>
                Manager for indexed data objects that handles add/remove/insert operations on a list with indexed objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IndexedDataManager`1.IndexAndAdd(System.Collections.Generic.IList{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Indexes the passed set of new model objects based upon the current end of the object list and adds them accordingly
            </summary>
            <param name="currentObjects"></param>
            <param name="newObjects"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.IndexedDataManager`1.IndexAndAddUseDeprecated(System.Collections.Generic.IList{`0},System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Indexes the passed set of ne model objects based upon either deprecated places or the end of the list and adds the
                accordingly
            </summary>
            <param name="currentObjects"></param>
            <param name="newObjects"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.IndexedDataManager`1.DeprecateAll(System.Collections.Generic.IEnumerable{`0},System.Predicate{`0})">
            <summary>
                Marks all model objects as deprecated that match the provided predicate. Returns sequence of all deprecated objects
            </summary>
            <param name="currentObjects"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.IndexedDataManager`1.RemoveAndReindex(System.Collections.Generic.IList{`0},System.Predicate{`0})">
            <summary>
                Remove all objects that match the provided predicate and reindex the remaining. Returns a reindexing list that
                describes the changes
            </summary>
            <param name="currentObjects"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IDataAccessor`1">
            <summary>
                Represents a disposable model data accessor that provides full access to a model data object while blocking other
                readers/writers from accessing the object
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.IDataAccessor`1.Query(System.Action{`0})">
            <summary>
                Perform an exclusive access operation that returns nothing
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.IDataAccessor`1.Query``1(System.Func{`0,``0})">
            <summary>
                Perform an exclusive access operation that returns a value
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IDataAccessor`1.AsReader``1">
            <summary>
                Makes reader interface for the specified data port from the data accessor
            </summary>
            <typeparam name="TPort"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IDataAccessor`1.AsReader``1(Mocassin.Model.Basic.IDataReaderSource{``0})">
            <summary>
                Makes interface reader that matches the data port of the passed reader provider
            </summary>
            <typeparam name="TPort"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IDataAccessorSource`1">
            <summary>
                Generic interface for all providers that generate safe full accessors for specific data types
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.IDataAccessorSource`1.Create">
            <summary>
                Creates a new disposable write interface to the data object that is thread safe
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IDataAccessorSource`1.CreateUnsafe">
            <summary>
                Creates a new disposable write interface for the data object that is not thread safe
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IDataReader`1">
            <summary>
                Represents a generic disposable model data reader that provides read only access to a data object through the
                specified data port
            </summary>
            <typeparam name="TPort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.IDataReader`1.Access">
            <summary>
                Data access through the read only data port
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.IDataReaderSource`1">
            <summary>
                Generic interface for all reader providers that supply safe disposable data readers for model data objects
            </summary>
            <typeparam name="TPort"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.IDataReaderSource`1.CreateInterface">
            <summary>
                Creates a new disposable model data reader interface
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ICachedObjectSource">
            <summary>
                Represent an 'on-demand' data object source that supports object caching and a creation delegate
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ICachedObjectSource.FactoryDelegate">
            <summary>
                Data creation delegate to identify the cached data object in a container
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ICachedObjectSource.GetValue">
            <summary>
                Get the data as an object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ICachedObjectSource.GetValueAsync">
            <summary>
                The the data by a new task
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mocassin.Model.Basic.ICachedObjectSource.IsDeprecated">
            <summary>
                Flag that indicates if the data is no longer valid
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ICachedObjectSource.Clear">
            <summary>
                Clears the cached data object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ICachedObjectSource.ClearIfDeprecated">
            <summary>
                Clears the data only if it is deprecated
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ICachedObjectSource.MarkAsDeprecated">
            <summary>
                Marks the data as deprecated or no longer up to date
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelObject">
            <summary>
                Base interface for all model objects or structs that support deprecation operations and are always indexed by a
                manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelObject.IsDeprecated">
            <summary>
                Flag that indicates if the object is deprecated
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelObject.Index">
            <summary>
                Get the index of the model object
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelObject.Key">
            <summary>
                Get the key of the model object
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelObject.Name">
            <summary>
                Get the literal name of the model object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelObject.Deprecate">
            <summary>
                Deprecates object
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelObject.ObjectName">
            <summary>
                Returns a string that represents the model object type name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelParameter">
            <summary>
                Basic interface for all model parameters that are always unique and do not require deprecation or indexing
                operations
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelParameter.GetParameterName">
            <summary>
                Returns a string that represents the model parameter type name
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.CachedObjectSource`1">
            <summary>
                Generic cached object source that encapsulates data and recalculation instruction into an 'on-demand' data supplier
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.CachedObjectSource`1.AccessLock">
            <summary>
                The access lock object to protect from multiple induced data recalculation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.CachedObjectSource`1.IsDeprecated">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.CachedObjectSource`1.DataCreator">
            <summary>
                The data creation delegate that is triggered each time data is deprecated or null
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.CachedObjectSource`1.Data">
            <summary>
                The cached data object
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.CachedObjectSource`1.FactoryDelegate">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.#ctor">
            <summary>
                Create new auto cached data object that is by default deprecated
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.#ctor(System.Func{`0})">
            <summary>
                Creates new auto cached data object that uses the provided creation function
            </summary>
            <param name="dataCreator"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.GetData">
            <summary>
                Get the data object, triggers update if data is deprecated/null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.GetDataAsync">
            <summary>
                Start data object retrieval as a new task, triggers data update if deprecated flag is set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.ClearIfDeprecated">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.GetValue">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.GetValueAsync">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.Equals(Mocassin.Model.Basic.ICachedObjectSource)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.MarkAsDeprecated">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.CachedObjectSource`1.Recalculate">
            <summary>
                Triggers update function and sets the deprecated flag to false
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelData">
            <summary>
                Base class for all model data objects that contain potentially critical data and support thread safe read/write
                operations through disposables
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelData.AccessLock">
            <summary>
                The access lock to safely set and unset the read/write flags
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelData.IsWriteInProgress">
            <summary>
                Boolean flag that indicates if a write operation is currently in progress
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelData.IsReadInProgress">
            <summary>
                Boolean flag that indicates if active readers exist
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelData.CurrentReaders">
            <summary>
                Count how many active reader instances exists, the data is blocked for writing as long as at least one non-disposed
                reader exists
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelData.TryGetFullLock(System.IDisposable@)">
            <summary>
                Tries to get a disposable full access lock that restricts access for other sources until disposed, returns false if
                currently in use
            </summary>
            <param name="locker"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelData.TryGetReadingLock(System.IDisposable@)">
            <summary>
                Tries to get a disposable read only lock that blocks writing locks from other sources but allows reading until
                disposed, returns false if writing is currently in progress
            </summary>
            <param name="locker"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelData.ResetToDefault">
            <summary>
                Resets the data object to default construction conditions
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelData.GetModelDataPort">
            <summary>
                Get the read only interface as a general model data port
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelData.CreateDefault``1">
            <summary>
                Generic factory to create default state model data objects
            </summary>
            <typeparam name="TData"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelData`1">
            <summary>
                Generic abstract base class for all model data objects that supply a specific read only access port
            </summary>
            <typeparam name="TPort"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelData`1.AsReadOnly">
            <summary>
                Get the read only access port for the model data object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelData`1.GetModelDataPort">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelData`1.ResetAllIndexedData">
            <summary>
                Replaces all null index data by new containers of their type or cleans the affiliated lists (Containers require a
                parameter-less constructor and have to implement <see cref="T:System.Collections.IList" />)
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelDataCache`1">
            <summary>
                Abstract base class for all implementations of extended data containers that supply calculated data on a
                'on-demand' basis and cache the results for faster access through object providers
            </summary>
            <typeparam name="TPort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelDataCache`1.ModelProject">
            <summary>
                The project services instance that is used to create read only wrappers for the cache
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelDataCache`1.EventSubscriptions">
            <summary>
                The subscription the the relevant update events
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelDataCache`1.CachePort">
            <summary>
                The cache port (Stores the cache port implementation after first creation)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelDataCache`1.DataCache">
            <summary>
                List that contains all the cached data objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelDataCache`1.IsInitialized">
            <summary>
                Flag that is set after initialization. Prohibits another initialization process
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataCache`1.#ctor(Mocassin.Model.Basic.IModelEventPort,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new extended data object with empty cache list and registers to the provided event port events to register
                notifications about expired cached data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataCache`1.Initialize(System.Collections.Generic.IEnumerable{Mocassin.Model.Basic.ICachedObjectSource})">
            <summary>
                Initialize the cache if not initialized before and set the initialization flag
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataCache`1.FindCacheEntry``1(System.Func{``0})">
            <summary>
                Searches the cache for an entry that matches the creation method
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="creationMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataCache`1.ClearAll">
            <summary>
                Clear all cached data by resetting it to their default values
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataCache`1.ResetToDefault">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataCache`1.MarkAllAsObsolete">
            <summary>
                Marks all cached data as deprecated
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataCache`1.SubscribeToEventPort(Mocassin.Model.Basic.IModelEventPort)">
            <summary>
                Registers delegates to manager reset, manager disconnect and extended data expired events of the provided event
                port
            </summary>
            <param name="eventPort"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataCache`1.DisposeSubscriptions">
            <summary>
                Disposes all subscriptions that are not already disposed
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ReindexingList">
            <summary>
                Carries reindexing information for the contents of a model data container after deprecated data was removed as
                pairs of old and new index (-1 means removed)
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.ReindexingList.Data">
            <summary>
                Contains the actual reindexing info as pairs of new and old index
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.#ctor">
            <summary>
                Creates new reindexing list with an initial capacity of 0
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.#ctor(System.Int32)">
            <summary>
                Creates new list with specified start capacity
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:Mocassin.Model.Basic.ReindexingList.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ReindexingList.Count">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ReindexingList.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.Add(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.Clear">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.Contains(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.CopyTo(System.ValueTuple{System.Int32,System.Int32}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.IndexOf(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.Insert(System.Int32,System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.Remove(System.ValueTuple{System.Int32,System.Int32})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ReindexingList.TrimExcess">
            <summary>
                Set the internal list capacity to the actual number of entries
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelObject">
            <inheritdoc />
            <remarks> Abstract base class for model object implementations </remarks>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelObject.Index">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelObject.IsDeprecated">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelObject.Key">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelObject.Name">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelObject.#ctor">
            <summary>
            Construct new model object that has an invalid index
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelObject.Deprecate">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelObject.Restore">
            <summary>
                Base restore operation that only sets the deprecation flag to false
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelObject.ToString">
            <summary>
                Basic string representation with name
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelObject.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelObject.BuildInternalObject``1(Mocassin.Model.Basic.IModelObject)">
            <summary>
                Builds the specified object and populates it by the passed interface
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelObject.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <summary>
                Tries to fill a model object by interface, returns the filled object on success or null if not possible or if the
                interface object is deprecated
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelObject.CastIfNotDeprecated``1(Mocassin.Model.Basic.IModelObject)">
            <summary>
                Cast the passed model object interface to the correct type (Returns null if not possible or object is marked as
                deprecated)
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelParameter">
            <summary>
                Abstract model parameter class for implementations of unique model properties that do not support indexing
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelParameter.GetParameterName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelParameter.ToString">
            <summary>
                Basic string representation with name and json format serialization values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelParameter.BuildInternalObject``1(Mocassin.Model.Basic.IModelParameter)">
            <summary>
                Builds a new object of the specified type and populates it from the provided matching interface (Returns null if
                not possible)
            </summary>
            <typeparam name="TParam"></typeparam>
            <param name="modelParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelParameter.PopulateObject(Mocassin.Model.Basic.IModelParameter)">
            <summary>
                Consumes the provided interface if possible and returns the model object filled with the parameter info (Returns
                null if wrong type)
            </summary>
            <param name="modelParameter"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelParameter.Equals(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.IValueSetter">
            <summary>
                Represents a value setter adapter that enables save manipulation of model data that does not require validation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IValueSetter.WhenValuesPushed">
            <summary>
                Observable to subscribe for reactions when the setter pushed data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IValueSetter.WhenValueChanged">
            <summary>
                Observable to subscribe for reactions when a temporary value changes
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IValueSetter.PushData">
            <summary>
                Pushes the stored value manipulations into the model data
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ValueSetter">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ValueSetter.WhenValuesPushed">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ValueSetter.WhenValueChanged">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ValueSetter.OnValueChanged">
            <summary>
                Event provider for the subject of locally changed values
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ValueSetter.OnValuesPushed">
            <summary>
                Event provider for the subject of data pushes to the model
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ValueSetter.#ctor">
            <summary>
                Create new value setter and initialize the event providers
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ValueSetter.PushData">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.DisposableCollection">
            <summary>
                Base class for a collection of disposables that handles storage and disposing of multiple disposables
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DisposableCollection.Disposables">
            <summary>
                The list of disposables
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DisposableCollection.IsDisposed">
            <summary>
                Flag if the container contents are disposed
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DisposableCollection.#ctor(System.Collections.Generic.ICollection{System.IDisposable})">
            <summary>
                Creates new disposable collection with an initial collection of disposables
            </summary>
            <param name="disposables"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DisposableCollection.#ctor">
            <summary>
                Creates new disposables collection with empty disposable list
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DisposableCollection.Add(System.IDisposable)">
            <summary>
                Adds a new disposable to the collection
            </summary>
            <param name="disposable"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DisposableCollection.Add(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <summary>
                Adds multiple disposables by enumerable
            </summary>
            <param name="disposables"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DisposableCollection.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.SubscriptionCollection">
            <summary>
                Disposable subscription collection that stores a set of un-subscriber disposables belonging to a single event
                source
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.SubscriptionCollection.EventPortType">
            <summary>
                The subscription source object or event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.SubscriptionCollection.#ctor(System.Type)">
            <summary>
                Creates new subscription collection for the specified port type
            </summary>
            <param name="portType"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.SubscriptionCollection.#ctor(System.Type,System.Collections.Generic.ICollection{System.IDisposable})">
            <summary>
                Creates new subscription collection for the specified event port type with a initial list of subscriptions
            </summary>
            <param name="portType"></param>
            <param name="subscriptions"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.SubscriptionCollection.DisposeIfSourceMatch(System.Type)">
            <summary>
                Disposes the collection only if the specified port type the internal stored type, returns true if dispose was
                performed
            </summary>
            <param name="sourceType"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.SubscriptionCollection.Equals(Mocassin.Model.Basic.SubscriptionCollection)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.IModelIndexingEventArgs`1">
            <summary>
                Model list indexing event arguments interface that allows the covariant usage of the event arguments with
                non-interface types
            </summary>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelIndexingEventArgs`1.ReindexingList">
            <summary>
                The reindexing list that describes the new object indexing instruction
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelObjectEventArgs`1">
            <summary>
                Model object event arguments interface that allows the covariant usage of the event arguments with non-interface
                types
            </summary>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelObjectEventArgs`1.ModelObject">
            <summary>
                Interface access to the object that was changed or added
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelParameterEventArgs`1">
            <summary>
                Model parameter event arguments interface that allows the covariant usage of the event arguments with non-interface
                types
            </summary>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelParameterEventArgs`1.ModelParameter">
            <summary>
                Access to the parameter that was changed
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelIndexingEventArgs">
            <summary>
                Abstract base event arguments class for events that inform about reindexing events for model object collections
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelIndexingEventArgs.ReindexingList">
            <summary>
                The reindexing list that describes the indexing changes
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelIndexingEventArgs.#ctor(Mocassin.Model.Basic.ReindexingList)">
            <summary>
                Create new object reindexing event arguments with the provided reindexing list
            </summary>
            <param name="reindexingList"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelIndexingEventArgs`1">
            <summary>
                Reindexing event arguments for a specific type of model objects
            </summary>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelIndexingEventArgs`1.#ctor(Mocassin.Model.Basic.ReindexingList)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ModelObjectEventArgs">
            <summary>
                Abstract base class for model object event args
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelObjectEventArgs.Create``1(``0)">
            <summary>
                Creates new model object event argument of the specified type
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelObjectEventArgs`1">
            <summary>
                Event arguments for data object events that inform about changes on a specific model object
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelObjectEventArgs`1.ModelObject">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelObjectEventArgs`1.#ctor(`0)">
            <summary>
                Create new model object event arguments with the provided model object interface
            </summary>
            <param name="modelObject"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelParameterEventArgs">
            <summary>
                Abstract base class for model parameter event args
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelParameterEventArgs.Create``1(``0)">
            <summary>
                Factory method to create new parameter events of the specified type
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="modelParameter"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelParameterEventArgs`1">
            <summary>
                Event arguments for data events that inform about changes on a specific model parameters
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelParameterEventArgs`1.ModelParameter">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelParameterEventArgs`1.#ctor(`0)">
            <summary>
                Create new model object event arguments with the provided model parameter interface
            </summary>
            <param name="modelParameter"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelReindexingEventArgs">
            <summary>
                Abstract base event arguments class for events that inform about reindexing events for model object collections
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelReindexingEventArgs.ReindexingList">
            <summary>
                The reindexing list that describes the indexing changes
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelReindexingEventArgs.#ctor(Mocassin.Model.Basic.ReindexingList)">
            <summary>
                Create new object reindexing event arguments with the provided reindexing list
            </summary>
            <param name="reindexingList"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelReindexingEventArgs`1">
            <summary>
                Reindexing event arguments for a specific type of model objects
            </summary>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelReindexingEventArgs`1.#ctor(Mocassin.Model.Basic.ReindexingList)">
            <summary>
                Create new object reindexing event arguments with the provided reindexing list
            </summary>
            <param name="reindexingList"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.DataAccessTimeoutException">
            <summary>
                Exception thrown if a data lock source cannot get a valid read or write lock within its specified await period
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataAccessTimeoutException.DataObject">
            <summary>
                The data object that was used during the invalid access
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessTimeoutException.#ctor(System.String,System.Object)">
            <summary>
                Creates new data access exception
            </summary>
            <param name="message"></param>
            <param name="dataObject"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataAccessTimeoutException.ToString">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ManagerFactory">
            <summary>
                Defines a static helper class for generating <see cref="T:Mocassin.Model.Basic.ManagerPackage"/> instances
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ManagerFactory.DebugFactory">
            <summary>
                Debug factory that directly creates all dependent managers
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ManagerFactory.DebugFactory.CreateProjectServicesSystem(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Create a project service system for testing
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ManagerFactory.DebugFactory.CreateParticleManagementSystem(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Creates and links default project services and particle manager for testing
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ManagerFactory.DebugFactory.CreateStructureManagementSystem(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Creates structure management system for testing
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ManagerFactory.DebugFactory.CreateLatticeManagementSystem(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Creates lattice management system for testing
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ManagerFactory.DebugFactory.CreateTransitionManagementSystem(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Creates a management system that is capable of the modeling process until transition inputs
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ManagerFactory.DebugFactory.CreateEnergyManagementSystem(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Creates a management system that is capable of the modeling process until energy inputs
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ManagerFactory.DebugFactory.CreateSimulationManagementPackage(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Creates a management system that is capable of the modeling process until simulation inputs
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ManagerFactory.DebugFactory.CreateFullManagementSystem(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Creates the currently most developed management system
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ManagerPackage">
            <summary>
                Manager package class that bundles a set of managers
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ManagerPackage.InputReportJson">
            <summary>
                Json input report by the automated data input system
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ManagerPackage.ModelProject">
            <summary>
                Shared project services
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ManagerPackage.ParticleManager">
            <summary>
                The particle manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ManagerPackage.StructureManager">
            <summary>
                The structure manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ManagerPackage.TransitionManager">
            <summary>
                The transition manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ManagerPackage.EnergyManager">
            <summary>
                The energy manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ManagerPackage.LatticeManager">
            <summary>
                The lattice manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ManagerPackage.SimulationManager">
            <summary>
                The simulation manager
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelMessageSource">
            <summary>
                Factory class for basic message objects that are required throughout the model process
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateNotRecommendedWarning(System.Object,System.String[])">
            <summary>
                Creates a non-critical warning message for cases where a not recommended settings is detected during validation
                (With arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateMissingOrEmptyContentWarning(System.Object,System.String[])">
            <summary>
                Creates a new warning message for cases where modeling objects have missing content during validation (With
                arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateRedundantContentWarning(System.Object,System.String[])">
            <summary>
                Creates a non critical raw warning that possibly redundant content was detected with the provided set of details
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateWarningLimitReachedWarning(System.Object,System.String[])">
            <summary>
                Creates a non critical raw warning that redundant content was detected with the provided set of details
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateContentMismatchWarning(System.Object,System.String[])">
            <summary>
                Creates a new warning message for cases where a model data mismatch is detected during validation (with arbitrary
                number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateRestrictionViolationWarning(System.Object,System.String[])">
            <summary>
                Creates new warning message for cases where model content restriction violation is detected during validation (With
                arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateNamingViolationWarning(System.Object,System.String[])">
            <summary>
                Creates a new warning message for cases where a model content naming violation is detected during validation (With
                arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateAliasViolationWarning(System.Object,System.String[])">
            <summary>
                Creates a new warning message for cases where a model content alias violation is detected during validation (With
                arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateModelDuplicateWarning(System.Object,System.String[])">
            <summary>
                Creates a new warning message for cases where a model object duplicate is detected during validation (With
                arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateImplicitDependencyWarning(System.Object,System.String[])">
            <summary>
                Creates a new warning message for cases where a model object has implicit model object dependencies due to
                consistency (With arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateFeatureBreakingInputWarning(System.Object,System.String[])">
            <summary>
                Creates a new raw warning message for cases where a model definition is supported but does implicitly break or
                reduce feature support (With arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateParameterIdenticalWarning(System.Object,System.String[])">
            <summary>
                Creates a new warning message for cases where an identical model parameter replacement is detected during
                validation (With arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateConflictHandlingWarning(System.Object,System.String[])">
            <summary>
                Creates a new warning message that a conflict was successfully resolved by a conflict resolver (With arbitrary
                number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateContentResetWarning(System.Object,System.String[])">
            <summary>
                Creates a new raw warning message for cases where a model data conflict resolvers had to auto correct data (with
                arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelMessageSource.CreateUserInducedExceptionWarning(System.Object,System.String[])">
            <summary>
                Creates a new raw critical warning for cases where user data is validated that can lead to exceptions (With
                arbitrary number of details)
            </summary>
            <param name="sender"></param>
            <param name="details"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelCacheManager">
            <summary>
                Abstract base class for all manager implementations that handle 'on demand' extended model data and cache the
                results until deprecation
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager.GetDataCopy">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager.ClearCachedData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager.JsonSerializeData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager.WriteDataContract(System.IO.Stream,System.Runtime.Serialization.DataContractSerializerSettings)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ModelCacheManager`2">
            <summary>
                Generic abstract base class for all model cache managers that support a specific extended data type through a
                specified cache data port
            </summary>
            <typeparam name="TCache"></typeparam>
            <typeparam name="TPort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelCacheManager`2.ModelProject">
            <summary>
                The project services instance to access shared services and other managers
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelCacheManager`2.Cache">
            <summary>
                The extended data object that supports a caching system
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager`2.#ctor(`0,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Create a new model cache manager for the provided model data using the provided project services
            </summary>
            <param name="modelCache"></param>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager`2.GetResultFromCache``1(System.Func{``0})">
            <summary>
                Get the data that is created by the specified creator delegate from the cache and returns the cast value
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="creatorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager`2.ClearCachedData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager`2.ClearDeprecatedCachedData">
            <summary>
                Clears only deprecated cached data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager`2.GetDataCopy">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager`2.JsonSerializeData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager`2.WriteDataContract(System.IO.Stream,System.Runtime.Serialization.DataContractSerializerSettings)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager`2.InitializeIfNotInitialized">
            <summary>
                Initializes the cache, this binds the first created instance of the cache manager to the creation methods
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelCacheManager`2.FindAndMakeCacheEntries">
            <summary>
                Searches the manager for all <see cref="T:Mocassin.Model.Basic.CacheMethodResultAttribute" /> marked methods and creates the sequence of
                <see cref="T:Mocassin.Model.Basic.ICachedObjectSource" /> provider interfaces
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelDataManager">
            <summary>
                Abstract base class for all model data manager implementations
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataManager.JsonSerializeData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataManager.WriteDataContract(System.IO.Stream,System.Runtime.Serialization.DataContractSerializerSettings)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataManager.GetDataCopy">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataManager.CreateReindexing``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Generic reindexing function that creates a cleaned reindex info that results if deprecated model data is removed
            </summary>
            <param name="modelObjects"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataManager.CreateReindexing``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
                Generic reindexing function that creates a cleaned reindex info that results if deprecated model data is removed
                (With additional list initiation size)
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="modelObjects"></param>
            <param name="listCount"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelDataManager`1">
            <summary>
                Generic base class for model data manager implementations
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelDataManager`1.Data">
            <summary>
                The model data object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataManager`1.#ctor(`0)">
            <summary>
                Creates new model data manager base with the provided data object
            </summary>
            <param name="modelData"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataManager`1.GetDataCopy">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataManager`1.JsonSerializeData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelDataManager`1.WriteDataContract(System.IO.Stream,System.Runtime.Serialization.DataContractSerializerSettings)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ModelEventManager">
            <summary>
                Abstract base class for implementations of model event managers that provide data change push notifications
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.OnManagerResets">
            <summary>
                Event provider for the subject of manager rests
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.OnExtendedDataExpiration">
            <summary>
                Event provider for the subject of expired extended data cache
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.OnManagerDisconnectRequests">
            <summary>
                Event provider for the subject of manager disconnect requests
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.OnNewModelObjects">
            <summary>
                Event provider for the subject of new model objects in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.OnRemovedModelObjects">
            <summary>
                Event provider for the subject of removed model objects in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.OnChangedModelObjects">
            <summary>
                Event provider for the subject of changed model objects in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.OnChangedModelParameters">
            <summary>
                Event provider for the subject of changed model parameters in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.OnChangedModelIndexing">
            <summary>
                Event provider for the subject of changed model object indexing in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.WhenManagerReset">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.WhenExtendedDataExpired">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.WhenManagerDisconnects">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.WhenModelObjectAdded">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.WhenModelObjectRemoved">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.WhenModelObjectChanged">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.WhenModelParameterChanged">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventManager.WhenModelIndexingChanged">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventManager.#ctor">
            <summary>
                Creates new model manager
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelInputManager">
            <summary>
                Abstract base class for all model input manager implementations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelInputManager.ParameterInputPipeline">
            <summary>
                Async object handler pipeline for parameter inputs that are always a single value and do not require indexing
                operations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelInputManager.ObjectInputPipeline">
            <summary>
                Async object handler pipeline for new model object input operations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelInputManager.ObjectReplacementPipeline">
            <summary>
                Async object handler pipeline for model object replacement operations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelInputManager.ObjectRemovalPipeline">
            <summary>
                Async object handler pipeline for model object removal operations
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.#ctor">
            <summary>
                General constructor that calls the initialization functions for the handler arrays
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.SetModelParameter``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.InputModelObject``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.RemoveModelObject``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.ReplaceModelObject``1(``0,``0)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.CleanupManager">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.ResetManager">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.TryResetManagerDataToDefault">
            <summary>
                Tries to reset the manager data to its default state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.TryCleanDeprecatedData">
            <summary>
                Tries to clean deprecate data from the manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.GetAsyncInvalidObjectHandler">
            <summary>
                Get the async handler that is called if processing of model inputs in the pipelines fails because the manager does
                not support the type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.GetAsyncInvalidParameterHandler">
            <summary>
                Get the async handler that is called if processing of model parameters in the pipeline fails because the manager
                does no support the type
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.MakeAsyncObjectInputProcessors">
            <summary>
                Identify all non public functions that are marked as data operation methods of new object inputs and create the
                processor list for the pipeline
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.MakeAsyncObjectReplacementProcessors">
            <summary>
                Identify all non public functions that are marked as data operation methods of model object replacements and create
                the processor list for the pipeline
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.MakeAsyncObjectRemovalProcessors">
            <summary>
                Identify all non public functions that are marked as data operation methods of new object inputs and create the
                processor list for pipeline
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.MakeAsyncParameterChangeProcessors">
            <summary>
                Identify all non public functions that are marked as data operation methods of new object inputs and create the
                processor list for pipeline
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.GetSupportedModelObjects">
            <summary>
                Get the types of all model objects that are supported by this manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.GetSupportedModelParameters">
            <summary>
                Get the types of all model parameters that are supported by this manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.GetSupportedModelTypes">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.GetDataReader">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager.MakeAsyncDataOperationProcessors(Mocassin.Model.Basic.DataOperationType)">
            <summary>
                Searches the input manager for all non public methods marked as data operations of the specified type and creates
                a sequence of object processors
            </summary>
            <param name="operationType"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelInputManager`3">
            <summary>
                Generic base class for all model data input managers that use specific data, read only data access port and event
                manager to distribute changes
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TPort"></typeparam>
            <typeparam name="TEventManager"></typeparam>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelInputManager`3.DataOperation`1">
            <summary>
                Defines a generic delegate for data operations with specific return value
            </summary>
            <param name="dataAccess"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelInputManager`3.DataOperation">
            <summary>
                Defines a delegate for data operations with no return value
            </summary>
            <param name="dataAccess"></param>
            <param name="report"></param>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelInputManager`3.DataAccessorSource">
            <summary>
                Provider for safe accessors to the data object
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelInputManager`3.DataReaderSource">
            <summary>
                Provider for read only accessors to the data object that use the read only specified data port
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelInputManager`3.EventManager">
            <summary>
                Event manager that handles the distribution of data changes to subscribers
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelInputManager`3.ModelProject">
            <summary>
                Access to the project service that offers messaging service, numeric services and input validations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelInputManager`3.ConflictHandlerProvider">
            <summary>
                Conflict resolver provider interface that provides conflict resolving solutions for model objects and parameters
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.#ctor(`0,`2,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates a new model input manager from data object, event manager and project services
            </summary>
            <param name="modelData"></param>
            <param name="eventManager"></param>
            <param name="project"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.GetDataReader">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.TryResetManagerDataToDefault">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.InvokeDataOperation``1(System.String,Mocassin.Model.Basic.ModelInputManager{`0,`1,`2}.DataOperation{``0},System.Action{``0})">
            <summary>
                Performs a data access query on the manager while using the required locking mechanisms and calling an on success
                action which handles the returned object
            </summary>
            <param name="name"></param>
            <param name="accessQuery"></param>
            <param name="onSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.InvokeDataOperation(System.String,Mocassin.Model.Basic.ModelInputManager{`0,`1,`2}.DataOperation,System.Action)">
            <summary>
                Performs a void data access query on the manager while using the required locking mechanisms and calling an on
                success action without arguments
            </summary>
            <param name="name"></param>
            <param name="accessQuery"></param>
            <param name="onSuccess"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.WriteToModelObjectList``1(``0,System.Collections.Generic.IList{``0})">
            <summary>
                Takes a previously created, linked and validated model object and inputs it into the passed mode object list (Auto
                assigns an index)
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="newObj"></param>
            <param name="objData"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.DeprecateModelObject``1(Mocassin.Model.Basic.IModelObject,System.Collections.Generic.IList{``0},System.Int32[])">
            <summary>
                Deprecates model object in a data list, returns false if the object was already deprecated. With optional
                restricted index list
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="obj"></param>
            <param name="objData"></param>
            <param name="restricted"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.RepopulateOrRestoreOriginal``1(``0,``0,System.Boolean)">
            <summary>
                Populates the original object with new data or restores the non-deprecated status
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="orgObject"></param>
            <param name="replaceObject"></param>
            <param name="replace"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.CleanAndReindexModelObjects``1(System.Collections.Generic.IList{``0})">
            <summary>
                Takes a list of model objects, cleans all deprecated entries, re-indexes all and returns the reindexing information
                (Returns empty reindexing if nothing was removed)
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="objData"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.ReplaceModelParameter``2(``1,``0)">
            <summary>
                Sets a new model parameter value by populating the original one with the new information
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="orgParam"></param>
            <param name="newParam"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.DefaultSetModelParameter``2(``0,System.Func{Mocassin.Model.Basic.DataAccessor{`0},``1},System.Boolean)">
            <summary>
                Performs the default model parameter change operation with or without extended data invalidation (Validation,
                conflict resolving and event distribution)
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="newParam"></param>
            <param name="paramAccessQuery"></param>
            <param name="invalidatesCache"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.DefaultRegisterModelObject``2(``0,System.Func{Mocassin.Model.Basic.DataAccessor{`0},System.Collections.Generic.IList{``1}})">
            <summary>
                Executes the default register operation for a new model object through a data access query (Validation, slot
                assignment and event distribution)
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="obj"></param>
            <param name="dataAccessQuery"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.DefaultRemoveModelObject``2(``0,System.Func{Mocassin.Model.Basic.DataAccessor{`0},System.Collections.Generic.IList{``1}},System.Int32[])">
            <summary>
                Executes the default removal operation of a model object (Deprecate object, distribute event)
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="obj"></param>
            <param name="dataAccessQuery"></param>
            <param name="restrictedIndices"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.DefaultReplaceModelObject``2(``0,``0,System.Func{Mocassin.Model.Basic.DataAccessor{`0},System.Collections.Generic.IList{``1}})">
            <summary>
                Executes the default model object replacement operation (Deprecate original, validate new, restore original or set
                new and distribute event)
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="newObj"></param>
            <param name="dataAccessQuery"></param>
            <param name="orgObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.DefaultCleanDeprecatedData">
            <summary>
                Executes the default reflection based clean deprecated data operation for indexed model data (Lookup data, remove
                deprecated and distribute reindexing lists)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.CreateDataConflictHandlerProvider">
            <summary>
                Virtual method to get the conflict resolver for the implementing manager (Default is an empty pipeline resolver
                that does not contain any handlers)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.GetIndexedDataProperties">
            <summary>
                Searches the data type for all properties that are marked as indexed object data lists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.GetIndexedDataLists(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},Mocassin.Model.Basic.DataAccessor{`0})">
            <summary>
                Takes a sequence of property info for index-able data lists and create the sequence of list interfaces to the model
                object lists
            </summary>
            <param name="propertyInfo"></param>
            <param name="accessor"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.MakeModelIndexingEventArgs(System.Reflection.PropertyInfo,Mocassin.Model.Basic.ReindexingList)">
            <summary>
                Creates a reindexing event argument from a property info and reindexing list
            </summary>
            <param name="info"></param>
            <param name="reindexing"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.GetSupportedModelObjects">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.GetSupportedModelParameters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.TryBuildAndLinkInternalModelObject``1(Mocassin.Model.Basic.IModelObject,``0@,System.String@)">
            <summary>
                Tries to build and link an internal <see cref="T:Mocassin.Model.Basic.ModelObject" /> from the passed <see cref="T:Mocassin.Model.Basic.IModelObject" />
                interface
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="modelObject"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelInputManager`3.TryBuildAndLinkInternalModelParameter``1(Mocassin.Model.Basic.IModelParameter,``0@,System.String@)">
            <summary>
                Tries to build and link an internal <see cref="T:Mocassin.Model.Basic.ModelParameter" /> from the passed <see cref="T:Mocassin.Model.Basic.IModelParameter" />
                interface
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="modelObject"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelQueryManager">
            <summary>
                Abstract base class for implementations of query managers
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelQueryManager`2">
            <summary>
                Generic base class for model query manager implementations that support read only queries to reference data
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TPort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelQueryManager`2.DataReaderSource">
            <summary>
                Reader provider that provides safe data readers for the particle data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`2.#ctor(`0,Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Creates a new query manager from the provided data object and data locker
            </summary>
            <param name="modelData"></param>
            <param name="lockSource"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`2.Query(System.Action{`1})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`2.Query``1(System.Func{`1,``0})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`2.AsyncQuery(System.Action{`1})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`2.AsyncQuery``1(System.Func{`1,``0})">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ModelQueryManager`4">
            <summary>
                Generic base class for model query manager implementations that support read only queries to both reference data and
                extended cached data
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TDataPort"></typeparam>
            <typeparam name="TDataCache"></typeparam>
            <typeparam name="TCachePort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelQueryManager`4.CacheReaderSource">
            <summary>
                Reader provider that provides safe data readers for the particle data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`4.#ctor(`0,`2,Mocassin.Model.Basic.AccessLockSource)">
            <summary>
                Creates a new query manager from the provided data objects and data locker
            </summary>
            <param name="modelData"></param>
            <param name="modelCacheModel"></param>
            <param name="lockSource"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`4.Query(System.Action{`3})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`4.Query``1(System.Func{`3,``0})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`4.AsyncQuery(System.Action{`3})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelQueryManager`4.AsyncQuery``1(System.Func{`3,``0})">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ModelUpdateManager">
            <summary>
                Abstract base class for all update managers that handle updates through event port subscriptions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelUpdateManager.Connections">
            <summary>
                Connection dictionary that stores event port subscription disposables by event port
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelUpdateManager.ConnectionPipeline">
            <summary>
                Pipeline that handles the processing of new port connections and returns unsubscribe disposables
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager.Connect(Mocassin.Model.Basic.IModelEventPort)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager.Disconnect(Mocassin.Model.Basic.IModelEventPort)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager.DisconnectAll">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager.MakeConnectionProcessors">
            <summary>
                Searches the update manager for marked connection functions and builds the objects processors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager.GetUpdateHandlingPropertiesAndCreateConnectionDictionary">
            <summary>
                Searches the class for all properties that are marked as update handlers and returns them sorted by the type of
                marked event port. Adds all entries to the connection dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager.MakeBundleSubscriber(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},System.Type)">
            <summary>
                Takes the property infos that handle one type of event port subscription and create the multi-subscription object
                processor through a subscription package creator
            </summary>
            <param name="propertyInfos"></param>
            <param name="eventSourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager.GetOnCannotProcessConnection">
            <summary>
                Get the empty processor handler that always returns a null disposables as reaction to not required connection requests
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelUpdateManager`2">
            <summary>
                Generic abstract base class for implementations of model update managers that handle specific data objects and
                distribute update followups through a specific event manager
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TEventManager"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelUpdateManager`2.ModelProject">
            <summary>
                Shared project services interface
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelUpdateManager`2.EventManager">
            <summary>
                Structure event manager instances to notify dependent modules of critical changes due to the update process
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelUpdateManager`2.DataAccessorSource">
            <summary>
                Provider for safe data accessors to the reference data object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager`2.#ctor(`0,`1,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new update manager for the provided base data, event manager and project services
            </summary>
            <param name="modelData"></param>
            <param name="eventManager"></param>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager`2.InitializeUpdateHandlers">
            <summary>
                Searches and initializes all marked update handler properties
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelUpdateManager`2.InitializeEventHandlingSystem">
            <summary>
                Initializes the event handling system (Event handlers, connection pipelines, ...)
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.DataConflictHandler`2">
            <summary>
                Abstract generic base class for data conflict resolver implementations that support automated pipeline generation
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.DataConflictHandler`2.ModelProject">
            <summary>
                Access to the current project service instance
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataConflictHandler`2.ResolverPipeline">
            <summary>
                The conflict resolver break pipeline that processes the resolve requests
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandler`2.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new data conflict resolver that uses the provided project services
            </summary>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandler`2.ResolveConflicts(`1,Mocassin.Model.Basic.IDataAccessor{`0})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandler`2.CreateResolverProcessors">
            <summary>
                Searches the data conflict resolver for all marked methods and creates the resolver processors for the pipeline
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandler`2.CreateOnCannotProcessProcessor">
            <summary>
                Creates the processor that is called if the end of the pipeline is reached (Default reaction is to return empty OK
                resolver report)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.DataConflictHandlerDummy`2">
            <summary>
                Represents a dummy conflict resolver that does nothing except returning an empty resolver report
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandlerDummy`2.ResolveConflicts(`1,Mocassin.Model.Basic.IDataAccessor{`0})">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.IDataConflictHandler`2">
            <summary>
                Represents a data conflict resolver that handles internal data conflicts within a manager that are induces by
                direct input to the manager
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.IDataConflictHandler`2.ResolveConflicts(`1,Mocassin.Model.Basic.IDataAccessor{`0})">
            <summary>
                Takes the source of a potential conflict as an object and a data accessor instance to the data to resolve potential
                conflicts
            </summary>
            <param name="source"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IDataConflictHandlerProvider`1">
            <summary>
                Represents a conflict resolver provider that offers resolvers for manager intern data updating induced by changes
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IDataConflictHandlerProvider`1.NewModelObjectHandler">
            <summary>
                The handler access for newly added model objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IDataConflictHandlerProvider`1.ChangedModelObjectsHandler">
            <summary>
                The handler access for changed existing model objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IDataConflictHandlerProvider`1.ReindexedModelObjectsHandler">
            <summary>
                The handler access for reindexing of existing model object lists
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IDataConflictHandlerProvider`1.RemovedModelObjectsHandler">
            <summary>
                The handler access for removed existing model objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IDataConflictHandlerProvider`1.ChangedModelParameterHandler">
            <summary>
                The handler access for changed model parameter objects
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.ObjectConflictHandler`2">
            <summary>
                Abstract base class for disposable conflict resolver logic implementation that handle a specific object change
            </summary>
            <typeparam name="TObject"></typeparam>
            <typeparam name="TDataObject"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ObjectConflictHandler`2.DataAccess">
            <summary>
                The data accessor providing safe access to the model data object
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ObjectConflictHandler`2.ModelProject">
            <summary>
                The current project service instance to access all project functionality and data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectConflictHandler`2.#ctor(Mocassin.Model.Basic.IDataAccessor{`1},Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new object conflict handler that uses the provided data access and project services
            </summary>
            <param name="dataAccessor"></param>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectConflictHandler`2.HandleConflicts(`0)">
            <summary>
                Determine required changes due to provided object in the given context and update the internal management model
                data system
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectConflictHandler`2.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.DataConflictHandlerProvider`1">
            <summary>
                Abstract base class for the implementation of specific data conflict resolvers
            </summary>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.DataConflictHandlerProvider`1.ModelProject">
            <summary>
                Interface access to the project services
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataConflictHandlerProvider`1.NewModelObjectHandler">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.DataConflictHandlerProvider`1.ChangedModelObjectsHandler">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.DataConflictHandlerProvider`1.RemovedModelObjectsHandler">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.DataConflictHandlerProvider`1.ReindexedModelObjectsHandler">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.DataConflictHandlerProvider`1.ChangedModelParameterHandler">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandlerProvider`1.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Create new data conflict resolver provider with access to the provided project services
            </summary>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandlerProvider`1.InitializeConflictResolvers">
            <summary>
                Searches the class for all conflict resolver creation methods and assigns them to their affiliated property.
                Assigns empty resolvers if no creation method is specified
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandlerProvider`1.AutoAssignResolver(System.Reflection.PropertyInfo)">
            <summary>
                Auto assigns a matching resolver (Or assigns a dummy if no resolver source is found in the source methods) to the
                property described by the passed property info
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandlerProvider`1.MakeEmptyResolver(System.Reflection.PropertyInfo)">
            <summary>
                Takes a property info that belongs to a data conflict resolver interface and creates a dummy handler (No resolving
                required) matching the generic arguments
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.DataConflictHandlerProvider`1.FindResolverSourceMethod(System.Reflection.PropertyInfo)">
            <summary>
                Finds the method that is marked as a resolver source for the passed resolver property info and returns a delegate
                for it. Returns null if none is found
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.EventPortSubscriber`1">
            <summary>
                Represents a bundle event port subscriber that groups event subscriptions together for a single event port
            </summary>
            <typeparam name="T1"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.EventPortSubscriber`1.SubscriptionDelegates">
            <summary>
                The list of subscription delegates
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.EventPortSubscriber`1.#ctor(System.Collections.Generic.IEnumerable{System.Delegate})">
            <summary>
                Creates new bundle subscription from delegates. Throws if one of the delegates if of wrong type
            </summary>
            <param name="delegates"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.EventPortSubscriber`1.InvokeSubscription(`0)">
            <summary>
                Performs the event subscriptions and returns a disposable collection to unsubscribe all subscriptions at once
            </summary>
            <param name="eventPort"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ModelEventHandler`3">
            <summary>
                Abstract base class for all model data event handler that handle event based updating through processing pipelines
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventHandler`3.IsConnected">
            <summary>
                Flag that indicates if the event handler is connected to a port
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventHandler`3.EventSubscription">
            <summary>
                Disposable that contains the unsubscription information for the connected event
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventHandler`3.HandlerPipeline">
            <summary>
                Pipeline that processes the event arguments and invokes affiliated reactions. Returns resolver report about the
                handling
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventHandler`3.LastReport">
            <summary>
                Contains the last report generated due to a pipeline invocation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventHandler`3.ModelProject">
            <summary>
                Access to the manager collections project services
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventHandler`3.DataAccessorSource">
            <summary>
                Accessor provider for the full data access
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelEventHandler`3.EventManager">
            <summary>
                Access to the event manager used for
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventHandler`3.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{`1},`2)">
            <summary>
                Creates new update event handler that uses the provided projects services data accessor provider and event manager
            </summary>
            <param name="modelProject"></param>
            <param name="dataAccessorSource"></param>
            <param name="eventManager"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventHandler`3.Connect(`0)">
            <summary>
                Connects to a model event port and subscribes the updating functions the the appropriate events. Returns a
                disposable to terminate the connection
            </summary>
            <param name="eventPort"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventHandler`3.Disconnect">
            <summary>
                Disconnects from the event port by disposing and null-out the subscription collection
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventHandler`3.SubscribeToEvent(`0)">
            <summary>
                Abstract method that defines which event the handler pipeline connects to and what should be done
            </summary>
            <param name="eventPort"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventHandler`3.ProcessEvent(System.EventArgs)">
            <summary>
                Defines the basic process event reaction that invokes the pipeline and collects the resolver report
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventHandler`3.CreatePipeline">
            <summary>
                Builds the handler pipeline by searching the handler implementation for handling methods
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventHandler`3.GetObjectProcessors">
            <summary>
                Get the object processor list by searching the handler for marked methods and creating a set of object processors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventHandler`3.GetCannotProcessProcessor">
            <summary>
                Get the on cannot process processor, this usually simply returns a no-resolving required report
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelEventHandler`3.DummyHandleEvent(System.Object)">
            <summary>
                Default dummy reaction for model events
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ObjectAddedEventHandler`3">
            <summary>
                Abstract base class for event handlers that handle object additions provided by the specfified event port
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectAddedEventHandler`3.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{`1},`2)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectAddedEventHandler`3.SubscribeToEvent(`0)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ObjectChangedEventHandler`3">
            <summary>
                Abstract base class for event handlers that handle object replacements provided by the specfified event port
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectChangedEventHandler`3.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{`1},`2)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectChangedEventHandler`3.SubscribeToEvent(`0)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ObjectIndexingChangedEventHandler`3">
            <summary>
                Abstract base class for event handlers that handle object list reindex operations provided by the specified event
                port
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectIndexingChangedEventHandler`3.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{`1},`2)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectIndexingChangedEventHandler`3.SubscribeToEvent(`0)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ObjectRemovedEventHandler`3">
            <summary>
            Abstract base class for event handlers that handle object removals provided by the specfified event port
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectRemovedEventHandler`3.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{`1},`2)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ObjectRemovedEventHandler`3.SubscribeToEvent(`0)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ParameterChangedEventHandler`3">
            <summary>
                Abstract base class for event handlers that handle parameter replacements provided by the specfified event port
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.ParameterChangedEventHandler`3.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{`1},`2)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ParameterChangedEventHandler`3.SubscribeToEvent(`0)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ModelManager">
            <inheritdoc />
            <remarks> Abstract base class for all model manager implementations </remarks>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.EventPort">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.InputPort">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.ModelProject">
            <summary>
                Project services instance that is shared between all model managers of a simulation project and offers various
                services e.g. validations, numeric comparer etc.
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.UpdateManagerBase">
            <summary>
                Internal access to update manager base class (Cast to actual manager only in generic/polymorphic usage scenarios!)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.EventManagerBase">
            <summary>
                Internal access to event manager base class (Cast to actual manager only in generic/polymorphic usage scenarios!)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.DataManagerBase">
            <summary>
                Internal access to data manager base class (Cast to actual manager only in generic/polymorphic usage scenarios!)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.CacheManagerBase">
            <summary>
                Internal access to cached data manager base class (Cast to actual manager only in generic/polymorphic usage
                scenarios!)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.QueryManagerBase">
            <summary>
                Internal access to query manager base class (Cast to actual manager only in generic/polymorphic usage scenarios!)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.InputManagerBase">
            <summary>
                Internal access to input manager base class (Cast to actual manager only in generic/polymorphic usage scenarios!)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.ModelDataBase">
            <summary>
                Internal access to data object base class (Cast to actual object only in generic/polymorphic usage scenarios!)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager.DataCacheBase">
            <summary>
                Internal access to extended data object base class (Cast to actual object only in generic/polymorphic usage
                scenarios!)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelManager.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new model manager that uses the provided project services and automatically registers to it
            </summary>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ModelManager.DisconnectManager">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelManager.CreateValidationService(Mocassin.Model.ModelProject.ProjectSettings)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelManager.GetManagerInterfaceType">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelManager.TryConnectManager(Mocassin.Model.Basic.IModelEventPort)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Basic.ModelManager`8">
            <summary>
                Full generic abstract base class for model managers that support the default property structure with the default
                relations of relevant components
                (Inherit to directly create a fully functional component manager with default construction and component linking)
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TCache"></typeparam>
            <typeparam name="TDataMan"></typeparam>
            <typeparam name="TCacheMan"></typeparam>
            <typeparam name="TInputMan"></typeparam>
            <typeparam name="TQueryMan"></typeparam>
            <typeparam name="TEventMan"></typeparam>
            <typeparam name="TUpdateMan"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.ModelData">
            <summary>
                The manager reference data object. Contains all data required for full model description
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.ModelCache">
            <summary>
                The manager cache data object. Contains extended data that is calculated on demand from the data object
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.DataManager">
            <summary>
                The manager data manager that provides save access to the reference data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.CacheManager">
            <summary>
                The manager cache manager that provides access to on demand data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.InputManager">
            <summary>
                The manager input manager that handles all modeling requests from external sources
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.QueryManager">
            <summary>
                The manager query manager that handles all data queries to the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.EventManager">
            <summary>
                The manager event manager that provides all subscriptions to internal changes
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.UpdateManager">
            <summary>
                The update manager that handles all reactions to incoming events from other managers or external sources
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.UpdateManagerBase">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.EventManagerBase">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.DataManagerBase">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.CacheManagerBase">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.QueryManagerBase">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.InputManagerBase">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.ModelDataBase">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ModelManager`8.DataCacheBase">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelManager`8.#ctor(Mocassin.Model.ModelProject.IModelProject,`0)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ModelManager`8.Initialize(`0)">
            <summary>
                Performs the initialization of the manager with the provided data object and project service (Default reflective
                initialization)
            </summary>
            <param name="baseData"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.DataValidator`3">
            <summary>
                Generic abstract base class for implementations of validators for a specific data type that need access to project
                service, a settings object and data through a reader object
            </summary>
            <typeparam name="TObject"></typeparam>
            <typeparam name="TSetting"></typeparam>
            <typeparam name="TDataPort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.DataValidator`3.ModelProject">
            <summary>
                Access to the project services
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataValidator`3.Settings">
            <summary>
                Access to the settings object for basic constraints
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.DataValidator`3.DataReader">
            <summary>
                Data reader to access the existing data for conflict evaluation
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.DataValidator`3.#ctor(Mocassin.Model.ModelProject.IModelProject,`1,Mocassin.Model.Basic.IDataReader{`2})">
            <summary>
                Creates new data validator that used the provided project services, settings object and data reader
            </summary>
            <param name="modelProject"></param>
            <param name="settings"></param>
            <param name="dataReader"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataValidator`3.Validate(`0)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.DataValidator`3.AddGenericContentEqualityValidation``1(``0,``0,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Performs a content equality check for model parameters that implement the equatable interface and adds a general
                result to the validation report
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="first"></param>
            <param name="second"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.DataValidator`3.AddGenericObjectDuplicateValidation``1(``0,System.Collections.Generic.IEnumerable{``0},Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the model object is unique in terms of existing data through the IEquatable interface implementation
                of the model object and adds the results to the validation report
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="obj"></param>
            <param name="existingData"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.ValidationService`1">
            <summary>
                Abstract base class for all implementations of services that perform validations for a specific data port based
                upon a synchronous data processing pipeline
            </summary>
            <typeparam name="TPort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.ValidationService`1.DataPortType">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Basic.ValidationService`1.ModelProject">
            <summary>
                Link to parent project services
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ValidationService`1.ParameterPipeline">
            <summary>
                The synchronous validation pipeline for model parameters that cannot
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.ValidationService`1.ObjectPipeline">
            <summary>
                The synchronous validation pipeline for model objects that have potential conflicts with existing data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.TryValidate``1(``0,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Basic.IModelDataPort},Mocassin.Framework.Operations.IValidationReport@)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.CanValidate``1(``0,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Basic.IModelDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new validation service, initializes the validation pipeline with the handlers defined in the implementing
                class
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.ValidateObject``1(``0,Mocassin.Model.Basic.IDataReader{`0})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.ValidateAlias``1(``0)">
            <summary>
            Validates the alias of the passed model object for uniqueness and 
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.ValidateParameter``1(``0,Mocassin.Model.Basic.IDataReader{`0})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.MakeCannotValidateProcessor">
            <summary>
                Get the handler for cases where the processing pipeline is passed a model object it cannot handle
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.ValidateModelParameterContentEquality``1(``0,``0,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the original model parameter object is not equal in content to the provided model parameter
                interface
            </summary>
            <param name="original"></param>
            <param name="replacement"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.ValidateModelObjectUniqueness``1(``0,System.Collections.Generic.IEnumerable{``0},Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the model object is unique in terms of existing data through the IEquatable interface implementation
                of the model object
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="obj"></param>
            <param name="existingData"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.MakeObjectValidationProcessors">
            <summary>
                Get the list of validation handlers for model objects defined by the implementing validation service
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.MakeParameterValidationProcessors">
            <summary>
                Get the list of validation handlers for model parameters defined by the implementing validation service
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.ValidationService`1.MakeValidationProcessors(Mocassin.Model.Basic.ValidationType)">
            <summary>
                Searches the validation service for all non-public members marked as validation functions of the specified type and
                creates a processor sequence
            </summary>
            <param name="validationType"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelCachePort">
            <summary>
                General base interface for all model data cache port interfaces
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelCachePort.ClearCachedData">
            <summary>
                Clears all cached data objects causing them to be recalculated on the next data access
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelDataPort">
            <summary>
                General base interface for all model data port interfaces
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelDataPort.JsonSerializeData">
            <summary>
                Serializes the data into the JSON format
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelDataPort.WriteDataContract(System.IO.Stream,System.Runtime.Serialization.DataContractSerializerSettings)">
            <summary>
                Serialize the data as a data contract with the specified settings to the provided stream
            </summary>
            <param name="stream"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelDataPort.GetDataCopy">
            <summary>
                Creates a copy of the internal data by json serialization and deserialization
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelEventPort">
            <summary>
                General base interface for all model notification port interfaces that provide at least a notification when a
                manager is cleared
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelEventPort.WhenManagerReset">
            <summary>
                Push notifier that informs about a complete clear of the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelEventPort.WhenExtendedDataExpired">
            <summary>
                Push notifier that informs about expired cached data in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelEventPort.WhenManagerDisconnects">
            <summary>
                Push notifier that informs about a disconnection request to the manager (Subscribers should do nothing else that
                dispose their subscriptions to the event port)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelEventPort.WhenModelObjectAdded">
            <summary>
                Push notifier about newly added model objects to the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelEventPort.WhenModelObjectRemoved">
            <summary>
                Push notifier about model object removals in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelEventPort.WhenModelObjectChanged">
            <summary>
                Push notifier about model object changes in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelEventPort.WhenModelParameterChanged">
            <summary>
                Push notifier about model parameter changes in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelEventPort.WhenModelIndexingChanged">
            <summary>
                Push notifier about model object reindexing in the manager
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelInputPort">
            <summary>
                General base interface for all model object input port interfaces
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelInputPort.SetModelParameter``1(``0)">
            <summary>
                Sets a unique model parameter of the manager if it passes validation
            </summary>
            <typeparam name="TParameter"></typeparam>
            <param name="modelParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelInputPort.InputModelObject``1(``0)">
            <summary>
                Adds a new model object to the manager if the manager can cast the object to an accepted type and the new object
                passes validation
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelInputPort.RemoveModelObject``1(``0)">
            <summary>
                ARemoves a model object from the manager if it supports the object by using the model object index
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelInputPort.ReplaceModelObject``1(``0,``0)">
            <summary>
                Replaces a  new model object in the manager by a new one if the manager can cast the object to an accepted type and
                the new object passes validation
            </summary>
            <param name="original"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelInputPort.ResetManager">
            <summary>
                Clears all data of the manager. This action restores the mint condition of the data object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelInputPort.CleanupManager">
            <summary>
                Cleans the manager from deprecated data. This action causes a full ID reassignment and potentially causes
                a full recalculation of all model data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelInputPort.GetSupportedModelTypes">
            <summary>
                Get an enumerable off all supported input model objects and parameters of this input manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelInputPort.GetDataReader">
            <summary>
                Get a <see cref="T:Mocassin.Model.Basic.IDataReader`1" /> interface for the managed <see cref="T:Mocassin.Model.Basic.ModelData" /> object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelQueryPort">
            <summary>
                Base interface for all model query ports
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelQueryPort`1">
            <summary>
                Generic base interface for all model query port interfaces that support at least delegate based custom data access
                queries and provision of safe data reader interfaces
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelQueryPort`1.Query(System.Action{`0})">
            <summary>
                Performs a read only data query using the specified data port that does not return a value
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelQueryPort`1.AsyncQuery(System.Action{`0})">
            <summary>
                Performs a read only async data query using the specified data port that does not return a value
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelQueryPort`1.Query``1(System.Func{`0,``0})">
            <summary>
                Performs a read only data query using the specified data port that does return a value
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelQueryPort`1.AsyncQuery``1(System.Func{`0,``0})">
            <summary>
                Performs a read only async data query using the specified data port that does return a value
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelUpdatePort">
            <summary>
                Common interface for all model update ports
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelUpdatePort.DisconnectAll">
            <summary>
                Disconnects from all known event ports ad returns number of disconnected ports
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelUpdatePort.Connect(Mocassin.Model.Basic.IModelEventPort)">
            <summary>
                Connects to an event port. Returns false if the connection failed due to an already existing connection
            </summary>
            <param name="eventPort"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelUpdatePort.Disconnect(Mocassin.Model.Basic.IModelEventPort)">
            <summary>
                Disconnects from event port if this specific port exists
            </summary>
            <param name="eventPort"></param>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelManager">
            <summary>
                Represents a mocassin model manager that handles a specific part of the model process
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelManager.EventPort">
            <summary>
                Get the event port interface for this manager (General interface)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelManager.InputPort">
            <summary>
                Get the input port for this manager (General interface)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelManager.CreateValidationService(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Makes a new validation service for this manager from the project settings data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelManager.DisconnectManager">
            <summary>
                Disconnects the manager from all linked manager ports to prepare for deletion or move operation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelManager.TryConnectManager(Mocassin.Model.Basic.IModelEventPort)">
            <summary>
                Tries to connect manager to an event port. Returns false if failed
            </summary>
            <param name="eventPort"></param>
        </member>
        <member name="M:Mocassin.Model.Basic.IModelManager.GetManagerInterfaceType">
            <summary>
                Get the interface type of the manager
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IModelManager`3">
            <summary>
                Generic model manager interface that supplies input, event and query port for requests to the manager
            </summary>
            <typeparam name="TInputPort"></typeparam>
            <typeparam name="TEventPort"></typeparam>
            <typeparam name="TQueryPort"></typeparam>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelManager`3.InputPort">
            <summary>
                The manager input port to add, remove or replace model data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelManager`3.QueryPort">
            <summary>
                The manager data query port for read only access to model or extended data in the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IModelManager`3.EventPort">
            <summary>
                The manager event port that provides push notifications about internal changes to the model data or the manager
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.IDataValidator`1">
            <summary>
                Represent a data validator for the specified type that offers a validation function which creates a validation
                report
            </summary>
            <typeparam name="TObject"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.IDataValidator`1.Validate(`0)">
            <summary>
                Validates the object and creates a validation report containing the validation results
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IValidationService">
            <summary>
                Represents a validation service for model parameters and objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.IValidationService.DataPortType">
            <summary>
                Get the data port type this validation service uses for conflict determination with existing data
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IValidationService.TryValidate``1(``0,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Basic.IModelDataPort},Mocassin.Framework.Operations.IValidationReport@)">
            <summary>
                Tries to validate a generic object using the passed <see cref="T:Mocassin.Model.Basic.IDataReader`1" />
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="dataReader"></param>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IValidationService.CanValidate``1(``0,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Basic.IModelDataPort})">
            <summary>
                Check if the passed combination of object and <see cref="T:Mocassin.Model.Basic.IDataReader`1" /> can be used
                for a validation
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.IValidationService`1">
            <summary>
                Represents a validation service for a specific data port that handles model object validation requests
            </summary>
            <typeparam name="TDataPort"></typeparam>
        </member>
        <member name="M:Mocassin.Model.Basic.IValidationService`1.ValidateObject``1(``0,Mocassin.Model.Basic.IDataReader{`0})">
            <summary>
                Validates model object in terms of conflicts with general limitations and potential conflicts with existing data
                accessible by the data reader
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="obj"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Basic.IValidationService`1.ValidateParameter``1(``0,Mocassin.Model.Basic.IDataReader{`0})">
            <summary>
                Validates a model parameters in terms of conflicts with general limitations or dependent existing parameters
            </summary>
            <typeparam name="TParameter"></typeparam>
            <param name="obj"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Basic.ReferenceCorrectionLevel">
            <summary>
                Defines the level of reference correction for properties marked with <see cref="T:Mocassin.Model.Basic.UseTrackedDataAttribute"/>
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.ReferenceCorrectionLevel.Full">
            <summary>
                Defines a full correction where also the property or list content itself is replaced if required
            </summary>
        </member>
        <member name="F:Mocassin.Model.Basic.ReferenceCorrectionLevel.IgnoreTopLevel">
            <summary>
                Defines a content only correction where the property or list content itself is not replaced, only the properties on these instances
            </summary>
        </member>
        <member name="T:Mocassin.Model.Basic.UseTrackedDataAttribute">
            <summary>
                Marks a property (Single object or IList of objects) as a data reference that should be index/key resolved into
                the known reference by the model data tracker
            </summary>
        </member>
        <member name="P:Mocassin.Model.Basic.UseTrackedDataAttribute.ReferenceCorrectionLevel">
            <summary>
                Flags that marks the performed level of resolving (Default: Property itself is resolvable or implements non-generic
                IList)
            </summary>
        </member>
        <member name="T:Mocassin.Model.DataManagement.IModelManagerFactory">
            <summary>
                Represents a model manager factory to create a new model manager and its affiliated basic data object
            </summary>
        </member>
        <member name="P:Mocassin.Model.DataManagement.IModelManagerFactory.ManagerType">
            <summary>
                Get the type of the manager that will be created
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelManagerFactory.CreateNew(Mocassin.Model.ModelProject.IModelProject,System.Object@)">
            <summary>
                Create a new manager with the provided project service and provides the used data object as an out parameter
            </summary>
            <param name="modelProject"></param>
            <param name="dataObject"></param>
            <remarks> Implementations should never call the register function on the model project manually </remarks>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelManagerFactory.GetInputParameterTypes">
            <summary>
                Get the list of model parameters types that the created manager will support
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelManagerFactory.GetInputObjectTypes">
            <summary>
                Get the list of model object types that the created manager will support
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.DataManagement.ModelManagerFactoryBase">
            <summary>
                Abstract base class for model manager factories that use the default model manager base class system
            </summary>
        </member>
        <member name="P:Mocassin.Model.DataManagement.ModelManagerFactoryBase.ManagerType">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.DataManagement.ModelManagerFactoryBase.DataObjectType">
            <summary>
                Get the type of the model data object that the manager uses
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelManagerFactoryBase.#ctor(System.Type)">
            <summary>
                Creates new model manager factory that supports the provided manager type
            </summary>
            <param name="managerType"></param>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelManagerFactoryBase.CreateNew(Mocassin.Model.ModelProject.IModelProject,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelManagerFactoryBase.GetInputParameterTypes">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelManagerFactoryBase.GetInputObjectTypes">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelManagerFactoryBase.GetDataObjectType(System.Type)">
            <summary>
                Determines the type of the data object that the manager uses
            </summary>
            <param name="managerType"></param>
            <exception cref="T:System.InvalidOperationException">If the type hierarchy does not implement the generic model manager basis</exception>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelManagerFactoryBase.GetBaseTypes(System.Type)">
            <summary>
                Returns the sequence of base types of the passed type in inheritance order
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.DataManagement.ModelProjectFactory">
            <summary>
                Static factory class that provides methods to build new <see cref="T:Mocassin.Model.ModelProject.IModelProject" />
            </summary>
        </member>
        <member name="P:Mocassin.Model.DataManagement.ModelProjectFactory.DefaultManagerFactories">
            <summary>
                Get a <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /> of all default <see cref="T:Mocassin.Model.DataManagement.IModelManagerFactory" /> instances
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelProjectFactory.#cctor">
            <summary>
                Static constructor that searches the assembly for all manager factories
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelProjectFactory.Create(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Creates an <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> interface that provides the default set of components and custom settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelProjectFactory.CreateDefault">
            <summary>
                Creates an <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> interface that provides the default set of components and default settings
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.DataManagement.EnergyManagerFactory">
            <summary>
                Factory for new energy manager systems
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.EnergyManagerFactory.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.EnergyManagerFactory.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.EnergyManagerFactory.CreateNew(Mocassin.Model.ModelProject.IModelProject,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.DataManagement.LatticeManagerFactory">
            <summary>
                Factory for new lattice manager systems
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.LatticeManagerFactory.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.LatticeManagerFactory.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.LatticeManagerFactory.CreateNew(Mocassin.Model.ModelProject.IModelProject,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.DataManagement.ParticleManagerFactory">
            <summary>
                Factory for new particle manager systems
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ParticleManagerFactory.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ParticleManagerFactory.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ParticleManagerFactory.CreateNew(Mocassin.Model.ModelProject.IModelProject,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.DataManagement.SimulationManagerFactory">
            <summary>
                Factory for new simulation manager systems
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.SimulationManagerFactory.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.SimulationManagerFactory.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.SimulationManagerFactory.CreateNew(Mocassin.Model.ModelProject.IModelProject,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.DataManagement.StructureManagerFactory">
            <summary>
                Factory for new structure manager systems
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.StructureManagerFactory.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.StructureManagerFactory.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.StructureManagerFactory.CreateNew(Mocassin.Model.ModelProject.IModelProject,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.DataManagement.TransitionManagerFactory">
            <summary>
                Factory for new transition manager systems
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.TransitionManagerFactory.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.TransitionManagerFactory.#ctor(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.TransitionManagerFactory.CreateNew(Mocassin.Model.ModelProject.IModelProject,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.DataManagement.IModelDataTracker">
            <summary>
                Represents a model data tracker that handles the reference tracking of <see cref="T:Mocassin.Model.Basic.ModelData" /> and indexed
                <see cref="T:Mocassin.Model.Basic.IModelObject" /> data
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelDataTracker.CreateAndRegister(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.DataManagement.IModelManagerFactory)">
            <summary>
                Performs  manager creation defined the passed factory, registers the manager with the model project and tracks
                the generated model data object
            </summary>
            <param name="modelProject"></param>
            <param name="managerFactory"></param>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelDataTracker.LinkModelObject(System.Object)">
            <summary>
                Replaces all marked foreign data references in the passed model data object by the ones known by the tracker
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelDataTracker.TryLinkModelObject(System.Object)">
            <summary>
                Tries to replace all marked foreign data references in the passed model data object by the ones known by the
                tracker
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelDataTracker.FindObjectByIndex``1(System.Int32)">
            <summary>
                Lookup the internal model object that can be assigned to the specified type that has the given index
            </summary>
            <param name="index"></param>
            <returns>The found model object or null if none was found</returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelDataTracker.FindObjectByKey``1(System.String)">
            <summary>
                Lookup the internal model object that can be assigned to the specified type that has the given key
            </summary>
            <typeparam name="TObject"></typeparam>
            <param name="key"></param>
            <returns>The found model object or null if none was found</returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelDataTracker.EnumerateObjects``1">
            <summary>
                Enumerates the internal model objects of requested type
            </summary>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.IModelDataTracker.ObjectCount``1">
            <summary>
                Get the number of <see cref="T:Mocassin.Model.Basic.IModelObject" /> of specified type known by the data tracker
            </summary>
            <typeparam name="TObject"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.DataManagement.ModelDataTracker">
            <inheritdoc />
        </member>
        <member name="F:Mocassin.Model.DataManagement.ModelDataTracker._objectLinkerDictionary">
            <summary>
                The object liker dictionary that contains cached linking delegates for known model data objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.DataManagement.ModelDataTracker.ModelDataDictionary">
            <summary>
                The data object dictionary that stores the data object reference and affiliated manager as key value pairs
            </summary>
        </member>
        <member name="P:Mocassin.Model.DataManagement.ModelDataTracker.ModelObjectDictionary">
            <summary>
                Lookup dictionary for model objects that assigns each type of model manager a dictionary of read only collections
                containing the model objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.#ctor">
            <summary>
                Creates new model data tracker with empty dictionary initializations
            </summary>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.CreateAndRegister(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.DataManagement.IModelManagerFactory)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.FindObjectByIndex``1(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.FindObjectByKey``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.EnumerateObjects``1">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.ObjectCount``1">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.LinkModelObject(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.TryLinkModelObject(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.FindObjectList(System.Type)">
            <summary>
                Finds the object lookup list that belongs to or if no direct match is found the list with objects directly
                assignable from the passed type
            </summary>
            <param name="type"></param>
            <returns>The matching list or if none is found an empty container</returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.UpdateObjectLookupDictionary(System.Object)">
            <summary>
                Updates the dictionary entries for the provided manager type with the provided data object
            </summary>
            <param name="dataObject"></param>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.MakeLinker(System.Type,System.Object)">
            <summary>
                Creates a linking delegate for the provided object type based upon the model data reference attribute
            </summary>
            <param name="objectType"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.LinkContent(System.Object)">
            <summary>
                Handles a property value that is marked as content linkable depending on it being a single value or a list of
                content linkable objects
            </summary>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.MakeLinkDelegate(System.Reflection.PropertyInfo)">
            <summary>
                Determines the type of the linkable property based upon the info is a collection type or single type. Only works if
                the collection implements only one indexed parameter
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.MakeObjectProviderDelegate(System.Type)">
            <summary>
                Creates a delegate to find a model object of a specific type by its index or key
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.MakeListLinkerDelegate(System.Reflection.PropertyInfo,System.Func{Mocassin.Model.Basic.IModelObject,System.Object})">
            <summary>
                Makes a delegate for a property that is a list interface of model objects (Has to implement non-generic list
                interface)
            </summary>
            <param name="info"></param>
            <param name="objectProviderFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.MakeLinkDelegate(System.Reflection.PropertyInfo,System.Func{Mocassin.Model.Basic.IModelObject,System.Object})">
            <summary>
                Makes a delegate for a model object property that contains a single object link
            </summary>
            <param name="info"></param>
            <param name="objectProviderFunction"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.DataManagement.ModelDataTracker.RecreateLookupDictionary(System.Runtime.Serialization.StreamingContext)">
            <summary>
                Recreation method for the lookup dictionary after the data tracker is deserialized
            </summary>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Mocassin.Model.Energies.IEnergyManager">
            <summary>
                Represents a manager for model energies and related modeling parameters and objects
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.IEnergyCachePort">
            <summary>
                Represents an access port for on-demand extended energy data that is automatically cached
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetPairInteractionFinder">
            <summary>
                Get a pair interaction finder that can be used to search the currently linked structure system for symmetric and
                asymmetric interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetPositionGroupInfos">
            <summary>
                Get the position group information for all defined group interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetPositionGroupInfo(System.Int32)">
            <summary>
                Get the position group info that belongs to the interaction group at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetPositionPairInteractions">
            <summary>
                Get a read only dictionary that assigns each unit cell position its set of defined pair interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetPositionGroupInteractions">
            <summary>
                Get a read only dictionary that assigns each unit cell position its set of defined group interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetEnergySetterProvider">
            <summary>
                Get an energy setter provider that has the value constraints set to their project settings defined values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetStablePairEnergySetters">
            <summary>
                Get a read only list of all stable pair interaction energy setters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetStablePairEnergySetter(System.Int32)">
            <summary>
                Get the stable pair interaction energy setter for the interaction at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetUnstablePairEnergySetters">
            <summary>
                Get a read only list of all unstable pair interaction energy setters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetUnstablePairEnergySetter(System.Int32)">
            <summary>
                Get the unstable pair interaction energy setter for the interaction at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetGroupEnergySetters">
            <summary>
                Get a read only list of all energy setters for group interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyCachePort.GetGroupEnergySetter(System.Int32)">
            <summary>
                Get the group interaction energy setter for the group interaction at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.IEnergyDataPort">
            <summary>
                Represents a read only data access port for the energy reference data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetStableEnvironmentInfo">
            <summary>
                Get the stable environment info parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetStablePairInteractions">
            <summary>
                Get a read only list of all stable pair infos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetStablePairInteraction(System.Int32)">
            <summary>
                Get the stable pair info at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetUnstablePairInteractions">
            <summary>
                GEt a read only list of all unstable pair interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetUnstablePairInteractions(System.Int32)">
            <summary>
                Get the unstable pair interactions at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetGroupInteractions">
            <summary>
                Get a read only list of all existing group interaction definitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetGroupInteraction(System.Int32)">
            <summary>
                Get the group interaction ath the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetUnstableEnvironments">
            <summary>
                Get a read only list of all unstable environment infos
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetUnstableEnvironment(System.Int32)">
            <summary>
                Get the unstable environment info at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetUnstableEnvironment(Mocassin.Model.Structures.ICellReferencePosition)">
            <summary>
                Get the unstable environment that belongs to the passed unit cell position. Returns null if it does not exist
            </summary>
            <param name="cellReferencePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergyDataPort.GetEnergySetterProvider(Mocassin.Model.ModelProject.ProjectSettings,Mocassin.Model.Energies.IEnergyQueryPort)">
            <summary>
                Get an <see cref="T:Mocassin.Model.Energies.IEnergySetterProvider" /> for all interactions that conforms to the passed
                <see cref="T:Mocassin.Model.ModelProject.ProjectSettings" /> and uses the provided <see cref="T:Mocassin.Model.Energies.IEnergyQueryPort"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.IEnergyEventPort">
            <summary>
                Represents an event port for energy manager related push based notification events
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.IEnergyInputPort">
            <summary>
                Represents an input port for model energies
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.IEnergyQueryPort">
            <summary>
                Represents a query port for query based access to the reference and extended energies data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.IEnergyUpdatePort">
            <summary>
                Represents and update port for registering of dependent event ports
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyCacheManager">
            <inheritdoc cref="T:Mocassin.Model.Energies.IEnergyCachePort" />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.#ctor(Mocassin.Model.Energies.EnergyModelCache,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetPairInteractionFinder">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetPositionGroupInfo(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetPositionPairInteractions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetPositionGroupInteractions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetPositionGroupInfos">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetEnergySetterProvider">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetStablePairEnergySetters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetStablePairEnergySetter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetUnstablePairEnergySetters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetUnstablePairEnergySetter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetGroupEnergySetters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.GetGroupEnergySetter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.CreateStablePairEnergySetters">
            <summary>
                Pulls energy setter provider from data manager and creates all energy setters for stable pair interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.CreateUnstablePairEnergySetters">
            <summary>
                Pulls energy setter provider from data manager and creates all energy setters for unstable pair interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.CreateGroupEnergySetters">
            <summary>
                Pulls energy setter provider from data manager and creates all energy setters for group interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.CreateEnergySetterProvider">
            <summary>
                Pulls energy setter provider from data and sets the value constraints according to the project service settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.CreatePairInteractionFinder">
            <summary>
                Creates the pair interaction finder for the currently linked structure definition and space group service
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.CreateAllPositionGroupInfos">
            <summary>
                Creates the position group information for all group interactions that are not marked as deprecated. Deprecated
                ones are null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.CreatePositionPairInteractions">
            <summary>
                Creates a dictionary that assigns each unit cell position its set of defined pair interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.AssignPairInteractionsToPosition``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
                Assigns a set of pair interactions to their unit cell positions. Asymmetric pairs are assigned to their first
                position only
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyCacheManager.CreatePositionGroupInteractions">
            <summary>
                Creates a dictionary that assigns each unit cell position its set of defined group interactions
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyDataManager">
            <summary>
                Energy data manager that provides safe read only access to the energy base model data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.#ctor(Mocassin.Model.Energies.EnergyModelData)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetStableEnvironmentInfo">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetGroupInteraction(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetGroupInteractions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetStablePairInteraction(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetStablePairInteractions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetUnstableEnvironment(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetUnstableEnvironment(Mocassin.Model.Structures.ICellReferencePosition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetUnstableEnvironments">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetUnstablePairInteractions(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetUnstablePairInteractions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyDataManager.GetEnergySetterProvider(Mocassin.Model.ModelProject.ProjectSettings,Mocassin.Model.Energies.IEnergyQueryPort)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyEventManager">
            <summary>
                Basic transitions notification manager that handles distribution of push based update notifications about changes
                in the transition manager base data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyInputManager">
            <summary>
                Basic implementation of the energy input manager that handles validated adding, removal and replacement of energy
                base data by an outside source
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.#ctor(Mocassin.Model.Energies.EnergyModelData,Mocassin.Model.Energies.EnergyEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.TryRegisterNewStableGroupInfo(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Registers a new stable group info object with the manager if it passes validation (Awaits distribution of
                affiliated events in case of operation success)
            </summary>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.TryReplaceStableGroupInfo(Mocassin.Model.Energies.IGroupInteraction,Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Replaces an existing stable group info with a new one if it passes validation (Awaits distribution of affiliated
                events in case of operation success)
            </summary>
            <param name="orgObject"></param>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.TryRemoveStableGroupInfo(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Removes an existing stable group info by deprecating it within the indexed list (Awaits distribution of affiliated
                events in case of operation success)
            </summary>
            <param name="orgObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.TryRegisterNewUnstableEnvironmentInfo(Mocassin.Model.Energies.IUnstableEnvironment)">
            <summary>
                Registers a new unstable environment info object with the manager if it passes validation (Awaits distribution of
                affiliated events in case of operation success)
            </summary>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.TryReplaceUnstableEnvironmentInfo(Mocassin.Model.Energies.IUnstableEnvironment,Mocassin.Model.Energies.IUnstableEnvironment)">
            <summary>
                Replaces an existing unstable environment info with a new one if it passes validation (Awaits distribution of
                affiliated events in case of operation success)
            </summary>
            <param name="orgObject"></param>
            <param name="newObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.TryRemoveUnstableEnvironmentInfo(Mocassin.Model.Energies.IUnstableEnvironment)">
            <summary>
                Removes an existing unstable environment info by deprecating it within the indexed list (Awaits distribution of
                affiliated events in case of operation success)
            </summary>
            <param name="orgObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.TrySetEnvironmentInformation(Mocassin.Model.Energies.IStableEnvironmentInfo)">
            <summary>
                Replaces the currently set environment info parameter if the new one passes validation (Awaits distribution of
                affiliated events in case of operation success)
            </summary>
            <param name="newParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.CreateDataConflictHandlerProvider">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyInputManager.TryCleanDeprecatedData">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyQueryManager">
            <summary>
                Basic implementation of the energy query manager that handles safe data queries and service requests to the energy
                manager from outside sources
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyQueryManager.#ctor(Mocassin.Model.Energies.EnergyModelData,Mocassin.Model.Energies.EnergyModelCache,Mocassin.Model.Basic.AccessLockSource)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyUpdateManager">
            <summary>
                Basic update manager for the energy module that handles pushed information on data changes in required modules
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyUpdateManager.TransitionObjectAddedEventHandler">
            <summary>
                Pipeline based handler for added model objects in the connected transition manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyUpdateManager.TransitionObjectChangedEventHandler">
            <summary>
                Pipeline based handler for changed model objects in the connected transition manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyUpdateManager.TransitionObjectRemovedEventHandler">
            <summary>
                Pipeline based handler for removed model objects in the connected transition manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyUpdateManager.TransitionObjectIndexingChangedHandler">
            <summary>
                Pipeline based handler for reindexing of model object lists in the connected transition manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyUpdateManager.#ctor(Mocassin.Model.Energies.EnergyModelData,Mocassin.Model.Energies.EnergyEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.ConflictHandling.EnergyObjectAddedHandler">
            <summary>
                Energy object added handler that handles data updates and conflict resolving due to newly added model objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyObjectAddedHandler.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyObjectAddedHandler.HandleObjectChange(Mocassin.Model.Energies.UnstableEnvironment,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Energies.EnergyModelData})">
            <summary>
                Resolves conflicts and data changes if an unstable environment is added. The passed object has to be the changed
                model object.
            </summary>
            <param name="envInfo"></param>
            <param name="dataAccess"></param>
            <returns></returns>
            <remarks> This method uses the same handler as the analog object change handler as the action is identical </remarks>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyObjectAddedHandler.HandleObjectChange(Mocassin.Model.Energies.GroupInteraction,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Energies.EnergyModelData})">
            <summary>
                Resolves conflicts and data changes if a group interaction is added. The passed object has to be the changed model
                object.
            </summary>
            <param name="groupInteraction"></param>
            <param name="dataAccess"></param>
            <returns></returns>
            <remarks> This method uses the same handler as the analog object change handler as the action is identical </remarks>
        </member>
        <member name="T:Mocassin.Model.Energies.ConflictHandling.EnergyObjectChangeHandler">
            <summary>
                Energy object change handler that handles data changes and conflict resolving for changed energy model objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyObjectChangeHandler.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyObjectChangeHandler.HandleObjectChange(Mocassin.Model.Energies.UnstableEnvironment,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Energies.EnergyModelData})">
            <summary>
                Resolves conflicts and data changes if an unstable environment changes. The passed object represents the changed
                model object
            </summary>
            <param name="envInfo"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyObjectChangeHandler.HandleObjectChange(Mocassin.Model.Energies.GroupInteraction,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Energies.EnergyModelData})">
            <summary>
                Resolves conflicts and data changes if a group interaction is added. The passed object has to be the changed model
                object.
            </summary>
            <param name="groupInteraction"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.ConflictHandling.EnergyParameterChangeHandler">
            <summary>
                Conflict handler for parameter change induced conflicts within the energy manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyParameterChangeHandler.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyParameterChangeHandler.HandleParameterChange(Mocassin.Model.Energies.StableEnvironmentInfo,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Energies.EnergyModelData})">
            <summary>
                Resolver method that handles the required internal changes if the stabel environment info changes
            </summary>
            <param name="info"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.ConflictHandling.GroupInteractionChangeHandler">
            <summary>
            Object conflict handler for changes in group interaction objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.GroupInteractionChangeHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Energies.EnergyModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.GroupInteractionChangeHandler.HandleConflicts(Mocassin.Model.Energies.GroupInteraction)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.GroupInteractionChangeHandler.UpdateGroupEnergyDictionary(Mocassin.Model.Energies.GroupInteraction,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Updates the energy dictionary of the group interaction and tries to salvage old energy information
            </summary>
            <param name="group"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.GroupInteractionChangeHandler.LinkToUnstableEnvironment(Mocassin.Model.Energies.GroupInteraction,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Links the group interaction to the affiliated unstable environment if not already in its linking list
            </summary>
            <param name="group"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.GroupInteractionChangeHandler.SalvageAndUpdateEnergyDictionarySet(Mocassin.Model.Energies.GroupInteraction,Mocassin.Model.Energies.ExtendedPositionGroup,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Updates the energy information and salvages potential matches from the original dictionary (Salvaging is currently
                not supported)
            </summary>
            <param name="group"></param>
            <param name="extGroup"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Energies.ConflictHandling.StableEnvironmentInfoChangeHandler">
            <summary>
                Conflict resolver for a change in the stable environment info parameter within the energy manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.StableEnvironmentInfoChangeHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Energies.EnergyModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.StableEnvironmentInfoChangeHandler.HandleConflicts(Mocassin.Model.Energies.StableEnvironmentInfo)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.StableEnvironmentInfoChangeHandler.UpdatePairInteractionModel(Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Updates the pair interaction model to the new set of pair interactions and inputs them into the model data object
            </summary>
            <param name="info"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.StableEnvironmentInfoChangeHandler.PullEnergyInfoFromOldModel(System.Collections.Generic.IList{Mocassin.Model.Energies.SymmetricPairInteraction},System.Collections.Generic.IList{Mocassin.Model.Energies.SymmetricPairInteraction},Mocassin.Framework.Operations.ConflictReport,Mocassin.Mathematics.Comparer.NumericComparer)">
            <summary>
                Finds all interactions that are equivalent in the new model and corrects the energy dictionaries to the ones of the
                old model list
            </summary>
            <param name="oldPairs"></param>
            <param name="newPairs"></param>
            <param name="report"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.StableEnvironmentInfoChangeHandler.MoveNewPairsToModelList(System.Collections.Generic.IList{Mocassin.Model.Energies.SymmetricPairInteraction},System.Collections.Generic.IList{Mocassin.Model.Energies.SymmetricPairInteraction},Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Deletes the old model list and inputs the new pairs into the old model list without changing the actual list in the
                model object
            </summary>
            <param name="oldPairs"></param>
            <param name="newPairs"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.StableEnvironmentInfoChangeHandler.IsEquivalentInteraction(Mocassin.Model.Energies.SymmetricPairInteraction,Mocassin.Model.Energies.SymmetricPairInteraction,Mocassin.Mathematics.Comparer.VectorComparer3D{Mocassin.Mathematics.ValueTypes.Fractional3D})">
            <summary>
                Checks if two pair interactions are equivalent in terms of symmetry. This function uses the fact that the radial
                search routine always results
                in the same reference pair interaction as long as the structure is not changed and only works as long as this
                statement is true
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.StableEnvironmentInfoChangeHandler.GetNewPairInteractions(Mocassin.Model.Energies.IStableEnvironmentInfo)">
            <summary>
                Calculates the new set of pair interactions with the provided project services and new stable environment info
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.StableEnvironmentInfoChangeHandler.UpdateGroupInteractions(Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Updates possible conflicts with the group interaction definitions (Currently just sets all stable group definitions
                to deprecated)
            </summary>
            <param name="report"></param>
            <param name="info"></param>
        </member>
        <member name="T:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler">
            <summary>
                Unstable environment change handler that updates the mismatching information if an unstable environment is changed
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Energies.EnergyModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler.HandleConflicts(Mocassin.Model.Energies.UnstableEnvironment)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler.UpdatePairInteractions(Mocassin.Model.Energies.UnstableEnvironment,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Updates the asymmetric pair interaction pool with new or removed interactions and re-links them within the unstable
                environment info
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler.UpdateInteractionIndexing(Mocassin.Model.Energies.UnstableEnvironment,System.Collections.Generic.IList{Mocassin.Model.Energies.AsymmetricPairInteraction})">
            <summary>
                Takes the list of pair interactions (New or reused) and updates the existing model data list with the information.
                This filters out any interaction
            </summary>
            <param name="envInfo"></param>
            <param name="newPairs"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler.UpdateEnvironmentLinking(Mocassin.Model.Energies.UnstableEnvironment,System.Collections.Generic.IList{Mocassin.Model.Energies.AsymmetricPairInteraction},Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Takes all the new and reused pair interactions and replaces the content of the environment pair interaction linking
                list with the new values
            </summary>
            <param name="envInfo"></param>
            <param name="usedPairs"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler.GetNewAsymmetricPairs(Mocassin.Model.Energies.IUnstableEnvironment,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Get the new asymmetric pair interactions that result from the passed unstable environment
            </summary>
            <param name="envInfo"></param>
            <param name="modelProject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler.IsEquivalentInteraction(Mocassin.Model.Energies.IAsymmetricPairInteraction,Mocassin.Model.Energies.IAsymmetricPairInteraction,Mocassin.Mathematics.Comparer.VectorComparer3D{Mocassin.Mathematics.ValueTypes.Fractional3D})">
            <summary>
                Checks if two pair interactions are identical by abusing the fact that the pair interaction finder results in
                exactly the same reference pair interaction as long as the structure definition does not change
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler.GetInteractionComparer">
            <summary>
                Makes an asymmetric pair interaction comparer that sorts by unit cell position index and target vector
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.UnstableEnvironmentChangeHandler.UpdateGroupInteractions(Mocassin.Model.Energies.UnstableEnvironment,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Updates all group interactions affiliated with this unstable environment
                (Currently just deprecates all affiliated group interactions and clears environment group interaction list)
            </summary>
            <param name="environment"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Energies.ConflictHandling.EnergyDataConflictHandlerProvider">
            <summary>
                Resolver provider for all energy conflict resolvers that handle internal data conflicts of the particle manager.
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyDataConflictHandlerProvider.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyDataConflictHandlerProvider.CreateParameterHandler">
            <summary>
                Get the custom handler for energy parameter change data conflict resolving (Overwrites default handler in pipeline)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyDataConflictHandlerProvider.CreateObjectChangeHandler">
            <summary>
                Get the custom handler for energy object change data conflict resolving (Overwrites default handler in pipeline)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.ConflictHandling.EnergyDataConflictHandlerProvider.CreateInputChangeHandler">
            <summary>
                Get the custom handler for energy object change data conflict resolving (Overwrites default handler in pipeline)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.Handler.TransitionObjectAddedEventHandler">
            <summary>
                Event handler that manages the processing of object added events that the energy manager receives from the
                transition manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectAddedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Energies.EnergyModelData},Mocassin.Model.Energies.EnergyEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectAddedEventHandler.HandleAbstractTransition(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IAbstractTransition})">
            <summary>
                Event reaction to a change in on of the abstract transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectAddedEventHandler.HandleStateExchangePair(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IStateExchangePair})">
            <summary>
                Event reaction to a change in one of the state exchange pair objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectAddedEventHandler.HandleKineticTransition(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IKineticTransition})">
            <summary>
                Event reaction to a change in one of the kinetic transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectAddedEventHandler.HandleMetropolisStatePair(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IMetropolisTransition})">
            <summary>
                Event reaction to a change in one of the metropolis transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectAddedEventHandler.HandleStateExchangeGroup(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IStateExchangeGroup})">
            <summary>
                Event reaction to a change in one of the state exchange groups
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.Handler.TransitionObjectChangedEventHandler">
            <summary>
                Event handler that manages the processing of object change events that the energy manager receives from the
                transition manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectChangedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Energies.EnergyModelData},Mocassin.Model.Energies.EnergyEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectChangedEventHandler.HandleAbstractTransition(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IAbstractTransition})">
            <summary>
                Event reaction to a change in one of the abstract transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectChangedEventHandler.HandleStateExchangePair(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IStateExchangePair})">
            <summary>
                Event reaction to a change in one of the state exchange pair objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectChangedEventHandler.HandleKineticTransition(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IKineticTransition})">
            <summary>
                Event reaction to a change in one of the kinetic transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectChangedEventHandler.HandleMetropolisStatePair(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IMetropolisTransition})">
            <summary>
                Event reaction to a change in one of the metropolis transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectChangedEventHandler.HandleStateExchangeGroup(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IStateExchangeGroup})">
            <summary>
                Event reaction to a change in one of the state exchange groups
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.Handler.TransitionObjectIndexingChangedHandler">
            <summary>
                Event handler that manages the processing of object reindexing events that the energy manager receives from the
                transition manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectIndexingChangedHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Energies.EnergyModelData},Mocassin.Model.Energies.EnergyEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectIndexingChangedHandler.HandleAbstractTransition(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IAbstractTransition})">
            <summary>
                Event reaction to a change in one of the abstract transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectIndexingChangedHandler.HandleStateExchangePair(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IStateExchangePair})">
            <summary>
                Event reaction to a change in one of the state exchange pair objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectIndexingChangedHandler.HandleKineticTransition(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IKineticTransition})">
            <summary>
                Event reaction to a change in one of the kinetic transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectIndexingChangedHandler.HandleMetropolisStatePair(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IMetropolisTransition})">
            <summary>
                Event reaction to a change in one of the metropolis transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectIndexingChangedHandler.HandleStateExchangeGroup(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IStateExchangeGroup})">
            <summary>
                Event reaction to a change in one of the state exchange groups
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.Handler.TransitionObjectRemovedEventHandler">
            <summary>
                Event handler that manages the processing of object removal events that the energy manager receives from the
                transition manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectRemovedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Energies.EnergyModelData},Mocassin.Model.Energies.EnergyEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectRemovedEventHandler.HandleAbstractTransition(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IAbstractTransition})">
            <summary>
                Event reaction to a change in one of the abstract transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectRemovedEventHandler.HandleStateExchangePair(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IStateExchangePair})">
            <summary>
                Event reaction to a change in one of the state exchange pair objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectRemovedEventHandler.HandleKineticTransition(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IKineticTransition})">
            <summary>
                Event reaction to a change in one of the kinetic transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectRemovedEventHandler.HandleMetropolisStatePair(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IMetropolisTransition})">
            <summary>
                Event reaction to a change in one of the metropolis transition objects
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Handler.TransitionObjectRemovedEventHandler.HandleStateExchangeGroup(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Transitions.IStateExchangeGroup})">
            <summary>
                Event reaction to a removal of one of the state exchange groups
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyManager">
            <summary>
                Basic implementation of the energy manager that manages and supplies objects and parameters related to the
                energetic modeling process
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyManager.InputPort">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyManager.QueryPort">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyManager.EventPort">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyManager.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Energies.EnergyModelData)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyManager.GetManagerInterfaceType">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyManager.CreateValidationService(Mocassin.Model.ModelProject.ProjectSettings)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyModelCache">
            <summary>
            Data cache for the extended on-demand energy model data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyModelCache.#ctor(Mocassin.Model.Basic.IModelEventPort,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyModelCache.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyModelData">
            <summary>
                The reference model data object for the energy manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyModelData.StableEnvironmentInfo">
            <summary>
                The environment info parameter that describes the basic restrictions for all regular position environments
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyModelData.GroupInteractions">
            <summary>
                The list of defined group interactions that can be used in environment descriptions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyModelData.UnstableEnvironments">
            <summary>
                The list of unstable environment definitions that are defined to contain actual information and are non zero
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyModelData.StablePairInteractions">
            <summary>
                The list of pair information that describe all existing pair interactions for stable positions (Auto-managed, no
                input support)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyModelData.UnstablePairInteractions">
            <summary>
                The list of asymmetric pair interactions that describe transition pair interactions for unstable positions
                (Auto-managed, no input support)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyModelData.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyModelData.ResetToDefault">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyModelData.CreateNew">
            <summary>
                Creates a new energy model data object with default settings
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.EnergyValidationService">
            <summary>
                Validation service for energy related model objects that checks new energy related model object inputs
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergyValidationService.Settings">
            <summary>
                The basic energy settings object that defines all data constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyValidationService.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinEnergySettings)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyValidationService.ValidateStableGroupInfo(Mocassin.Model.Energies.IGroupInteraction,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Energies.IEnergyDataPort})">
            <summary>
                Validates a new stable group info in terms of content and potential conflicts with existing data that is accessed
                through the provided dada reader
            </summary>
            <param name="groupInfo"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyValidationService.ValidateUnstableEnvironmentInfo(Mocassin.Model.Energies.IUnstableEnvironment,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Energies.IEnergyDataPort})">
            <summary>
                Validates a new unstable environment info in terms of content and potential conflicts with existing data that is
                accessed through the provided data reader
            </summary>
            <param name="envInfo"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergyValidationService.ValidateEnvironmentInfo(Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Energies.IEnergyDataPort})">
            <summary>
                Validates the environment info parameter in terms of content and equality to the already existing data that is
                accessed through the provided data reader
            </summary>
            <param name="envInfo"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.Validators.GroupInteractionValidator">
            <summary>
                Data validator for group interaction definitions in terms of conflicts with existing data or restriction violations
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinEnergySettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Energies.IEnergyDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.Validate(Mocassin.Model.Energies.IGroupInteraction)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.AddDefinedPositionValidation(Mocassin.Model.Energies.IGroupInteraction,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the group is defined for a supported position type and an environment definition exists for the
                position
            </summary>
            <param name="group"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.AddContentRestrictionValidation(Mocassin.Model.Energies.IGroupInteraction,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates a group interaction in terms of conflicts with the defined content restrictions and adds the result to
                the report
            </summary>
            <param name="group"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.AddGeometricDuplicateValidation(Mocassin.Model.Energies.IGroupInteraction,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates if a symmetry equivalent group already exists in the current data and adds the result to the report
            </summary>
            <param name="group"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.AddEnvironmentConsistencyValidation(Mocassin.Model.Energies.IGroupInteraction,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the group geometry is consistent with the start positions environment description and adds the
                result to the report
            </summary>
            <param name="group"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.GetGroupPermutationCount(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Calculates the total number of permutations (not symmetry filtered, including center position) that the group
                describes
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.GetMaxGroupRange(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Finds the longest vector of the group geometry and returns the group maximum radius in internal units
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.GetGroupEnvironmentRange(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Determines which environment information belongs to the group and determines the interaction range
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.GetGroupEnvironmentPositionValidity(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Determines if a group contains any forbidden or non existing positions and returns the affiliated
                <see cref="T:Mocassin.Model.Energies.GroupGeometryValidity" />
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.GroupInteractionValidator.GetGroupAffiliatedEnvironment(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Determines which environment belongs to the group. Returns null if the environment is not yet defined or not
                supported
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.Validators.StableEnvironmentInfoValidator">
            <summary>
                Data validator for stable environment info parameters that checks for potential conflicts with constraints and
                existing data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.StableEnvironmentInfoValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinEnergySettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Energies.IEnergyDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.StableEnvironmentInfoValidator.Validate(Mocassin.Model.Energies.IStableEnvironmentInfo)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.StableEnvironmentInfoValidator.AddInteractionRangeValidation(Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the interaction range does not lead to position count violations and adds the results to the
                validation report
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.StableEnvironmentInfoValidator.AddInteractionFilterValidation(Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the interaction filters of the stable environments and adds the results to the validation report
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.StableEnvironmentInfoValidator.AddInteractionFilterUniquenessValidation(Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the interaction filter definitions of the environment are unique
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.StableEnvironmentInfoValidator.AddInteractionFilterRangeValidation(Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the interaction filter definitions of the environment have valid range definitions
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.StableEnvironmentInfoValidator.ApproximateWorstCaseInteractionCount(Mocassin.Model.Energies.IStableEnvironmentInfo)">
            <summary>
                Approximates how many interactions a radial search will produce in the worst case through the pair interaction
                density of the unit cell
            </summary>
            <param name="envInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.StableEnvironmentInfoValidator.AddDefectBackgroundValidation(Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the collection of <see cref="T:Mocassin.Model.Energies.DefectEnergy" /> energies  in the <see cref="T:Mocassin.Model.Energies.IStableEnvironmentInfo" /> and
                adds the results to the report
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Energies.Validators.UnstableEnvironmentValidator">
            <summary>
                Data validator for unstable environment objects that checks for potential conflicts with constraints and existing
                data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.UnstableEnvironmentValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinEnergySettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Energies.IEnergyDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.UnstableEnvironmentValidator.Validate(Mocassin.Model.Energies.IUnstableEnvironment)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.UnstableEnvironmentValidator.AddObjectUniquenessValidation(Mocassin.Model.Energies.IUnstableEnvironment,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the defined environment ist unique and does no already exist (Currently: Uses fact that only one
                environment per UCP is allowed)
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.UnstableEnvironmentValidator.AddContentRestrictionValidation(Mocassin.Model.Energies.IUnstableEnvironment,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the object does not violated set content restrictions and adds the results to the validation report
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.UnstableEnvironmentValidator.AddInteractionFilterValidation(Mocassin.Model.Energies.IUnstableEnvironment,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the interaction filters of the stable environments and adds the results to the validation report
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.UnstableEnvironmentValidator.AddInteractionFilterUniquenessValidation(Mocassin.Model.Energies.IUnstableEnvironment,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
            Validates that the interaction filter definitions of the environment are unique
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.UnstableEnvironmentValidator.AddInteractionFilterRangeValidation(Mocassin.Model.Energies.IUnstableEnvironment,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
            Validates that the interaction filter definitions of the environment have valid range definitions
            </summary>
            <param name="envInfo"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.Validators.UnstableEnvironmentValidator.ApproximatePairInteractionCount(Mocassin.Model.Energies.IUnstableEnvironment)">
            <summary>
                Approximates how many interactions a radial search will produce in the worst case though the pair interaction
                density of the unit cell when no filter has any effect
            </summary>
            <param name="envInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.GroupEnergySetter">
            <inheritdoc cref="T:Mocassin.Model.Energies.IGroupEnergySetter" />
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergySetter.Mocassin#Model#Energies#IGroupEnergySetter#EnergyEntries">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergySetter.Mocassin#Model#Energies#IGroupEnergySetter#GroupInteraction">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergySetter.EnergyConstraint">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergySetter.DataAccessorSource">
            <summary>
                The data accessor provider for the energy model data to create data locks
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergySetter.GroupInteraction">
            <summary>
                The wrapped group interaction that is manipulated by the setter
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergySetter.EnergyEntries">
            <summary>
                The set of known energy group entries that can be manipulated
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergySetter.EnergyQueryPort">
            <summary>
                Get the <see cref="T:Mocassin.Model.Energies.IEnergyQueryPort" /> to invalidate cached data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergySetter.#ctor(Mocassin.Model.Energies.GroupInteraction,Mocassin.Model.Energies.IEnergyQueryPort)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergySetter.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergySetter.PushData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergySetter.SetEnergyEntries(System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.GroupEnergyEntry})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergySetter.SetEnergyEntry(Mocassin.Model.Energies.GroupEnergyEntry@)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergySetter.CreateEmpty">
            <summary>
                Creates an empty group energy setter with an invalid group interaction and an empty energy entry set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergySetter.CreateEnergyEntries(Mocassin.Model.Energies.GroupInteraction)">
            <summary>
                Creates the hash set of energy entries for local manipulation from the passed group interaction
            </summary>
            <param name="groupInteraction"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.IGroupEnergySetter">
            <summary>
                Represents a group energy setter that enables save energy entry manipulation for a user defined position group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IGroupEnergySetter.EnergyEntries">
            <summary>
                Get a read only collection of all local energy entries of the setter
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IGroupEnergySetter.GroupInteraction">
            <summary>
                The group interaction the setter can manipulate
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IGroupEnergySetter.EnergyConstraint">
            <summary>
                Constraint for the energy values
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IGroupEnergySetter.SetEnergyEntry(Mocassin.Model.Energies.GroupEnergyEntry@)">
            <summary>
                Set an energy value in the local energy entry set
            </summary>
            <param name="energyEntry"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.IGroupEnergySetter.SetEnergyEntries(System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.GroupEnergyEntry})">
            <summary>
                Sets multiple energy entries in the local energy entry set
            </summary>
            <param name="energyEntries"></param>
        </member>
        <member name="T:Mocassin.Model.Energies.IPairEnergySetter">
            <summary>
                Represents a energy setter for pair interactions that enables save manipulation of the pair interaction energy
                dictionary
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairEnergySetter.EnergyEntries">
            <summary>
                Get a read only list of the current energy entries
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairEnergySetter.PairInteraction">
            <summary>
                Get access to the wrapped pair interaction that is manipulated by the setter
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairEnergySetter.EnergyConstraint">
            <summary>
                Constraint for the energy values
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IPairEnergySetter.SetEnergyValue(Mocassin.Model.Energies.PairEnergyEntry@)">
            <summary>
                Set an energy entry in the local energy list
            </summary>
            <param name="energyEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IPairEnergySetter.SetEnergyValues(System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.PairEnergyEntry})">
            <summary>
                Set multiple entries within the temporary energy entry list
            </summary>
            <param name="energyEntries"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.PairEnergySetter">
            <inheritdoc cref="T:Mocassin.Model.Energies.IPairEnergySetter"/>
        </member>
        <member name="P:Mocassin.Model.Energies.PairEnergySetter.Mocassin#Model#Energies#IPairEnergySetter#EnergyEntries">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PairEnergySetter.Mocassin#Model#Energies#IPairEnergySetter#PairInteraction">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PairEnergySetter.EnergyConstraint">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PairEnergySetter.PairInteraction">
            <summary>
                The pair interaction that is manipulated by the setter
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairEnergySetter.EnergyEntries">
            <summary>
                The local energy entry list that contains all energy entries of the pair interaction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairEnergySetter.DataAccessorSource">
            <summary>
                The energy data access provider to lock the energy data object
            </summary>
            <remarks> Used to lock the energy data object as long as the setter is writing energy values </remarks>
        </member>
        <member name="P:Mocassin.Model.Energies.PairEnergySetter.EnergyQueryPort">
            <summary>
                Get the <see cref="T:Mocassin.Model.Energies.IEnergyQueryPort" /> to invalidate cached data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.PairEnergySetter.#ctor(Mocassin.Model.Energies.PairInteraction,Mocassin.Model.Energies.IEnergyQueryPort)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairEnergySetter.PushData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairEnergySetter.SetEnergyValue(Mocassin.Model.Energies.PairEnergyEntry@)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairEnergySetter.SetEnergyValues(System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.PairEnergyEntry})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairEnergySetter.CreateEnergySet(Mocassin.Model.Energies.PairInteraction)">
            <summary>
                Create the local energy set for manipulating values before pushing them into the model
            </summary>
            <param name="pairInteraction"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.EnergySetterProvider">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.EnergySetterProvider.DataAccessorSource">
            <summary>
                The data accessor provider used to lock the data object by the setter adapters
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergySetterProvider.EnergyQueryPort">
            <summary>
                Get or set the <see cref="T:Mocassin.Model.Energies.IEnergyQueryPort" /> to invalidate cached data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.EnergySetterProvider.PairEnergyConstraint">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.EnergySetterProvider.GroupEnergyConstraint">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergySetterProvider.#ctor(Mocassin.Model.Basic.IDataAccessorSource{Mocassin.Model.Energies.EnergyModelData},Mocassin.Model.Energies.IEnergyQueryPort)">
            <summary>
                Creates new energy setter provider that uses the provided <see cref="T:Mocassin.Model.Basic.IDataAccessorSource`1" /> for data
                manipulation and <see cref="T:Mocassin.Model.Energies.IEnergyQueryPort"/> for cache invalidation
            </summary>
            <param name="dataAccessorSource"></param>
            <param name="energyQueryPort"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.EnergySetterProvider.GetStablePairEnergySetters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergySetterProvider.GetStablePairEnergySetter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergySetterProvider.GetUnstablePairEnergySetters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergySetterProvider.GetUnstablePairEnergySetter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergySetterProvider.GetGroupEnergySetters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.EnergySetterProvider.GetGroupEnergySetter(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.IEnergySetterProvider">
            <summary>
                Represents an energy setter provider that supplies the setter adapters to savely manipulate interaction energies
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IEnergySetterProvider.PairEnergyConstraint">
            <summary>
                Get or set the value constraint for the pair energies
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IEnergySetterProvider.GroupEnergyConstraint">
            <summary>
                Get or set the value constraint for the group energies
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergySetterProvider.GetStablePairEnergySetters">
            <summary>
                Get a read only list of all stable pair interaction energy setters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergySetterProvider.GetStablePairEnergySetter(System.Int32)">
            <summary>
                Get the stable pair interaction energy setter for the interaction at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergySetterProvider.GetUnstablePairEnergySetters">
            <summary>
                Get a read only list of all unstable pair interaction energy setters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergySetterProvider.GetUnstablePairEnergySetter(System.Int32)">
            <summary>
                Get the unstable pair interaction energy setter for the interaction at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergySetterProvider.GetGroupEnergySetters">
            <summary>
                Get a read only list of all energy setters for group interactions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IEnergySetterProvider.GetGroupEnergySetter(System.Int32)">
            <summary>
                Get the group interaction energy setter for the group interaction at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.GroupGeometryValidity">
            <summary>
                Enum that informs about validity of group geometry
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.GeometryGroupAnalyzer">
            <summary>
                Grouping analyzer that handles calculations and permutation generation for grouping definitions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.GeometryGroupAnalyzer.UnitCellProvider">
            <summary>
                The unit cell provider that supplies the information about the super-cell the group is located in
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.GeometryGroupAnalyzer.SpaceGroupService">
            <summary>
                The space group service that supplies the symmetry information about the unit cell
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.#ctor(Mocassin.Symmetry.Analysis.IUnitCellProvider{Mocassin.Model.Structures.ICellReferencePosition},Mocassin.Symmetry.SpaceGroups.ISpaceGroupService)">
            <summary>
                Generates new grouping analyzer that uses the passed unit cell provider and space group service for geometric
                analysis
            </summary>
            <param name="unitCellProvider"></param>
            <param name="spaceGroupService"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.CreateExtendedPositionGroup(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Creates the extended position group that results from the provided group interaction. If the interaction is
                deprecated an incomplete object is returned
            </summary>
            <param name="groupInteraction"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.CreateExtendedPositionGroups(System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.IGroupInteraction})">
            <summary>
                Creates the extended position groups for all passed group interactions. Each calculation is done in a single task
            </summary>
            <param name="groupInteractions"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.GetAllGroupPairs(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Get the enumerable sequence off all possible symmetrical pair interactions that can be found within an interaction
                group
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.GetGroupCellReferencePositions(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Get the unit cell position sequence described by a group interaction. Will contain null values if any of the fractional vector does not point to a valid position
            </summary>
            <param name="groupInteraction"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.CheckGroupGeometryValidity(Mocassin.Model.Energies.IGroupInteraction,System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.IInteractionFilter})">
            <summary>
                Determines the <see cref="T:Mocassin.Model.Energies.GroupGeometryValidity"/> of the passed <see cref="T:Mocassin.Model.Energies.IGroupInteraction"/> in the context of the passed <see cref="T:Mocassin.Model.Energies.IInteractionFilter"/> set
            </summary>
            <param name="groupInteraction"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.GetUniqueGroupOccupationStates(Mocassin.Symmetry.SpaceGroups.IPointOperationGroup,Mocassin.Mathematics.Permutation.IPermutationSource{Mocassin.Model.Particles.IParticle})">
            <summary>
                Generates all unique occupation states for the surrounding atoms of a group without permuting the center position
            </summary>
            <param name="operationGroup"></param>
            <param name="permProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.MakeFullEnergyDictionary(System.Collections.Generic.IEnumerable{Mocassin.Model.Particles.OccupationState},Mocassin.Model.Structures.ICellReferencePosition)">
            <summary>
                Takes a center position and a set of possible unique occupation states for the surroundings an creates the full
                energy dictionary for
                all existing occupation combinations of an interaction group
            </summary>
            <param name="occStates"></param>
            <param name="centerPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.GetGroupStatePermutationSource(Mocassin.Model.Energies.IGroupInteraction)">
            <summary>
                Creates a permutation provider for the positions of a interaction group
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GeometryGroupAnalyzer.GetGroupStatePermutationSource(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
            <summary>
                Creates a permutation provider for a sequence of fractional position vectors (Without center position) describing
                the group geometry
            </summary>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.IPairInteractionFinder">
            <summary>
                Represents a pair interaction finder that can search a specific system of space group service and unit cell
                provider for symmetric and asymmetric pair interactions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairInteractionFinder.SpaceGroupService">
            <summary>
                The used space group service
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairInteractionFinder.UnitCellProvider">
            <summary>
                The used unit cell provider
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IPairInteractionFinder.CreateUniqueAsymmetricPairs(System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.IUnstableEnvironment},Mocassin.Mathematics.Comparer.NumericComparer)">
            <summary>
                Create a unique set of asymmetric pair interactions that results from the passed unstable environment information.
                Comparer is used for geometric tolerance comparisons
            </summary>
            <param name="unstableEnvironments"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IPairInteractionFinder.CreateUniqueSymmetricPairs(System.Collections.Generic.IEnumerable{Mocassin.Model.Structures.ICellReferencePosition},Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Mathematics.Comparer.NumericComparer)">
            <summary>
                Searches all provided unit cell position start points for unique symmetric pair interactions that fit the
                definition within the stable environment info.
                Comparer is used for geometric tolerance comparisons
            </summary>
            <param name="positions"></param>
            <param name="environmentInfo"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.PairInteractionFinder">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PairInteractionFinder.UnitCellProvider">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PairInteractionFinder.SpaceGroupService">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.#ctor(Mocassin.Symmetry.Analysis.IUnitCellProvider{Mocassin.Model.Structures.ICellReferencePosition},Mocassin.Symmetry.SpaceGroups.ISpaceGroupService)">
            <summary>
                Create new pair interaction finder with the specified unit cell provider and space group service
            </summary>
            <param name="unitCellProvider"></param>
            <param name="spaceGroupService"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CreateUniqueSymmetricPairs(System.Collections.Generic.IEnumerable{Mocassin.Model.Structures.ICellReferencePosition},Mocassin.Model.Energies.IStableEnvironmentInfo,Mocassin.Mathematics.Comparer.NumericComparer)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.FindAndAssignChiralPartners(System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.SymmetricPairInteraction},Mocassin.Mathematics.Comparer.NumericComparer)">
            <summary>
                Fins chiral partner <see cref="T:Mocassin.Model.Energies.SymmetricPairInteraction"/> entries and assigns the affiliated property
            </summary>
            <param name="source"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CheckIsChiralPair(Mocassin.Model.Energies.SymmetricPairInteraction,Mocassin.Model.Energies.SymmetricPairInteraction)">
            <summary>
                Checks if the two provided <see cref="T:Mocassin.Model.Energies.SymmetricPairInteraction"/> entries meet the conditions to be chiral pairs
            </summary>
            <param name="first"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CreateUniqueAsymmetricPairs(System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.IUnstableEnvironment},Mocassin.Mathematics.Comparer.NumericComparer)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.MakeUniqueSymmetricPairs(System.Collections.Generic.IEnumerable{Mocassin.Model.Structures.ICellReferencePosition},Mocassin.Mathematics.Constraints.NumericConstraint)">
            <summary>
                Creates the list of unique symmetric pair interaction objects for all passed unit cell positions within the
                provided radial constraint
            </summary>
            <param name="positions"></param>
            <param name="radialConstraint"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.MakeUniqueAsymmetricPairs(System.Collections.Generic.IEnumerable{Mocassin.Model.Structures.ICellReferencePosition},Mocassin.Mathematics.Constraints.NumericConstraint)">
            <summary>
                Creates the list of unique polar pair interaction objects for all passed unit cell positions within the provided radial constraint
            </summary>
            <param name="positions"></param>
            <param name="radialConstraint"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.FilterAndReindex``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Int32)">
            <summary>
                Filters a sequence of pair interactions by the provided selector predicate and reindex the remainder starting at
                the provided index
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unfiltered"></param>
            <param name="selector"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CreateUniquePairs(System.Collections.Generic.IDictionary{System.Double,System.Collections.Generic.List{Mocassin.Model.Energies.PairCandidate}},System.Func{Mocassin.Model.Energies.PairCandidate,Mocassin.Mathematics.Permutation.IPermutationSource{Mocassin.Model.Particles.IParticle},Mocassin.Model.Energies.PairInteraction})">
            <summary>
                Takes a pair candidate dictionary and a selector function to a sequence of unique pair interactions
            </summary>
            <param name="candidateDictionary"></param>
            <param name="pairMaker"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CreateSymmetricPair(Mocassin.Model.Energies.PairCandidate,Mocassin.Mathematics.Permutation.IPermutationSource{Mocassin.Model.Particles.IParticle})">
            <summary>
                Creates new symmetric pair interaction from pair candidate and affiliated particle permutation source
            </summary>
            <param name="candidate"></param>
            <param name="particleSource"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CreateAsymmetricPair(Mocassin.Model.Energies.PairCandidate,Mocassin.Mathematics.Permutation.IPermutationSource{Mocassin.Model.Particles.IParticle})">
            <summary>
                Creates new polar pair interaction from pair candidate and affiliated particle permutation source
            </summary>
            <param name="candidate"></param>
            <param name="particleSource"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CreateUniquePairCandidateDictionary(System.Collections.Generic.IEnumerable{Mocassin.Model.Structures.ICellReferencePosition},Mocassin.Mathematics.Constraints.NumericConstraint,System.Predicate{Mocassin.Model.Structures.ICellReferencePosition},System.Boolean)">
            <summary>
                Crates and indices the list of unique pair interaction candidates for the provided position list, radial constraint and basic acceptance predicate that is sorted by their distance
            </summary>
            <param name="positions"></param>
            <param name="radialConstraint"></param>
            <param name="predicate"></param>
            <param name="skipInversionFiltering"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CreateParticlePermutationSource(Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Model.Structures.ICellReferencePosition)">
            <summary>
                Creates a particle permutation source for the two provided unit cell positions
            </summary>
            <param name="position0"></param>
            <param name="position1"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CreateCandidateDictionary(System.Collections.Generic.IEnumerable{Mocassin.Model.Structures.ICellReferencePosition},Mocassin.Mathematics.Constraints.NumericConstraint,System.Predicate{Mocassin.Model.Structures.ICellReferencePosition},System.Boolean)">
            <summary>
                Searches the set of passed positions for pair interaction within the rules of the constraint and predicate and
                returns a sorted sequence
                of the found cell entries (With optional inversion filtering)
            </summary>
            <param name="positions"></param>
            <param name="radialConstraint"></param>
            <param name="predicate"></param>
            <param name="skipInversionFiltering"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.CreateUniqueCandidateDictionary(System.Collections.Generic.SortedDictionary{System.Double,System.Collections.Generic.List{Mocassin.Model.Energies.PairCandidate}},System.Collections.Generic.IEnumerable{Mocassin.Model.Structures.ICellReferencePosition})">
            <summary>
                Filters the raw candidate dictionary for unique candidates and creates a new candidate dictionary that contains
                only these unique entries
            </summary>
            <param name="rawDictionary"></param>
            <param name="positions"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.FilterCandidatesAndAssignIndices(System.Collections.Generic.List{Mocassin.Model.Energies.PairCandidate},System.Collections.Generic.IDictionary{Mocassin.Model.Structures.ICellReferencePosition,System.Collections.Generic.IList{Mocassin.Symmetry.SpaceGroups.ISymmetryOperation}},System.Int32)">
            <summary>
                Filters a raw candidate list and assigns each new unique candidate a new interaction index
            </summary>
            <param name="rawCandidates"></param>
            <param name="operationDictionary"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.GetMultiplicityDictionary(System.Collections.Generic.IEnumerable{Mocassin.Model.Structures.ICellReferencePosition})">
            <summary>
                Creates the operation dictionary that contains the multiplicity operations for each unit cell position (With shift
                correction)
            </summary>
            <param name="positions"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.InsertPairCandidates(System.Collections.Generic.SortedDictionary{System.Double,System.Collections.Generic.List{Mocassin.Model.Energies.PairCandidate}},System.Collections.Generic.IEnumerable{Mocassin.Model.Energies.PairCandidate})">
            <summary>
                Sorts the pair candidates into their affiliated distance category in the candidate dictionary
            </summary>
            <param name="dictionary"></param>
            <param name="pairCandidates"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.MakePairCandidates(Mocassin.Model.Structures.ICellReferencePosition,System.Collections.Generic.IEnumerable{Mocassin.Symmetry.Analysis.CellEntry{Mocassin.Model.Structures.ICellReferencePosition}})">
            <summary>
                Takes a sequence of found entries around a start position and creates the sequence of possible pair interaction
                candidates
            </summary>
            <param name="start"></param>
            <param name="positions"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.GetSearchQueries(System.Collections.Generic.IEnumerable{Mocassin.Model.Structures.ICellReferencePosition},Mocassin.Mathematics.Constraints.NumericConstraint,System.Predicate{Mocassin.Model.Structures.ICellReferencePosition},System.Boolean)">
            <summary>
                Takes a set of start positions, radial search constraint and acceptance predicate and create a sequence of
                radial search queries to locate all cell entries just once (Inverse duplicates are filtered if not specified
                otherwise)
            </summary>
            <param name="starts"></param>
            <param name="constraint"></param>
            <param name="predicate"></param>
            <param name="skipInversionFiltering"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.MakeSymmetricInversionAcceptancePredicate(System.Collections.Generic.IList{Mocassin.Model.Structures.ICellReferencePosition},System.Predicate{Mocassin.Model.Structures.ICellReferencePosition},System.Int32)">
            <summary>
                Combines the original predicate and the already searched unit cell positions into a combined acceptance predicate
                that follows the symmetric stable environment acceptance criteria
            </summary>
            <param name="positions"></param>
            <param name="currentSearchIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.MakeAsymmetricAcceptancePredicate(Mocassin.Model.Energies.IUnstableEnvironment)">
            <summary>
                Takes an unstable environment and creates a predicate that follows the unstable environment asymmetric pair interaction acceptance criteria
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteractionFinder.GetSymmetricAcceptancePredicate(Mocassin.Model.Energies.IStableEnvironmentInfo)">
            <summary>
                Get the filter predicate for ignored pair interactions defined in the stable environment info
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.GroupInteraction">
            <inheritdoc cref="T:Mocassin.Model.Energies.IGroupInteraction" />
        </member>
        <member name="P:Mocassin.Model.Energies.GroupInteraction.GroupSize">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.GroupInteraction.CenterCellReferencePosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.GroupInteraction.GeometryVectors">
            <summary>
                The list of 3D fractional vectors that describe the group geometry
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.GroupInteraction.EnergyDictionarySet">
            <summary>
                The energy dictionaries for each center particle and surrounding occupation state (Auto managed by model)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.GroupInteraction.GetBaseGeometry">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.GroupInteraction.GetEnergyDictionarySet">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.GroupInteraction.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.GroupInteraction.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.GroupInteraction.TrySetEnergyEntry(Mocassin.Model.Energies.GroupEnergyEntry@)">
            <summary>
                Tries to set the passed energy entry in the energy dictionary. Returns false if the value cannot be set
            </summary>
            <param name="energyEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GroupInteraction.GetEnergyEntries">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.IGroupInteraction">
            <summary>
                Represents a group interaction to describe a more complex (No pair interaction) reference grouping around a position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IGroupInteraction.GroupSize">
            <summary>
                The size of the group (Always larger than 2, max 8)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IGroupInteraction.CenterCellReferencePosition">
            <summary>
                Get the unit cell position this grouping starts from
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IGroupInteraction.GetBaseGeometry">
            <summary>
                Get a sequence of 3D vectors that describe the base geometry of the grouping without the start position
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IGroupInteraction.GetEnergyDictionarySet">
            <summary>
                Get a read only dictionary that assigns each possible center particle an energy dictionary for the outer
                permutation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IGroupInteraction.GetEnergyEntries">
            <summary>
                Get all existing energy entries in the group interaction
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.AsymmetricPairInteraction">
            <inheritdoc cref="T:Mocassin.Model.Energies.IAsymmetricPairInteraction" />
        </member>
        <member name="P:Mocassin.Model.Energies.AsymmetricPairInteraction.EnergyDictionary">
            <summary>
                The polar pair energy dictionary that assigns each possible particle pair an energy value
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.AsymmetricPairInteraction.ChiralPartner">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricPairInteraction.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricPairInteraction.#ctor(Mocassin.Model.Energies.PairCandidate@,System.Collections.Generic.Dictionary{Mocassin.Model.Energies.AsymmetricParticlePair,System.Double})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricPairInteraction.GetEnergyDictionary">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.AsymmetricPairInteraction.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricPairInteraction.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricPairInteraction.TrySetEnergyEntry(Mocassin.Model.Energies.PairEnergyEntry@)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricPairInteraction.GetEnergyEntries">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.IAsymmetricPairInteraction">
            <summary>
                Represents an asymmetric pair interaction (directional) that carries an energy dictionary for its permutations
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IAsymmetricPairInteraction.GetEnergyDictionary">
            <summary>
                Read only access to the energy dictionary
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.IPairInteraction">
            <summary>
                Represents an unspecified pair interaction that describes the interaction between two positions depending on the
                occupation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairInteraction.Position0">
            <summary>
                The first reference unit cell position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairInteraction.Position1">
            <summary>
                The second reference unit cell position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairInteraction.Distance">
            <summary>
                The distance value between the positions in internal units
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairInteraction.IsChiral">
            <summary>
                Get a boolean flag if the interaction is chiral
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairInteraction.ChiralPartner">
            <summary>
                Get the <see cref="T:Mocassin.Model.Energies.IPairInteraction" /> that is the L or R chiral partner
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPairInteraction.SecondPositionVector">
            <summary>
                Get the actual position vector for the second unit cell position in order to describe the reference geometry of the
                pair interaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IPairInteraction.GetEnergyEntries">
            <summary>
                Get all possible pair occupations of the pair with the corresponding energy value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.PairInteraction">
            <inheritdoc cref="T:Mocassin.Model.Energies.IPairInteraction" />
        </member>
        <member name="P:Mocassin.Model.Energies.PairInteraction.Position0">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PairInteraction.Position1">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PairInteraction.SecondPositionVector">
            <summary>
                The actual position vector for the second unit cell position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairInteraction.Distance">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PairInteraction.IsChiral">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PairInteraction.ChiralPartner">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteraction.#ctor">
            <summary>
                Default constructor
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteraction.#ctor(Mocassin.Model.Energies.PairCandidate@)">
            <summary>
                Construct new pair interaction from pair candidate
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteraction.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteraction.TrySetEnergyEntry(Mocassin.Model.Energies.PairEnergyEntry@)">
            <summary>
                Tries to set the passed energy entry in the pair interaction energy dictionary. Returns false if value cannot be
                set
            </summary>
            <param name="energyEntry"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairInteraction.GetEnergyEntries">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.ISymmetricPairInteraction">
            <summary>
                Access interface for the symmetric pair interaction that allows for manipulation of the energy dictionary
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.ISymmetricPairInteraction.GetEnergyDictionary">
            <summary>
                Read only access to the energy dictionary
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.SymmetricPairInteraction">
            <inheritdoc cref="T:Mocassin.Model.Energies.ISymmetricPairInteraction" />
        </member>
        <member name="P:Mocassin.Model.Energies.SymmetricPairInteraction.EnergyDictionary">
            <summary>
                The symmetric pair energy dictionary that assigns each possible particle pair an energy value
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.SymmetricPairInteraction.ChiralPartner">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricPairInteraction.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricPairInteraction.#ctor(Mocassin.Model.Energies.PairCandidate@,System.Collections.Generic.Dictionary{Mocassin.Model.Energies.SymmetricParticlePair,System.Double})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricPairInteraction.GetEnergyDictionary">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.SymmetricPairInteraction.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricPairInteraction.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricPairInteraction.TrySetEnergyEntry(Mocassin.Model.Energies.PairEnergyEntry@)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricPairInteraction.GetEnergyEntries">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricPairInteraction.SetChiralPartner(Mocassin.Model.Energies.SymmetricPairInteraction)">
            <summary>
                Sets the chiral partner <see cref="T:Mocassin.Model.Energies.SymmetricPairInteraction" />
            </summary>
            <param name="partner"></param>
        </member>
        <member name="T:Mocassin.Model.Energies.IUnstableEnvironment">
            <summary>
                Represents an unstable environment description with pair interactions and groups that belongs to a specific unit
                cell position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IUnstableEnvironment.MaxInteractionRange">
            <summary>
                The interaction range of the environment
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IUnstableEnvironment.CellReferencePosition">
            <summary>
                The unit cell position the environment info belongs to
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IUnstableEnvironment.GetInteractionFilters">
            <summary>
                Get all interaction filters of the unstable environment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IUnstableEnvironment.GetPairInteractions">
            <summary>
                Get all pair interactions affiliated with this environment
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IUnstableEnvironment.GetGroupInteractions">
            <summary>
                Get all group interactions affiliated with this environment
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.UnstableEnvironment">
            <inheritdoc cref="T:Mocassin.Model.Energies.IUnstableEnvironment" />
        </member>
        <member name="P:Mocassin.Model.Energies.UnstableEnvironment.MaxInteractionRange">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.UnstableEnvironment.CellReferencePosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.UnstableEnvironment.InteractionFilters">
            <summary>
                The set of defined interaction filters of the unstable environment (Can be empty)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.UnstableEnvironment.PairInteractions">
            <summary>
                The list of generated pair interactions (Can be null, automatically managed and linked property, not part of object
                population)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.UnstableEnvironment.GroupInteractions">
            <summary>
                The list of generated group interactions (Can be null, automatically managed and linked property, not part of
                object
                population)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.UnstableEnvironment.#ctor">
            <summary>
                Create new unstable environment and sets all lists to empty
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.UnstableEnvironment.GetInteractionFilters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.UnstableEnvironment.GetPairInteractions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.UnstableEnvironment.GetGroupInteractions">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.UnstableEnvironment.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.UnstableEnvironment.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.IStableEnvironmentInfo">
            <summary>
                Represents a basic environment info that limits range and defines which basic pair interactions should be ignored.
                Valid for all stable environments
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IStableEnvironmentInfo.MaxInteractionRange">
            <summary>
                Get the maximum interaction range for the regular position environments (In internal units)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IStableEnvironmentInfo.GetInteractionFilters">
            <summary>
                Get all <see cref="T:Mocassin.Model.Energies.IInteractionFilter"/> defined for the stable environments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IStableEnvironmentInfo.GetDefectEnergies">
            <summary>
                Get all <see cref="T:Mocassin.Model.Energies.IDefectEnergy"/> entries for stable positions
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.StableEnvironmentInfo">
            <inheritdoc cref="T:Mocassin.Model.Energies.IStableEnvironmentInfo" />
        </member>
        <member name="P:Mocassin.Model.Energies.StableEnvironmentInfo.MaxInteractionRange">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.StableEnvironmentInfo.InteractionFilters">
            <summary>
                The list of interaction filters for stable environments
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.StableEnvironmentInfo.DefectEnergies">
            <summary>
                Get or set the list of defect energy entries
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.StableEnvironmentInfo.GetInteractionFilters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.StableEnvironmentInfo.GetDefectEnergies">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.StableEnvironmentInfo.GetParameterName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.StableEnvironmentInfo.PopulateObject(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.StableEnvironmentInfo.Equals(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.StableEnvironmentInfo.CreateDefault">
            <summary>
                Create a default environment info parameter (Range of one internal unit and no interaction filters)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.DefectEnergy">
            <summary>
                Describes a defect energy of an <see cref="T:Mocassin.Model.Particles.IParticle" /> on a specific <see cref="T:Mocassin.Model.Structures.ICellReferencePosition" />
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.DefectEnergy.Particle">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.DefectEnergy.CellReferencePosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.DefectEnergy.Energy">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.DefectEnergy.CompareTo(Mocassin.Model.Energies.IDefectEnergy)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.DefectEnergy.Equals(Mocassin.Model.Energies.IDefectEnergy)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.DefectEnergy.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.DefectEnergy.FromInterface(Mocassin.Model.Energies.IDefectEnergy)">
            <summary>
                Creates a new <see cref="T:Mocassin.Model.Energies.DefectEnergy" /> form an <see cref="T:Mocassin.Model.Energies.IDefectEnergy" /> interface
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.IDefectEnergy">
            <summary>
                General interface for describing defect energies of position and particle combinations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IDefectEnergy.CellReferencePosition">
            <summary>
                Get the <see cref="T:Mocassin.Model.Structures.ICellReferencePosition" /> the defect belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IDefectEnergy.Particle">
            <summary>
                Get the <see cref="T:Mocassin.Model.Particles.IParticle" /> that describes the defect
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IDefectEnergy.Energy">
            <summary>
                Get the energy value affiliated with the defect in [eV]
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.GroupEnergyEntry">
            <summary>
                Represents a group energy entry that is fully described by center particle, a surrounding occupation state and an
                energy value
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergyEntry.CenterParticle">
            <summary>
                The center particle of the group energy entry
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergyEntry.GroupOccupation">
            <summary>
                The occupation state of the surrounding positions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.GroupEnergyEntry.Energy">
            <summary>
                The energy value affiliated with the group entry
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergyEntry.#ctor(Mocassin.Model.Particles.IParticle,Mocassin.Model.Particles.IOccupationState,System.Double)">
            <summary>
                Create new group energy entry from center particle, surrounding occupation and energy value
            </summary>
            <param name="centerParticle"></param>
            <param name="groupOccupation"></param>
            <param name="energy"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergyEntry.ChangeEnergy(System.Double)">
            <summary>
                Creates a new group energy entry with the same identifier info but a changed energy value
            </summary>
            <param name="energy"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergyEntry.GetHashCode">
            <summary>
                Get a hash code for the identifier system of the group energy entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergyEntry.Equals(Mocassin.Model.Energies.GroupEnergyEntry)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergyEntry.CompareTo(Mocassin.Model.Energies.GroupEnergyEntry)">
            <summary>
                Compares to other energy entry in order of particle, than occupation
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.GroupEnergyEntry.CreateReordered(System.Collections.Generic.IList{System.Int32})">
            <summary>
                Creates a group energy entry with reordered state code
            </summary>
            <param name="newOrder"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.PairEnergyEntry">
            <summary>
                Pair energy entry that carries a particle pair and an affiliated energy value
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairEnergyEntry.ParticlePair">
            <summary>
                The particle pair that identifies the energy entry
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairEnergyEntry.Energy">
            <summary>
                The energy value of the pair entry
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.PairEnergyEntry.#ctor(Mocassin.Model.Energies.ParticlePair,System.Double)">
            <summary>
                Creates new pair energy entry from particle pair and energy value
            </summary>
            <param name="particlePair"></param>
            <param name="energyValue"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.PairEnergyEntry.GetHashCode">
            <summary>
                Get the hash code of the pair energy entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.PairEnergyEntry.Equals(Mocassin.Model.Energies.PairEnergyEntry)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PairEnergyEntry.ChangeEnergy(System.Double)">
            <summary>
                Creates new pair energy entry with the same particle pair but a new energy value
            </summary>
            <param name="energyValue"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.AsymmetricInteractionFilter">
            <summary>
                Asymmetric pair interaction filter to customize ignored interaction in <see cref="T:Mocassin.Model.Energies.IPairInteractionFinder" /> search
                routines of asymmetric interactions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.AsymmetricInteractionFilter.CenterCellReferencePosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.AsymmetricInteractionFilter.PartnerCellReferencePosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.AsymmetricInteractionFilter.StartRadius">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.AsymmetricInteractionFilter.EndRadius">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricInteractionFilter.IsApplicable(System.Double,Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Model.Structures.ICellReferencePosition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricInteractionFilter.IsApplicable(Mocassin.Model.Energies.IPairInteraction)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricInteractionFilter.IsEqualFilter(Mocassin.Model.Energies.IInteractionFilter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricInteractionFilter.Equals(Mocassin.Model.Energies.AsymmetricInteractionFilter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricInteractionFilter.FromInterface(Mocassin.Model.Energies.IInteractionFilter)">
            <summary>
                Creates new interaction filter that matches the passed filter interface
            </summary>
            <param name="interactionFilter"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.IInteractionFilter">
            <summary>
                General interface for interaction filters used to customize interaction filtering during pair interaction searches
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IInteractionFilter.CenterCellReferencePosition">
            <summary>
                Get the unit cell position of the center
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IInteractionFilter.PartnerCellReferencePosition">
            <summary>
                Get the unit cell position of the partner
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IInteractionFilter.StartRadius">
            <summary>
                Get  the start radius for the filter
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IInteractionFilter.EndRadius">
            <summary>
                Get the end radius for the filter
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IInteractionFilter.IsApplicable(System.Double,Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Model.Structures.ICellReferencePosition)">
            <summary>
                Check if the passed interaction properties fall within the constraints of the interaction filter
            </summary>
            <param name="distance"></param>
            <param name="centerCellReferencePosition"></param>
            <param name="partnerCellReferencePosition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IInteractionFilter.IsApplicable(Mocassin.Model.Energies.IPairInteraction)">
            <summary>
            Check if the passed pair interaction falls within the constraints of the interaction filter
            </summary>
            <param name="pairInteraction"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.IInteractionFilter.IsEqualFilter(Mocassin.Model.Energies.IInteractionFilter)">
            <summary>
                Check if the filter behaves equally to another filter interface
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.SymmetricInteractionFilter">
            <summary>
                Asymmetric pair interaction filter to customize ignored interaction in <see cref="T:Mocassin.Model.Energies.IPairInteractionFinder" /> search
                routines of asymmetric interactions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.SymmetricInteractionFilter.CenterCellReferencePosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.SymmetricInteractionFilter.PartnerCellReferencePosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.SymmetricInteractionFilter.StartRadius">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.SymmetricInteractionFilter.EndRadius">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricInteractionFilter.IsApplicable(System.Double,Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Model.Structures.ICellReferencePosition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricInteractionFilter.IsApplicable(Mocassin.Model.Energies.IPairInteraction)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricInteractionFilter.IsEqualFilter(Mocassin.Model.Energies.IInteractionFilter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricInteractionFilter.Equals(Mocassin.Model.Energies.SymmetricInteractionFilter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricInteractionFilter.FromInterface(Mocassin.Model.Energies.IInteractionFilter)">
            <summary>
                Creates new interaction filter that matches the passed filter interface
            </summary>
            <param name="interactionFilter"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.PairCandidate">
            <summary>
                Raw pair interaction candidate struct that is used to compare and assign the indexing to the raw pair interactions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairCandidate.Position0">
            <summary>
                The first unit cell position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairCandidate.Position1">
            <summary>
                The second unit cell position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairCandidate.PositionVector">
            <summary>
                The actual position vector of the second position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairCandidate.Distance">
            <summary>
                The distance value of the interaction in internal units
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PairCandidate.Index">
            <summary>
                The assigned index value
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.PairCandidate.#ctor(Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Mathematics.ValueTypes.Fractional3D,System.Double)">
            <summary>
                Creates new raw pair interaction where the index is set to -1
            </summary>
            <param name="position0"></param>
            <param name="position1"></param>
            <param name="positionVector"></param>
            <param name="distance"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.PairCandidate.#ctor(Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Mathematics.ValueTypes.Fractional3D,System.Double,System.Int32)">
            <summary>
                Creates new raw pair interaction
            </summary>
            <param name="position0"></param>
            <param name="position1"></param>
            <param name="positionVector"></param>
            <param name="distance"></param>
            <param name="index"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.PairCandidate.CopyWithNewIndex(System.Int32)">
            <summary>
                Creates a copy of the current value with a new index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.AsymmetricParticlePair">
            <summary>
                Represents a polar pair of particles to identify pair interactions where the order of the particles is relevant
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricParticlePair.Equals(Mocassin.Model.Energies.AsymmetricParticlePair)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.AsymmetricParticlePair.Equals(Mocassin.Model.Energies.ParticlePair)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.ParticlePair">
            <summary>
                Abstract base class for particle pair implementations that describe a specific pair interaction occupation.
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.ParticlePair.Particle0">
            <summary>
                The first particle interface
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.ParticlePair.Particle1">
            <summary>
                The second particle interface
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.ParticlePair.Equals(Mocassin.Model.Energies.ParticlePair)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.ParticlePair.GetHashCode">
            <summary>
                Generates the hash code for the particle pair
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Energies.ParticlePair.MakePair(Mocassin.Model.Particles.IParticle,Mocassin.Model.Particles.IParticle,System.Boolean)">
            <summary>
                Creates a new particle pair from center and interaction particle and the information if it should behave asymmetric
            </summary>
            <param name="center"></param>
            <param name="other"></param>
            <param name="isAsymmetric"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Energies.SymmetricParticlePair">
            <summary>
                Represents an symmetric pair of particles to identify pair interactions where the order is not relevant
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricParticlePair.Equals(Mocassin.Model.Energies.SymmetricParticlePair)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.SymmetricParticlePair.Equals(Mocassin.Model.Energies.ParticlePair)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Energies.ExtendedPositionGroup">
            <summary>
                Represents an extended position group that carries all information to fully describe the properties of a group
                interaction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.ExtendedPositionGroup.GroupInteraction">
            <summary>
                The group interaction the extended position group was created from
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.ExtendedPositionGroup.CenterPosition">
            <summary>
                The center position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.ExtendedPositionGroup.SurroundingCellReferencePositions">
            <summary>
                The unit cell positions of the group sequences
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.ExtendedPositionGroup.PointOperationGroup">
            <summary>
                The point operation group describing the symmetry operation information of the group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.ExtendedPositionGroup.UniqueOccupationStates">
            <summary>
                List of all unique occupation states without the center position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.ExtendedPositionGroup.UniqueEnergyDictionary">
            <summary>
                The unique energy dictionary for each unique occupation state around each unique center particle
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.IPositionGroupInfo">
            <summary>
                Represents a position group info that carries extended data and information about a defined group interaction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPositionGroupInfo.GroupInteraction">
            <summary>
                The group interaction the position group info belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPositionGroupInfo.CenterPosition">
            <summary>
                The center position of the group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPositionGroupInfo.SurroundingPositions">
            <summary>
                The unit cell position entries of all surrounding positions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPositionGroupInfo.PointOperationGroup">
            <summary>
                The point operation group that describes the full geometry and symmetry information of the position group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.IPositionGroupInfo.UniqueOccupationStates">
            <summary>
                The list of unique occupation states described by the group
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IPositionGroupInfo.GetEnergyEntryList">
            <summary>
                Get the full energy collection that assign each unique combination of center and surrounding occupation an energy
                value
            </summary>
        </member>
        <member name="M:Mocassin.Model.Energies.IPositionGroupInfo.SynchronizeEnergyDictionary">
            <summary>
                Synchronizes the energy dictionary with the currently set values on the interaction
            </summary>
        </member>
        <member name="T:Mocassin.Model.Energies.PositionGroupInfo">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PositionGroupInfo.ExtendedPositionGroup">
            <summary>
                The wrapped extended position group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Energies.PositionGroupInfo.GroupInteraction">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PositionGroupInfo.CenterPosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PositionGroupInfo.SurroundingPositions">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PositionGroupInfo.UniqueOccupationStates">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Energies.PositionGroupInfo.PointOperationGroup">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PositionGroupInfo.#ctor(Mocassin.Model.Energies.ExtendedPositionGroup)">
            <summary>
                Creates new position group info wrapper for the provided extended position group
            </summary>
            <param name="extendedPositionGroup"></param>
        </member>
        <member name="M:Mocassin.Model.Energies.PositionGroupInfo.GetEnergyEntryList">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Energies.PositionGroupInfo.SynchronizeEnergyDictionary">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Lattices.ILatticeManager">
            <summary>
            Represents a manager for model energies and replated modelling parameters and objects
            </summary>
        </member>
        <member name="T:Mocassin.Model.Lattices.ILatticeCachePort">
            <summary>
                Represents an access port for on-demand extended lattice data that is automatically cached
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.ILatticeCachePort.GetDefaultByteLatticeSource">
            <summary>
                Get the default <see cref="T:Mocassin.Model.Lattices.IDopedByteLatticeSource"/> for doped lattice provision
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.ILatticeDataPort">
            <summary>
            Represents a read only data access port for the lattice reference data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.ILatticeDataPort.GetDopings">
            <summary>
            Get read only list of used dopings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.ILatticeDataPort.GetDopingCombinations">
            <summary>
            Get read only list of DopingCombinations (dopant, doped element, unit cell entry)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.ILatticeDataPort.GetBuildingBlocks">
            <summary>
            Get read only list of building blocks
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.ILatticeEventPort">
            <summary>
            Represents an event port for lattice manager related push based notification events
            </summary>
        </member>
        <member name="T:Mocassin.Model.Lattices.ILatticeInputPort">
            <summary>
            Represents an input port for model lattices
            </summary>
        </member>
        <member name="T:Mocassin.Model.Lattices.ILatticeQueryPort">
            <summary>
            Represents a query port for query based access to the reference and extended lattices data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Lattices.ILatticeUpdatePort">
            <summary>
            Represents and update port for registering of dependent event ports
            </summary>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeCacheManager">
            <summary>
            Basic implementation of the lattice cache manager that provides read only access to the extended 'on demand' lattice data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeCacheManager.#ctor(Mocassin.Model.Lattices.LatticeDataCache,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
            Create new lattice cache manager for the provided data cache and project services
            </summary>
            <param name="dataCache"></param>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeCacheManager.GetDefaultByteLatticeSource">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeCacheManager.CreateDefaultLatticeSource">
            <summary>
                Creates the default thread safe <see cref="T:Mocassin.Model.Lattices.IDopedByteLatticeSource"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeDataManager">
            <summary>
            Lattice data manager that provides safe read only access to the Lattice base model data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeDataManager.#ctor(Mocassin.Model.Lattices.LatticeModelData)">
            <summary>
            Create new lattice data manager for the provided data object
            </summary>
            <param name="modelData"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeDataManager.GetDopings">
            <summary>
            Get read only list of used dopings
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeDataManager.GetBuildingBlocks">
            <summary>
            Get read only list of building blocks
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeDataManager.GetDopingCombinations">
            <summary>
            Get read only list of DopingCombinations
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeEventManager">
            <summary>
            Basic lattice notification manager that handles distribution of push based update notifications about changes in the lattice manager base data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeInputManager">
            <summary>
            Basic implementation of the lattice input manager that handles validated adding, removal and replacement of lattice base data by an outside source
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.#ctor(Mocassin.Model.Lattices.LatticeModelData,Mocassin.Model.Lattices.LatticeEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
            Create new lattice input manager from data object, event manager and project services
            </summary>
            <param name="modelData"></param>
            <param name="eventManager"></param>
            <param name="project"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.CreateDataConflictHandlerProvider">
            <summary>
            Get the lattice conflict resolver provider that provides conflicts resolvers for internal data conflicts in this manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryCleanDeprecatedData">
            <summary>
            Tries to clean deprecated data by removing deprecated model objects and reindexing the model object lists. Distributes affiliated eventy on operation success
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryRegisterNewBuildingBlock(Mocassin.Model.Lattices.IBuildingBlock)">
            <summary>
            Registers a new BuildingBlock to the manager if it passes validation (Awaits distribution of affiliated events in case of operation success)
            </summary>
            <param name="buildingBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryRemoveBuildingBlock(Mocassin.Model.Lattices.IBuildingBlock)">
            <summary>
            Removes a BuildingBlock from the manager by deprecation if possible (Awaits distribution of affiliated events in case of operation success)
            </summary>
            <param name="buildingBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryReplaceBuildingBlock(Mocassin.Model.Lattices.IBuildingBlock,Mocassin.Model.Lattices.IBuildingBlock)">
            <summary>
            Replaces a BuildingBlock in the manager by another if the new one passes validation (Awaits distribution of affiliated events in case of operation success)
            </summary>
            <param name="orgBuildingBlock"></param>
            <param name="newBuildingBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryRegisterNewDopingCombination(Mocassin.Model.Lattices.IDopingCombination)">
            <summary>
            Registers a new Doping to the manager if it passes validation (Awaits distribution of affiliated events in case of operation success)
            </summary>
            <param name="buildingBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryRemoveDopingCombination(Mocassin.Model.Lattices.IDopingCombination)">
            <summary>
            Removes a Doping from the manager by deprecation if possible (Awaits distribution of affiliated events in case of operation success)
            </summary>
            <param name="buildingBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryReplaceDopingCombination(Mocassin.Model.Lattices.IDopingCombination,Mocassin.Model.Lattices.IDopingCombination)">
            <summary>
            Replaces a Doping in the manager by another if the new one passes validation (Awaits distribution of affiliated events in case of operation success)
            </summary>
            <param name="orgBuildingBlock"></param>
            <param name="newBuildingBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryRegisterNewDoping(Mocassin.Model.Lattices.IDoping)">
            <summary>
            Registers a new Doping to the manager if it passes validation (Awaits distribution of affiliated events in case of operation success)
            </summary>
            <param name="buildingBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryRemoveDoping(Mocassin.Model.Lattices.IDoping)">
            <summary>
            Removes a Doping from the manager by deprecation if possible (Awaits distribution of affiliated events in case of operation success)
            </summary>
            <param name="buildingBlock"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeInputManager.TryReplaceDoping(Mocassin.Model.Lattices.IDoping,Mocassin.Model.Lattices.IDoping)">
            <summary>
            Replaces a Doping in the manager by another if the new one passes validation (Awaits distribution of affiliated events in case of operation success)
            </summary>
            <param name="orgBuildingBlock"></param>
            <param name="newBuildingBlock"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeQueryManager">
            <summary>
            Basic implementation of the lattice query manager that handles safe data queries and service requests to the Lattice manager from outside sources
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeQueryManager.#ctor(Mocassin.Model.Lattices.LatticeModelData,Mocassin.Model.Lattices.LatticeDataCache,Mocassin.Model.Basic.AccessLockSource)">
            <summary>
            Create new lattice query manager from data, cache object and data access locker
            </summary>
            <param name="modelData"></param>
            <param name="extendedData"></param>
            <param name="lockSource"></param>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeUpdateManager">
            <summary>
            Basic update manager for the lattice module that handles pushed information on data changes in required modules
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeUpdateManager.#ctor(Mocassin.Model.Lattices.LatticeModelData,Mocassin.Model.Lattices.LatticeEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
            Create new Lattice update manager for the provided data object, event manager and project services
            </summary>
            <param name="modelData"></param>
            <param name="eventManager"></param>
            <param name="modelProject"></param>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeDataConflictResolverProvider">
            <summary>
                Resolver provider for all lattice conflict resolvers
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeDataConflictResolverProvider.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new Lattice data conflict resolver provider with access to the provided project services
            </summary>
            <param name="modelProject"></param>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeDataCache">
            <summary>
            Data cache for the extended on-demand lattice model data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeDataCache.#ctor(Mocassin.Model.Basic.IModelEventPort,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
            Creates new cached lattice data object with empty cache list and registers to the basic event of the provided event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeDataCache.AsReadOnly">
            <summary>
            Returns a read only interface for the cache (Supplied from cache after first creation)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeManager">
            <summary>
            Basic implementation of the lattice manager that manages and supplies objects and parameters related to the lattice modelling process
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.LatticeManager.InputPort">
            <summary>
            Access to input port for model requests
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.LatticeManager.QueryPort">
            <summary>
            Access to query port for model data and cache queries
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.LatticeManager.EventPort">
            <summary>
            Access to the event port for change subscriptions
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeManager.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Lattices.LatticeModelData)">
            <summary>
            Creates new lattice manager with the provided project services and base data object
            </summary>
            <param name="modelProject"></param>
            <param name=""></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeManager.GetManagerInterfaceType">
            <summary>
            Get the  type of the manager interface this class supports
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeManager.CreateValidationService(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
            Get a new validation service for this manager that uses the settings from the provided project settings and handles Lattice object validations
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeModelData">
            <summary>
            The reference model data object for the lattice manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.LatticeModelData.BuildingBlocks">
            <summary>
            Default building block (index = 0) and custom building blocks of lattice
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.LatticeModelData.DopingCombinations">
            <summary>
            List of doping combinations (dopant, doped element, unitcell position)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.LatticeModelData.Dopings">
            <summary>
            The dopings specified by the user
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeModelData.AsReadOnly">
            <summary>
            Creates new read only wrapper for this data object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeModelData.ResetToDefault">
            <summary>
            Resets the lattice model data to default conditions
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeModelData.CreateNew">
            <summary>
            Creates a new default lattice model data object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.LatticeValidationService">
            <summary>
            Validation service for lattice related model objects that checks new lattice related model object inputs
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.LatticeValidationService.Settings">
            <summary>
            The basic Lattice settings object that defines all data constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeValidationService.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinLatticeSettings)">
            <summary>
            Create new Lattice validation service that uses the provided project service and settings object
            </summary>
            <param name="modelProject"></param>
            <param name="settings"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeValidationService.ValidateBuildingBlock(Mocassin.Model.Lattices.IBuildingBlock,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Lattices.ILatticeDataPort})">
            <summary>
            Validate a BuildingBlock in terms of conflicts with basic limitations
            </summary>
            <param name="buildingBlock"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeValidationService.ValidateDopingCombination(Mocassin.Model.Lattices.IDopingCombination,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Lattices.ILatticeDataPort})">
            <summary>
                Validate a DopingCombination in terms of conflicts with basic limitations and ParticleSets of cell reference Position
            </summary>
            <param name="dopingCombination"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.LatticeValidationService.ValidateDoping(Mocassin.Model.Lattices.IDoping,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Lattices.ILatticeDataPort})">
            <summary>
            Validate a Doping in terms of conflicts with basic limitations
            </summary>
            <param name="doping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.Validators.BuildingBlockValidator">
            <summary>
                Validator for new BuildingBlock model objects that checks for consistency and compatibility with existing data and
                general object constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.Validators.BuildingBlockValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinLatticeSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Lattices.ILatticeDataPort})">
            <summary>
                Creates new validator with the provided project services, settings object and data reader
            </summary>
            <param name="modelProject"></param>
            <param name="settings"></param>
            <param name="dataReader"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.Validators.BuildingBlockValidator.Validate(Mocassin.Model.Lattices.IBuildingBlock)">
            <summary>
                Validate a new BuildingBlock object in terms of consistency and compatibility with existing data
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.Validators.BuildingBlockValidator.AddOccupationValidation(Mocassin.Model.Lattices.IBuildingBlock,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validate matching particles and unit cell positions
            </summary>
            <param name="buildingBlock"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Lattices.Validators.DopingCombinationValidator">
            <summary>
                Validator for new DopingCombination model objects that checks for consistency and compatibility with existing data
                and general object constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.Validators.DopingCombinationValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinLatticeSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Lattices.ILatticeDataPort})">
            <summary>
                Creates new validator with the provided project services, settings object and data reader
            </summary>
            <param name="modelProject"></param>
            <param name="settings"></param>
            <param name="dataReader"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.Validators.DopingCombinationValidator.Validate(Mocassin.Model.Lattices.IDopingCombination)">
            <summary>
                Validate a new DopingCombination object in terms of consistency and compatibility with existing data
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.Validators.DopingCombinationValidator.AddOccupationValidation(Mocassin.Model.Particles.IParticle,Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validate matching particles and unit cell positions
            </summary>
            <param name="particle"></param>
            <param name="position"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Lattices.Validators.DopingValidator">
            <summary>
                Validator for new Doping model objects that checks for consistency and compatibility with existing data and general
                object constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.Validators.DopingValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinLatticeSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Lattices.ILatticeDataPort})">
            <summary>
                Creates new validator with the provided project services, settings object and data reader
            </summary>
            <param name="projectServices"></param>
            <param name="settings"></param>
            <param name="dataReader"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.Validators.DopingValidator.Validate(Mocassin.Model.Lattices.IDoping)">
            <summary>
                Validate a new Doping object in terms of consistency and compatibility with existing data
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.Validators.DopingValidator.AddCounterChargeValidation(Mocassin.Model.Lattices.IDopingCombination,Mocassin.Model.Lattices.IDopingCombination,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validate if doping concentration is positive
            </summary>
            <param name="concentration"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Lattices.BuildingBlock">
            <summary>
                Building Block for the lattice. Each building block has the size of the unit cell.
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.BuildingBlock.CellEntries">
            <summary>
                The occupation of the building block
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.BuildingBlock.Mocassin#Model#Lattices#IBuildingBlock#CellEntries">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Lattices.BuildingBlock.ObjectName">
            <inheritdoc />
            <summary>
                Get the type name string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.BuildingBlock.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <summary>
                Copies the information from the provided model object interface and returns the object (Retruns null if type
                mismatch)
            </summary>
            <param name="modelObject"></param>
        </member>
        <member name="T:Mocassin.Model.Lattices.IBuildingBlock">
            <summary>
                Building Block for the lattice. Each building block has the size of the unit cell.
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.IBuildingBlock.CellEntries">
            <summary>
                The occupation of the building block
            </summary>
        </member>
        <member name="T:Mocassin.Model.Lattices.DopingCombination">
            <summary>
                Contains the information about the particles and unit cell positions which are involved in the doping process
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.DopingCombination.Dopant">
            <summary>
                Dopand particle
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.DopingCombination.Dopable">
            <summary>
                Particle that is doped
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.DopingCombination.CellReferencePosition">
            <summary>
                Unit cell position that should be doped
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.DopingCombination.GetChargeDelta">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Lattices.DopingCombination.ObjectName">
            <summary>
                Get the type name string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.DopingCombination.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <summary>
                Copies the information from the provided parameter interface and returns the object (Returns null if type mismatch)
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.IDopingCombination">
            <summary>
                Set of element indexes and sublattice index for doping information
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.IDopingCombination.Dopant">
            <summary>
                Dopand particle
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.IDopingCombination.Dopable">
            <summary>
                Particle that is doped
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.IDopingCombination.CellReferencePosition">
            <summary>
                unit cell position (contains information about the sublattice)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.IDopingCombination.GetChargeDelta">
            <summary>
                Get the charge delta [Replacement] - [Original] occupation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.Doping">
            <summary>
                Doping information that describes the element, concentration, sublattice which is substituted.
                May also contain information about counter doping which is described in the same manner.
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.Doping.PrimaryDoping">
            <summary>
                Information about the doping (particles and sublattice)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.Doping.CounterDoping">
            <summary>
                Information about the counter doping (particles and sublattice)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.Doping.BuildingBlock">
            <summary>
                Building Block in which the doping should take place
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.Doping.UseCounterDoping">
            <summary>
                Flag to indicate whether a counter doping should be applied
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.Doping.Priority">
            <summary>
                Doping Group for simutaneous doping
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.Doping.ObjectName">
            <summary>
                Get the type name string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.Doping.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <summary>
                Copies the information from the provided model object interface and returns the object (Returns null if type
                mismatch)
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.IDoping">
            <summary>
                Doping information that describes the element, concentration, sublattice which is substituted.
                May also contain information about counter doping which is described in the same manner.
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.IDoping.PrimaryDoping">
            <summary>
                Information about the doping (particles and sublattice)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.IDoping.CounterDoping">
            <summary>
                Information about the counter doping (particles and sublattice)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.IDoping.BuildingBlock">
            <summary>
                Building Block in which the doping should take place
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.IDoping.Priority">
            <summary>
                Doping group ID for simultaneous doping
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.IDoping.UseCounterDoping">
            <summary>
                Flag to indicate whether a counter doping should be applied
            </summary>
        </member>
        <member name="T:Mocassin.Model.Lattices.FastDopedByteLatticeSource">
            <summary>
                Provides a fast <see cref="T:Mocassin.Model.Lattices.IDopedByteLatticeSource" />
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.FastDopedByteLatticeSource.BufferPool">
            <summary>
                Get the <see cref="T:System.Buffers.ArrayPool`1" /> for linear <see cref="T:System.Byte" /> buffers
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.FastDopedByteLatticeSource.DefaultBlock">
            <summary>
                Get the <see cref="T:Mocassin.Model.Lattices.IBuildingBlock" /> that supplies the default config
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.FastDopedByteLatticeSource.UnitCellProvider">
            <summary>
                Get the <see cref="T:Mocassin.Symmetry.Analysis.IUnitCellProvider`1" /> of <see cref="T:Mocassin.Model.Structures.ICellReferencePosition" /> that supplies the cell
                information
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.FastDopedByteLatticeSource.UnitCell">
            <summary>
                Get the <see cref="T:Mocassin.Symmetry.Analysis.IUnitCell`1" /> of <see cref="T:Mocassin.Model.Structures.ICellReferencePosition" /> that supplies the cell information
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.FastDopedByteLatticeSource.DopingTargets">
            <summary>
                Get an array of integer tuples that contains all positions index and affiliated reference index values for unit
                cell
                entries that can be doped
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.FastDopedByteLatticeSource.ModelProject">
            <summary>
                Get the parent <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> of the lattice source
            </summary>
        </member>
        <member name="P:Mocassin.Model.Lattices.FastDopedByteLatticeSource.ChargeBalanceTolerance">
            <summary>
                Get the charge balance tolerance for population calculation
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Lattices.IBuildingBlock,System.Double)">
            <summary>
                Creates a new <see cref="T:Mocassin.Model.Lattices.FastDopedByteLatticeSource" /> by <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> and base
                <see cref="T:Mocassin.Model.Lattices.IBuildingBlock" /> with optional charge balance tolerance
            </summary>
            <param name="modelProject"></param>
            <param name="baseBuildingBlock"></param>
            <param name="chargeBalanceTolerance"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.CreateLattice(Moccasin.Mathematics.ValueTypes.VectorI3,System.Collections.Generic.IDictionary{Mocassin.Model.Lattices.IDoping,System.Double},System.Random)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.PopulateLattice(System.Collections.Generic.IDictionary{Mocassin.Model.Lattices.IDoping,System.Double},System.Random,System.Byte[0:,0:,0:,0:])">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.CreateDopingTargetList">
            <summary>
                Creates the doping application sequence that defines a set of position index and reference index pairs that define
                the
                doping affected entries of the unit cell
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.ApplyPopulationTableToLattice(System.Byte[0:,0:,0:,0:],System.Int32[0:,0:],System.Random)">
            <summary>
                Applies a population table to the passed 4D raw lattice
            </summary>
            <param name="lattice"></param>
            <param name="populationTable"></param>
            <param name="rng"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.PopulationTableToPopulationCountSet(System.Int32[0:,0:])">
            <summary>
                Creates a population count set from a population table that contains the total number of particles per wyckoff
                index
            </summary>
            <param name="populationTable"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.RollNextOccupationByte(System.Int32[0:,0:],System.Int32[],System.Int32,System.Random)">
            <summary>
                Selects the occupation particle for a wyckoff index using the provided current state of population table and
                population count set
            </summary>
            <param name="populationTable"></param>
            <param name="countTable"></param>
            <param name="wyckoffIndex"></param>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.CreateEmptyLattice(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a new empty 4D <see cref="T:System.Byte" /> lattice that matches the passed size information and internally set
                <see cref="T:Mocassin.Symmetry.Analysis.IUnitCellProvider`1" />
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.CreateBasePopulationTable(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a population table for a supercell of specified size that assigns each [Wyckoff][Particle] index
                combination its population count if only the set <see cref="T:Mocassin.Model.Lattices.IBuildingBlock" /> is used
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.CreateDopedPopulationTable(System.Collections.Generic.IDictionary{Mocassin.Model.Lattices.IDoping,System.Double},System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates a doped population table that assigns each [Wyckoff][Particle] index combination its population count if
                the passed <see cref="T:Mocassin.Model.Lattices.IDoping" /> set is applied
            </summary>
            <param name="dopingDictionary"></param>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.ApplyPopulationChangesToTable(System.Int32[0:,0:],Mocassin.Model.Lattices.IDoping,System.ValueTuple{System.Int32,System.Int32}@)">
            <summary>
                Applies a population change of a specific <see cref="T:Mocassin.Model.Lattices.IDoping" /> to a population table
            </summary>
            <param name="populationTable"></param>
            <param name="doping"></param>
            <param name="populations"></param>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.CreateOrderedDopingSequence(System.Collections.Generic.IDictionary{Mocassin.Model.Lattices.IDoping,System.Double})">
            <summary>
                Converts a <see cref="T:System.Collections.Generic.IDictionary`2" /> of doping information into an ordered doping sequence
            </summary>
            <param name="dopingDictionary"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.DopingToPopulationCount(System.Collections.Generic.KeyValuePair{Mocassin.Model.Lattices.IDoping,System.Double}@,System.Int32)">
            <summary>
                Calculates the resulting primary and secondary population counts if the passed doping
                <see cref="T:System.Collections.Generic.KeyValuePair`2" /> is applied to a count
            </summary>
            <param name="doping"></param>
            <param name="originalCount"></param>
            <returns></returns>
            <remarks> Ceil value of the primary count that does not violate the charge balance is created </remarks>
        </member>
        <member name="M:Mocassin.Model.Lattices.FastDopedByteLatticeSource.FloorDopingPopulations(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
                Takes a population number for the primary doping and get the floored result for primary and secondary doping based
                on the charge values and tolerance
            </summary>
            <param name="primaryCount"></param>
            <param name="chargeDelta"></param>
            <param name="counterChargeDelta"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Lattices.IDopedByteLatticeSource">
            <summary>
                Represents a source for doped byte[,,,] based 4D lattices based on <see cref="T:Mocassin.Model.Lattices.IDoping"/> information
            </summary>
        </member>
        <member name="M:Mocassin.Model.Lattices.IDopedByteLatticeSource.CreateLattice(Moccasin.Mathematics.ValueTypes.VectorI3,System.Collections.Generic.IDictionary{Mocassin.Model.Lattices.IDoping,System.Double},System.Random)">
            <summary>
                Generates a 4D lattice that encodes each particle as a byte
            </summary>
            <param name="sizeVector"></param>
            <param name="dopingDictionary"></param>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Lattices.IDopedByteLatticeSource.PopulateLattice(System.Collections.Generic.IDictionary{Mocassin.Model.Lattices.IDoping,System.Double},System.Random,System.Byte[0:,0:,0:,0:])">
            <summary>
                Generates a 4D lattice that encodes each particle as a byte on an existing byte[,,,] object
            </summary>
            <param name="dopingDictionary"></param>
            <param name="rng"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.ModelProject.INumericService">
            <summary>
                Represents a service for numeric floating point comparisons with specific tolerances for equality
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.INumericService.ComparisonUlp">
            <summary>
                The number of ULP steps in the ulp comparer
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.INumericService.ComparisonRange">
            <summary>
                The absolute comparison range of the range comparer
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.INumericService.ComparisonFactor">
            <summary>
                The relative comparison factor of the relative comparer
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.INumericService.UlpComparer">
            <summary>
                The ULP based double comparer, fastest but fails during almost zero comparisons
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.INumericService.RangeComparer">
            <summary>
                The range based double comparer, relatively fast and able to compare to zero, but limited to a very specific value
                range
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.INumericService.RelativeComparer">
            <summary>
                The factor based relative double comparer, slow and not able to compare to zero, but usually the most flexible one
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.INumericService.ComboComparer">
            <summary>
                The combined comparer that uses the range comparer for zero checks and the relative factor comparer as a main comparer
            </summary>
        </member>
        <member name="T:Mocassin.Model.ModelProject.IProjectInputPipeline">
            <summary>
                Project input pipeline that handles <see cref="T:Mocassin.Model.Basic.IModelObject" /> and
                <see cref="T:Mocassin.Model.Basic.IModelParameter" /> redirection to the affiliated
                <see cref="T:Mocassin.Model.Basic.IModelInputPort" />
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IProjectInputPipeline.ModelProject">
            <summary>
                Get or set the <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> that the pipeline is targeting
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IProjectInputPipeline.PushToProject(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Pushes the passed sequence of objects into the managed ´<see cref="T:Mocassin.Model.ModelProject.IModelProject" />
            </summary>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IProjectInputPipeline.PushToProject(Mocassin.Model.Basic.IModelObject)">
            <summary>
                Pushes the passed <see cref="T:Mocassin.Model.Basic.IModelObject" /> to the <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> and returns an
                <see cref="T:Mocassin.Framework.Operations.IOperationReport" />
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IProjectInputPipeline.PushToProject(Mocassin.Model.Basic.IModelParameter)">
            <summary>
                Pushes the passed <see cref="T:Mocassin.Model.Basic.IModelParameter" /> to the <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> and returns an
                <see cref="T:Mocassin.Framework.Operations.IOperationReport" />
            </summary>
            <param name="modelParameter"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.ModelProject.IValidationServiceProvider">
            <summary>
                Represents a service provider for validations that supports object and parameter validations
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IValidationServiceProvider.ValidateObject``2(``0,Mocassin.Model.Basic.IDataReader{``1})">
            <summary>
                Validates the passed <see cref="T:Mocassin.Model.Basic.IModelObject" /> in the context of the provided <see cref="T:Mocassin.Model.Basic.IDataReader`1" />
                and generates the affiliated <see cref="T:Mocassin.Framework.Operations.IValidationReport" />
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TPort"></typeparam>
            <param name="obj"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IValidationServiceProvider.ValidateParameter``2(``0,Mocassin.Model.Basic.IDataReader{``1})">
            <summary>
                Validates the passed <see cref="T:Mocassin.Model.Basic.IModelParameter" /> in the context of the provided
                <see cref="T:Mocassin.Model.Basic.IDataReader`1" /> and generates the affiliated <see cref="T:Mocassin.Framework.Operations.IValidationReport" />
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="TPort"></typeparam>
            <param name="obj"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IValidationServiceProvider.ValidateObject``1(``0)">
            <summary>
                Validates the passed <see cref="T:Mocassin.Model.Basic.IModelObject" /> and generates the affiliated <see cref="T:Mocassin.Framework.Operations.IValidationReport" />
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
            <remarks> Required <see cref="T:Mocassin.Model.Basic.IDataReader`1"/> has to be looked up internally </remarks>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IValidationServiceProvider.ValidateParameter``1(``0)">
            <summary>
                Validates the passed <see cref="T:Mocassin.Model.Basic.IModelParameter" /> and generates the affiliated <see cref="T:Mocassin.Framework.Operations.IValidationReport" />
            </summary>
            <param name="modelParameter"></param>
            <returns></returns>
            <remarks> Required <see cref="T:Mocassin.Model.Basic.IDataReader`1"/> has to be looked up internally </remarks>
        </member>
        <member name="T:Mocassin.Model.ModelProject.IModelProject">
            <summary>
                Represents a project service and module container that serves as the main data and service exchange
                point for a single model project
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.IsInputInProgress">
            <summary>
                Flag that indicates if model data is currently added to the project
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.AccessLockSource">
            <summary>
                The default data locker that species the timespan and attempts before reader/writer creation operations throw
                timeout exceptions
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.Settings">
            <summary>
                Get the project settings data object that contains all project settings
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.DataTracker">
            <summary>
                Data tracking system for all known model data objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.InputPipeline">
            <summary>
                The <see cref="T:Mocassin.Model.ModelProject.IProjectInputPipeline" /> that handles automated input redirection to the correct
                <see cref="T:Mocassin.Model.Basic.IModelInputPort" />
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.GeometryNumeric">
            <summary>
                Floating point service for numeric geometry operations
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.CommonNumeric">
            <summary>
                Floating point service for all common numeric operations
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.MessageSystem">
            <summary>
                Push notification messaging service to send 'fire-and-forget' messages to subscribers
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.SpaceGroupService">
            <summary>
                Space group service to load groups and create wyckoff position lists from reference information
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.CrystalSystemService">
            <summary>
                Crystal system service that handles the provision of crystal systems
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.ValidationServices">
            <summary>
                Validation services that handles validation requests for model objects and model parameters
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.IModelProject.SymmetryAnalysisService">
            <summary>
                Symmetry analysis service that supplies methods for symmetry comparisons and transformation sequence calculation
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IModelProject.TryGetInputLock(System.IDisposable@)">
            <summary>
                Tries to lock the project for input and creates a disposable input lock on success, returns false if failed
            </summary>
            <param name="projectLocker"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IModelProject.CreateAndRegister(Mocassin.Model.DataManagement.IModelManagerFactory)">
            <summary>
                Creates and registers the manager that is created by the provided manager factory
            </summary>
            <param name="factory"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IModelProject.CreateAndRegisterMany(System.Collections.Generic.IEnumerable{Mocassin.Model.DataManagement.IModelManagerFactory})">
            <summary>
                Creates and registers multiple managers that are created by the provided factories
            </summary>
            <param name="factories"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IModelProject.RegisterManager(Mocassin.Model.Basic.IModelManager)">
            <summary>
                Registers a new manager with the project services, overwrites existing one of same interface type if present
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IModelProject.GetManager``1">
            <summary>
                Get the registered manager of the specified type
            </summary>
            <typeparam name="TManager"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IModelProject.GetManager(System.Type)">
            <summary>
                Get the registered manager that implements the specified interface (Returns null im manager does not exist)
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IModelProject.GetAllManagers">
            <summary>
                Get all currently registered managers
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.IModelProject.ResetProject">
            <summary>
                Resets the <see cref="T:Mocassin.Model.ModelProject.IModelProject"/> to mint factory status with default data status
            </summary>
        </member>
        <member name="T:Mocassin.Model.ModelProject.ExportSettingAttribute">
            <summary>
                Setting export class that enables to mark a property as an exported setting for a specific purpose or value
                by an identifier
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ExportSettingAttribute.ExportName">
            <summary>
                The export name that can be used to import the setting
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ExportSettingAttribute.#ctor(System.String)">
            <summary>
                Create a new export setting attribute that uses the provided export name
            </summary>
            <param name="exportName"></param>
        </member>
        <member name="T:Mocassin.Model.ModelProject.ModuleSettingsAttribute">
            <summary>
            Attribute that marks a class to be a project setting source for a specific module
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModuleSettingsAttribute.ModuleType">
            <summary>
            The type of the module interface the setting is valid for
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModuleSettingsAttribute.#ctor(System.Type)">
            <summary>
            Create new module settings attribute with the passed module type
            </summary>
            <param name="moduleType"></param>
        </member>
        <member name="T:Mocassin.Model.ModelProject.ModelProjectInputSystem">
            <summary>
                Input system for the <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> that automatically targets the correct
                <see cref="T:Mocassin.Model.Basic.IModelInputPort" />
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProjectInputSystem.InputRequests">
            <summary>
                The list of input requests
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProjectInputSystem.InputReports">
            <summary>
                Get the input report list created during the input operations
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.Add(System.Object)">
            <summary>
                Adds a new input request for the passed object
            </summary>
            <param name="inputObject"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.AddMany(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Adds many objects to the input request list
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.PushData(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Inputs all data using the passed project service and returns all operation reports of the input
            </summary>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.MakeCallList(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Generates the list which managers have to be called for the input
            </summary>
            <param name="modelProject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.GetCallDictionary(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Makes a call dictionary that assigns each managers its set of supported input objects
            </summary>
            <param name="modelProject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.AutoAssignInputDelegates">
            <summary>
                Assigns all known input requests their input delegate
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.GetObjectInputDelegate">
            <summary>
                Get a delegate to input an object into a manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.GetParameterSetDelegate">
            <summary>
                Get a delegate to set a parameter in a manager
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProjectInputSystem.GetReportJson">
            <summary>
                Returns a json formatted string of the current input report list
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.ModelProject.ProjectInputRequest">
            <summary>
                Object input requests for automated input into the correct <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> input pipeline
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectInputRequest.InputDelegate">
            <summary>
                Get or set the input delegate that takes the model object and manager interface to perform the input task
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectInputRequest.InputObject">
            <summary>
                Get or set the input object
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputRequest.Invoke(Mocassin.Model.Basic.IModelManager)">
            <summary>
                Invokes the input operation on the passed <see cref="T:Mocassin.Model.Basic.IModelManager" /> and returns the created
                <see cref="T:Mocassin.Framework.Operations.IOperationReport" />
            </summary>
            <param name="manager"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.ModelProject.ProjectInputPipeline">
            <inheritdoc />
        </member>
        <member name="F:Mocassin.Model.ModelProject.ProjectInputPipeline._objectInputDictionary">
            <summary>
                The input port delegate dictionary that assigns <see cref="T:Mocassin.Model.Basic.IModelObject" /> the correct input delegate
            </summary>
        </member>
        <member name="F:Mocassin.Model.ModelProject.ProjectInputPipeline._parameterInputDictionary">
            <summary>
                The input port delegate dictionary that assigns <see cref="T:Mocassin.Model.Basic.IModelParameter" /> the correct input delegate
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectInputPipeline.ModelProject">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputPipeline.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new <see cref="T:Mocassin.Model.ModelProject.ProjectInputPipeline" /> for the passed <see cref="T:Mocassin.Model.ModelProject.IModelProject" />
            </summary>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputPipeline.PushToProject(System.Collections.Generic.IEnumerable{System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputPipeline.PushToProject(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputPipeline.PushToProject(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputPipeline.GetNotSupportedOperationReport(System.Object)">
            <summary>
                Get an operation report that informs that the passed object could not be processed
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputPipeline.GetInputDelegate(Mocassin.Model.Basic.IModelParameter)">
            <summary>
                Get the input delegate for the passed <see cref="T:Mocassin.Model.Basic.IModelParameter" /> or null if the parameter is not supported
            </summary>
            <param name="modelParameter"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputPipeline.GetInputDelegate(Mocassin.Model.Basic.IModelObject)">
            <summary>
                Get the input delegate for the passed <see cref="T:Mocassin.Model.Basic.IModelObject" /> or null if the parameter is not supported
            </summary>
            <param name="modelObject"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputPipeline.MakeParameterInputDelegate(Mocassin.Model.Basic.IModelInputPort)">
            <summary>
                Creates an <see cref="T:Mocassin.Model.Basic.IModelParameter" /> input delegate to the passed <see cref="T:Mocassin.Model.Basic.IModelInputPort" />
            </summary>
            <param name="inputPort"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectInputPipeline.MakeObjectInputDelegate(Mocassin.Model.Basic.IModelInputPort)">
            <summary>
                Creates an <see cref="T:Mocassin.Model.Basic.IModelObject" /> input delegate to the passed <see cref="T:Mocassin.Model.Basic.IModelInputPort" />
            </summary>
            <param name="inputPort"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.ModelProject.NumericService">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.NumericService.Settings">
            <summary>
                The numeric settings object used to create the numeric comparer objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.NumericService.UlpComparer">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.NumericService.RangeComparer">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.NumericService.RelativeComparer">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.NumericService.ComboComparer">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.NumericService.ComparisonUlp">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.NumericService.ComparisonRange">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.NumericService.ComparisonFactor">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.NumericService.#ctor(Mocassin.Model.ModelProject.MocassinNumericSettings)">
            <summary>
                Creates new service object from settings data
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:Mocassin.Model.ModelProject.ValidationServiceProvider">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ValidationServiceProvider.ValidationDelegateDictionary">
            <summary>
                Get the <see cref="T:System.Collections.Generic.Dictionary`2" /> for caching of validation <see cref="T:System.Func`1" /> delegates
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ValidationServiceProvider.ModelProject">
            <summary>
                Get the <see cref="T:Mocassin.Model.ModelProject.IModelProject" /> the <see cref="T:Mocassin.Model.ModelProject.ValidationServiceProvider" /> is affiliated with
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ValidationServiceProvider.ValidationServices">
            <summary>
                List of all registered validation services
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValidationServiceProvider.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new <see cref="T:Mocassin.Model.ModelProject.ValidationServiceProvider" /> that uses the passed <see cref="T:Mocassin.Model.ModelProject.IModelProject" />
            </summary>
            <param name="modelProject"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValidationServiceProvider.ValidateObject``2(``0,Mocassin.Model.Basic.IDataReader{``1})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValidationServiceProvider.ValidateParameter``2(``0,Mocassin.Model.Basic.IDataReader{``1})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValidationServiceProvider.ValidateObject``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValidationServiceProvider.ValidateParameter``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValidationServiceProvider.RegisterService(Mocassin.Model.Basic.IValidationService)">
            <summary>
                Registers a new service to the service provider (Overwrites existing service of same type)
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValidationServiceProvider.Validate``1(``0)">
            <summary>
                Validates the passed object of type <see cref="!:T" /> if a matching <see cref="T:Mocassin.Model.Basic.IValidationService" /> is available
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValidationServiceProvider.GetValidationDelegate``1(``0)">
            <summary>
            Get a generic validation <see cref="T:System.Func`2"/> delegate for the passed object of type <see cref="!:T"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValidationServiceProvider.GetMatchingDataReader(System.Object)">
            <summary>
                Get the correct <see cref="T:Mocassin.Model.Basic.IDataReader`1" /> of the <see cref="T:Mocassin.Model.Basic.IModelManager" /> that manages the provided
                object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.ModelProject.ModelProject">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.ActiveManagers">
            <summary>
                List of active registered model managers
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.ValidationServiceProvider">
            <summary>
                Service provider for validations
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.ProjectLock">
            <summary>
                The project lock object to safely set/unset the input in progress flag
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.IsInputInProgress">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.AccessLockSource">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.Settings">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.MessageSystem">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.ValidationServices">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.InputPipeline">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.GeometryNumeric">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.CommonNumeric">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.SpaceGroupService">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.CrystalSystemService">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.SymmetryAnalysisService">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.ModelProject.ModelProject.DataTracker">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.#ctor">
            <summary>
                Creates new project services manager with empty manager list
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.TryGetInputLock(System.IDisposable@)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.CreateAndRegister(Mocassin.Model.DataManagement.IModelManagerFactory)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.CreateAndRegisterMany(System.Collections.Generic.IEnumerable{Mocassin.Model.DataManagement.IModelManagerFactory})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.RegisterManager(Mocassin.Model.Basic.IModelManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.ShareAndConnectEventPorts(Mocassin.Model.Basic.IModelManager)">
            <summary>
                Distributes all existing event ports to a new manager and vise versa
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.GetManager``1">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.GetManager(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.GetAllManagers">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.ResetProject">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.ModelProject.ModelProject.Create(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Factory to create new project services interface from data object
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.ModelProject.ProjectSettings">
            <summary>
                Data class for the model settings that stores general settings required throughout the entire model process (e.g.
                floating point tolerances)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectSettings.ModuleSettings">
            <summary>
                The module settings collection
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectSettings.CommonNumericSettings">
            <summary>
                The numeric settings for common calculations and comparisons
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectSettings.GeometryNumericSettings">
            <summary>
                The numeric settings for geometry calculations and comparisons
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectSettings.ConcurrencySettings">
            <summary>
                The basic concurrency settings for timeout exceptions during parallel access to the model library
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectSettings.ConstantsSettings">
            <summary>
                The basic constant settings that contain nature constants
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectSettings.SymmetrySettings">
            <summary>
                The basic symmetry settings for space groups and crystal systems
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ProjectSettings.DopingToleranceSetting">
            <summary>
            	The basic doping range tolerance
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.#ctor">
            <summary>
                Default construct project settings with empty module settings collection
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.TryGetModuleSettings``1(``0@)">
            <summary>
                Tries to get a module setting from the project settings collection
            </summary>
            <typeparam name="TSettings"></typeparam>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.TryGetModuleSettings(System.Type,Mocassin.Model.ModelProject.MocassinModuleSettings@)">
            <summary>
                Tries to get a module settings from the collection by module type
            </summary>
            <param name="moduleType"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.GetModuleSettings``1">
            <summary>
                Get the module settings of the specified type or null if they do not exist
            </summary>
            <typeparam name="TSettings"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.LookupAndAddModuleSettings(System.Reflection.Assembly)">
            <summary>
                Looks-up all module settings objects that are marked with the module settings attribute in the passed assembly an
                adds one instance of each
                to the module settings collection
            </summary>
            <param name="sourceAssembly"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.CreateDefault">
            <summary>
                Creates a new default project services data object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.GetModuleSettingTypes(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Get the sequence of <see cref="T:System.Type" /> in the main <see cref="T:System.Reflection.Assembly" /> an all passed additional search
                <see cref="T:System.Reflection.Assembly" /> objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.Serialize(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Serializes the <see cref="T:Mocassin.Model.ModelProject.ProjectSettings" /> to into a string an optional set of <see cref="T:System.Reflection.Assembly" /> to extend
                the search for <see cref="T:Mocassin.Model.ModelProject.MocassinModuleSettings" /> implementations
            </summary>
            <param name="additionalAssemblies"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.Serialize(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Serializes the <see cref="T:Mocassin.Model.ModelProject.ProjectSettings" /> to the passed file path with optional indentation and search
                <see cref="T:System.Reflection.Assembly" /> objects
            </summary>
            <param name="filePath"></param>
            <param name="additionalAssemblies"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.Deserialize(System.String,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Deserializes a <see cref="T:Mocassin.Model.ModelProject.ProjectSettings" /> object from the passed file path using the
                <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> and the additional set of <see cref="T:System.Reflection.Assembly" /> objects for settings type
                search
            </summary>
            <param name="filePath"></param>
            <param name="additionalAssemblies"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ProjectSettings.GetDefaultSerializer(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
                Get the default <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> for the settings that includes the passed additional search
                <see cref="T:System.Reflection.Assembly" /> objects
            </summary>
            <param name="additionalAssemblies"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.ModelProject.StringSetting">
            <summary>
                Defines a string regex limitation pattern for settings objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.StringSetting.IsNullAllowing">
            <summary>
                Boolean flag that indicates if the value can be null
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.StringSetting.RegexPattern">
            <summary>
                The regex pattern string used to create regex instances
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.StringSetting.DisplayName">
            <summary>
                The display name of the check value
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.StringSetting.#ctor">
            <summary>
                Create default pattern setting
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.StringSetting.#ctor(System.String,System.String,System.Boolean)">
            <summary>
                Create pattern setting from pattern string. Throws if the pattern is not a valid regex pattern or null
            </summary>
            <param name="displayName"></param>
            <param name="regexPattern"></param>
            <param name="isNullAllowing"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.StringSetting.ParseValue(System.String,System.Collections.Generic.IEnumerable{Mocassin.Framework.Messaging.WarningMessage}@)">
            <summary>
                Parse a value and check if it matches the settings limitations. Returns false on failed and sets the affiliated
                warnings to the out parameter
            </summary>
            <param name="value"></param>
            <param name="warnings"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.ModelProject.ValueSetting`1">
            <summary>
                Defines a serializable value restriction setting with minimal, maximal and warning limits for validation purposes
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ValueSetting`1.DisplayName">
            <summary>
                The value display name in messages
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ValueSetting`1.MinValue">
            <summary>
                The min allowed value. Value is always included
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ValueSetting`1.MaxValue">
            <summary>
                The max allowed value. Value is always included
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ValueSetting`1.UpperWarningLimit">
            <summary>
                The upper warning limit value. Values larger than this limit can be problematic
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.ValueSetting`1.LowerWarningLimit">
            <summary>
                The lower warning limit value. Values lesser than this limit can be problematic
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.#ctor(System.String,`0,`0,`0,`0)">
            <summary>
                Creates new value restriction with display name and all four restricted values
            </summary>
            <param name="displayName"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="upperWarningLimit"></param>
            <param name="lowerWarningLimit"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.#ctor(System.String,`0,`0)">
            <summary>
                Creates new value restriction with only min and max value set. Warning values are set to the same values
            </summary>
            <param name="displayName"></param>
            <param name="minValue"></param>
            <param name="maxValue"></param>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.#ctor">
            <summary>
                Default construct new value setting
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.GetMinMaxTuple">
            <summary>
                Get the minimal and maximal value as a two value tuple
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.ParseValue(`0,System.Collections.Generic.IEnumerable{Mocassin.Framework.Messaging.WarningMessage}@)">
            <summary>
                Parses the value and checks for limitation violations and supplies affiliated warning messages. Returned integer
                indicates level of violation
            </summary>
            <param name="value"></param>
            <param name="warnings"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.ParseValue(`0)">
            <summary>
                Parses the value and returns 0 if the value is valid. Returns +/- 1 if the warning limit is reached, returns +/- 2
                if the limitation is violated
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.ToConstraint">
            <summary>
                Creates a <see cref="T:Mocassin.Framework.Constraints.IValueConstraint`2"/> of matching type from the setting
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.ParseUpper(`0)">
            <summary>
                Parses the value for violation of upper warning limit or restriction value. Returns 0, 1 or 2 depending on the
                violation
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.ParseLower(`0)">
            <summary>
                Parses the value for violation of lower warning limit or restriction value. Returns 0, -1 or -2 depending on the
                violation
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.ValueSetting`1.SetValues(`0[])">
            <summary>
                Sorts a set of 4 so they form a valid value restriction
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinModuleSettings">
            <summary>
            Abstract base class for module settings objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinModuleSettings.Naming">
            <summary>
                The <see cref="T:Mocassin.Model.ModelProject.StringSetting"/> for general naming
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.MocassinModuleSettings.IsValidForModule(System.Type)">
            <summary>
            Checks if the module settings is a valid settings object for the passed module type
            </summary>
            <param name="moduleType"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.ModelProject.MocassinModuleSettings.InitAsDefault">
            <summary>
            Initializes the module settings object to ist default parameter set
            </summary>
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinConcurrencySettings">
            <summary>
                Concurrency settings that specifies how long the program should wait for concurrent read/write access to free
                dependent locks before it throws timeout exceptions
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinConcurrencySettings.MaxAttempts">
            <summary>
                The maximum number of locking attempts
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinConcurrencySettings.AttemptInterval">
            <summary>
                The interval in between locking attempts
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinConcurrencySettings.AttemptIntervalString">
            <summary>
                Get or set the time interval as a string representation
            </summary>
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinConstantsSettings">
            <summary>
                Basic settings that contain the values for the nature constants
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinConstantsSettings.BoltzmannConstantSi">
            <summary>
                The boltzmann constant in SI units
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinConstantsSettings.UniversalGasConstantSi">
            <summary>
                Universal gas constant in SI units
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinConstantsSettings.VacuumPermittivitySi">
            <summary>
                The electric permittivity constant in Si units
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinConstantsSettings.ElementalChargeSi">
            <summary>
                The elemental charge constant in SI units
            </summary>
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinNumericSettings">
            <summary>
                Numeric settings class that stores numeric properties and tolerance information for the geometry calculations of
                the model process
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinNumericSettings.UlpValue">
            <summary>
                The maximum number of ULP steps that are allowed in numeric calculations using ULP comparisons
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinNumericSettings.RangeValue">
            <summary>
                The maximum absolute tolerance in Angstrom that is allowed in numeric calculations using absolute comparisons
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinNumericSettings.FactorValue">
            <summary>
                The maximum relative tolerance that is allowed in numeric calculations using relative comparisons
            </summary>
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinSymmetrySettings">
            <summary>
                Basic symmetry settings that contain information on space group and crystal system handling and databases
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSymmetrySettings.SpaceGroupDbPath">
            <summary>
                The full filepath to the space group database
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSymmetrySettings.VectorTolerance">
            <summary>
                The tolerance value for equality comparisons of the vectors during wyckoff position extension
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSymmetrySettings.ParameterTolerance">
            <summary>
                The tolerance value for equality comparisons of parameters in the crystal systems
            </summary>
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinEnergySettings">
            <summary>
                Settings data object for the energy managing module
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinEnergySettings.EnforceGroupConsistency">
            <summary>
                Boolean flag for the group consistency enforcement. If true, groups are automatically translated and added to all
                positions they include
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinEnergySettings.AtomsPerGroup">
            <summary>
                Value restriction setting for the number of atoms per group
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinEnergySettings.GroupsPerPosition">
            <summary>
                Value restriction setting for the number of groups per unit cell position
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinEnergySettings.PermutationsPerGroup">
            <summary>
                Value restriction setting for the number of non-unique permutations per group
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinEnergySettings.PositionsPerStable">
            <summary>
                Value restriction setting for the number of positions per stable environment
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinEnergySettings.PositionsPerUnstable">
            <summary>
                Value restriction setting for the number of positions per unstable environment
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinEnergySettings.PairEnergies">
            <summary>
                Value restriction setting for the energy values of pair interactions
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinEnergySettings.GroupEnergies">
            <summary>
                Value restriction setting for the energy values of group interactions
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.MocassinEnergySettings.InitAsDefault">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinLatticeSettings">
            <summary>
                Settings data object for the energy managing module
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.MocassinLatticeSettings.InitAsDefault">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinParticleSettings">
            <summary>
                Settings data object for the element managing module
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinParticleSettings.ParticleCharge">
            <summary>
                The value restriction setting for particle charges
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinParticleSettings.ParticleCount">
            <summary>
                The value restriction setting for the particle count
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinParticleSettings.ParticleSetCount">
            <summary>
                The value restriction setting for the particle set count
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinParticleSettings.SymbolNaming">
            <summary>
                The regular expression for the particle symbol
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.MocassinParticleSettings.InitAsDefault">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinSimulationSettings">
            <summary>
                Settings object for the simulation manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.Temperature">
            <summary>
                The value restriction setting for simulation temperature
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.Doping">
            <summary>
                The value restriction setting for simulation doping (Setting this beyond [0,1] may crash application)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.ElectricField">
            <summary>
                The value restriction setting for simulation electric field in [V/m] (KMC only)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.Normalization">
            <summary>
                The value restriction setting for simulation normalization (KMC only)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.TargetMcsp">
            <summary>
                The value restriction setting for simulation monte carlo steps per particle
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.PreRunMcsp">
            <summary>
                The value restriction setting for simulation monte carlo steps per particle of the pre run
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.WriteCallCount">
            <summary>
                The value restriction for the number of calls to the write functions
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.JobCount">
            <summary>
                The value restriction for the job count of a single simulation
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.UnitCellsPerDirection">
            <summary>
                The value restriction setting for simulation super-cell sizes in a single direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.SupercellPositionCount">
            <summary>
                The value restriction setting for the simulation super-cell position count
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.BreakTolerance">
            <summary>
                The value restriction setting for simulation break tolerance (MMC only)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.BreakSampleLength">
            <summary>
                The value restriction setting for simulation break sample length (MMC only)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.BreakSampleInterval">
            <summary>
                The value restriction setting for simulation break sampling interval (MMC only)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.ResultSampleLength">
            <summary>
                The value restriction setting for simulation result sample length (MMC only)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.SeriesPermutation">
            <summary>
                The value restriction setting for simulation permutation count of a single simulation series
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.SingleValuePermutation">
            <summary>
                The value restriction setting for a single value series permutation count
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.ForceTerminationTime">
            <summary>
                The value restriction for simulation forced termination by runtime time span in [h]
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.TerminationSuccessRate">
            <summary>
                The value restriction setting for simulation forced termination by success rate
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.EnergySetCount">
            <summary>
                The value restriction setting for simulation energy set count (File loaded energy sets)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.TransitionCount">
            <summary>
                The value restriction setting for the number of transitions per simulation
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinSimulationSettings.Seeding">
            <summary>
                The regex pattern for the restriction of simulation related string definitions
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.MocassinSimulationSettings.InitAsDefault">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinStructureSettings">
            <summary>
                The basic settings for the structure managing module data validations
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinStructureSettings.BasePositionCount">
            <summary>
                The value restriction setting for the structure base position count
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinStructureSettings.TotalPositionCount">
            <summary>
                The value restriction setting for the structure total position count (After application of space group wyckoff
                extension)
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinStructureSettings.CellParameter">
            <summary>
                The value restriction for the structure cell parameter length in [Angstrom]
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.MocassinStructureSettings.InitAsDefault">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.ModelProject.MocassinTransitionSettings">
            <summary>
                Basic settings object for transitions that limits the possible input for transitions
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinTransitionSettings.TransitionCount">
            <summary>
                The value restriction setting for the number of transitions
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinTransitionSettings.TransitionLength">
            <summary>
                The value restriction setting for the transition length
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinTransitionSettings.AttemptFrequency">
            <summary>
                The value restriction for attempt frequencies
            </summary>
        </member>
        <member name="P:Mocassin.Model.ModelProject.MocassinTransitionSettings.FilterNotRecognizedRuleTypes">
            <summary>
                Boolean flag to activate automatic filtering of unrecognized rule movement types during rule generation
            </summary>
        </member>
        <member name="M:Mocassin.Model.ModelProject.MocassinTransitionSettings.InitAsDefault">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.IParticleManager">
            <summary>
                Represents a particle manager that handles input, output and distribution of model particles/species inside a
                simulation project
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IParticleManager.QueryPort">
            <summary>
                The particle manager query port that offers particle related functionality
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IParticleManager.EventPort">
            <summary>
                The particle manager notification port that offers 'hot' notifications about changes in the manage data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Particles.IParticleCachePort">
            <summary>
                Represents a particle cache port that provides extended model data for the particles
            </summary>
        </member>
        <member name="T:Mocassin.Model.Particles.IParticleDataPort">
            <summary>
                Represents a read only data port for the particle manager that allows data access on the particle manager base data
                through interfaces
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IParticleDataPort.ParticleCount">
            <summary>
                Get the number of defined particles (valid and deprecated) in the data object
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IParticleDataPort.ParticleSetCount">
            <summary>
                Get the number of defined particle sets (valid and deprecated) in the data object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleDataPort.GetValidParticleCount">
            <summary>
                Get the current number of valid particles (Deprecated ones are excluded)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleDataPort.GetParticle(System.Int32)">
            <summary>
                Get a particle interface by index, also returns deprecated particles
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleDataPort.GetParticleSet(System.Int32)">
            <summary>
                Get a particle set interface by index, also returns deprecated particle sets
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleDataPort.GetValidParticleSetCount">
            <summary>
                Get the current number of valid particle sets (Deprecated ones are excluded)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleDataPort.GetValidParticlesAsSet">
            <summary>
                Get a particle set interface with the index (-1) that contains all valid particles
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleDataPort.GetParticles">
            <summary>
                Get a read only collection of the particle interfaces stored in the manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleDataPort.GetParticleSets">
            <summary>
                Get a read only collection of the particle set interfaces stored in the manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleDataPort.GetCleanParticleIndexing">
            <summary>
                Get a clean indexing information for the particles that is equivalent to the reindexing info after a deprecated
                data cleanup
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleDataPort.GetCleanParticleSetIndexing">
            <summary>
                Get a clean indexing information for the particle sets that is equivalent to the reindexing info after a deprecated
                data cleanup
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Particles.IParticleEventPort">
            <summary>
                Represents a push notification port for the particle manager that provides update events about the current state of
                the particle manager model data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Particles.IParticleInputPort">
            <summary>
                Represents an input port for the particle manager that offers data input operations
            </summary>
        </member>
        <member name="T:Mocassin.Model.Particles.IParticleQueryPort">
            <summary>
                Represents a query port of the particle manager that provides safe access to data and internal logic
            </summary>
        </member>
        <member name="T:Mocassin.Model.Particles.IParticleUpdatePort">
            <summary>
                Represents and update port for the particle manager that handles reactions to changes in subscribed managers
            </summary>
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleCacheManager">
            <summary>
                Basic implementation of the particle data cache manager that provides access to on-demand extended model data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleCacheManager.#ctor(Mocassin.Model.Particles.ParticleModelCache,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleDataManager">
            <summary>
                Basic particle read only data manager that provides read only access to the particle manager base data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.#ctor(Mocassin.Model.Particles.ParticleModelData)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.GetParticles">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.GetParticleSets">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleDataManager.ParticleCount">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleDataManager.ParticleSetCount">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.GetValidParticleCount">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.GetValidParticleSetCount">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.GetValidParticlesAsSet">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.GetParticle(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.GetParticleSet(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.GetCleanParticleIndexing">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleDataManager.GetCleanParticleSetIndexing">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleEventManager">
            <summary>
                Basic particle notification manager that provides push based notifications about changes in the particle manager
                reference data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleInputManager">
            <summary>
                Basic particle input manager that handles the controlled access to the particle manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleInputManager.#ctor(Mocassin.Model.Particles.ParticleModelData,Mocassin.Model.Particles.ParticleEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleInputManager.TryRegisterNewParticle(Mocassin.Model.Particles.IParticle)">
            <summary>
                Registers a new particle to the manager if it passes validation (Awaits distribution of affiliated events in case
                of operation success)
            </summary>
            <param name="particle"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleInputManager.TryRegisterNewParticleSet(Mocassin.Model.Particles.IParticleSet)">
            <summary>
                Registers a new particle set to the manager if it passes validation (Awaits distribution of affiliated events in
                case of operation success)
            </summary>
            <param name="particleSet"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleInputManager.TryRemoveParticle(Mocassin.Model.Particles.IParticle)">
            <summary>
                Removes a particle from the manager by deprecation if possible (Awaits distribution of affiliated events in case of
                operation success)
            </summary>
            <param name="particle"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleInputManager.TryRemoveParticleSet(Mocassin.Model.Particles.IParticleSet)">
            <summary>
                Removes a particle set from the manager by deprecation if possible (Awaits distribution of affiliated events in
                case of operation success)
            </summary>
            <param name="particleSet"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleInputManager.TryReplaceParticle(Mocassin.Model.Particles.IParticle,Mocassin.Model.Particles.IParticle)">
            <summary>
                Replaces a particle in the manager by another if the new one passes validation (Awaits distribution of affiliated
                events in case of operation success)
            </summary>
            <param name="orgParticle"></param>
            <param name="newParticle"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleInputManager.TryReplaceParticleSet(Mocassin.Model.Particles.IParticleSet,Mocassin.Model.Particles.IParticleSet)">
            <summary>
                Replaces a particle set in the manager by another if the new one passes validation (Awaits distribution of
                affiliated events in case of operation success)
            </summary>
            <param name="orgSet"></param>
            <param name="newSet"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleInputManager.TryCleanDeprecatedData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleInputManager.CreateDataConflictHandlerProvider">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleQueryManager">
            <summary>
                Basic particle query manager that provides concurrency safe queries and readers for the particle data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleQueryManager.#ctor(Mocassin.Model.Particles.ParticleModelData,Mocassin.Model.Particles.ParticleModelCache,Mocassin.Model.Basic.AccessLockSource)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleUpdateManager">
            <summary>
                Basic implementation of the particle update manager that handles event subscriptions and reactions to external
                change events
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleUpdateManager.#ctor(Mocassin.Model.Particles.ParticleModelData,Mocassin.Model.Particles.ParticleEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.ConflictHandling.ParticleDataConflictHandlerProvider">
            <summary>
                Resolver provider for all particle conflict resolvers that handle internal data conflicts of the particle manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ConflictHandling.ParticleDataConflictHandlerProvider.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleManager">
            <inheritdoc cref="T:Mocassin.Model.Particles.IParticleManager"/>
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleManager.InputPort">
            <summary>
                Particle manager data input access port that handles user defined model data changes to the manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleManager.QueryPort">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleManager.EventPort">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleManager.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Particles.ParticleModelData)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleManager.CreateValidationService(Mocassin.Model.ModelProject.ProjectSettings)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleManager.GetManagerInterfaceType">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleModelCache">
            <summary>
                Cache for extended structure data that stores 'on-demand' calculated dependent data for faster access until the
                data is no longer valid
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleModelCache.#ctor(Mocassin.Model.Basic.IModelEventPort,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleModelCache.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleModelData">
            <summary>
                Basic particle manager reference data that represents the base data required for load/save actions and caluclation
                of all dependent data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleModelData.Particles">
            <summary>
                The list of currently known particles that contains at least the 'Void-Particle' at index 0
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleModelData.ParticleSets">
            <summary>
                The list of currently known particle sets
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleModelData.CreateNew">
            <summary>
                Creates a new particle ref data object with a 'Void-Particle' and 'Void-Set' both at index 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleModelData.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleModelData.ResetToDefault">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleValidationService">
            <summary>
                Particle validation service that provide validations for new particle related data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleValidationService.Settings">
            <summary>
                The particle settings used for validations
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleValidationService.#ctor(Mocassin.Model.ModelProject.MocassinParticleSettings,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleValidationService.ValidateParticle(Mocassin.Model.Particles.IParticle,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Particles.IParticleDataPort})">
            <summary>
                Validates a particle interface and checks if the contents are not a duplicate using the provided data reader
            </summary>
            <param name="particle"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleValidationService.ValidateParticleSet(Mocassin.Model.Particles.IParticleSet,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Particles.IParticleDataPort})">
            <summary>
                Validates a particle set interface and checks if the contents are not a duplicate using the provided data reader
            </summary>
            <param name="particleSet"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Particles.Validators.ParticleSetValidator">
            <summary>
                Validator for new particle set model objects that checks for compatibility with existing data and general object
                constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleSetValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinParticleSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Particles.IParticleDataPort})">
            <summary>
                Creates new validator t´hat uses the provided project services, settings object and data reader
            </summary>
            <param name="modelProject"></param>
            <param name="settings"></param>
            <param name="dataReader"></param>
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleSetValidator.Validate(Mocassin.Model.Particles.IParticleSet)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleSetValidator.AddIndexOutOfRangeValidation(Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that a free slot for the particle set exists in the model data and adds the result to the validation
                report
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleSetValidator.AddObjectUniquenessValidation(Mocassin.Model.Particles.IParticleSet,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the uniqueness of a particle set in the context of existing data (Ignores deprecated data objects in the
                existing data) and adds the result to the validation report
            </summary>
            <param name="particleSet"></param>
            <param name="result"></param>
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleSetValidator.AddOccupantsValidation(Mocassin.Model.Particles.IParticleSet,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validate the occupants of a particle set, this functions throws if deprecated entries are found or the set contains
                particle indexes that do not exist and adds the result to the validation report
            </summary>
            <param name="particleSet"></param>
            <param name="result"></param>
        </member>
        <member name="T:Mocassin.Model.Particles.Validators.ParticleValidator">
            <summary>
                Validator for new particle model objects that checks for compatibility with existing data and general object
                constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinParticleSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Particles.IParticleDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleValidator.Validate(Mocassin.Model.Particles.IParticle)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleValidator.AddStringPropertyValidations(Mocassin.Model.Particles.IParticle,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates all string properties of the particle and adds the results to the validation report
            </summary>
            <param name="particle"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleValidator.AddChargeValidation(Mocassin.Model.Particles.IParticle,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates if a particle fulfills the charge restrictions and adds the reult to the validation report
            </summary>
            <param name="particle"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleValidator.AddIndexOutOfRangeValidation(Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that a free slot for the particle exists in the model data and adds the result to the report
            </summary>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Particles.Validators.ParticleValidator.AddObjectUniquenessValidation(Mocassin.Model.Particles.IParticle,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the uniqueness of the particle in the context of existing data (Ignores deprecated data objects in the
                existing data) and adds the result to the validation report
            </summary>
            <param name="particle"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Particles.IParticleSet">
            <summary>
                Represents a set of model particles that describe multiple possible species for one position in a simulation
                project
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IParticleSet.ParticleCount">
            <summary>
                Get the number of particles in this particle set
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleSet.AsBitmask">
            <summary>
                Get the bitmask encoded version of the particle set
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleSet.GetParticles">
            <summary>
                Get the sequence of particles that belong to this particle set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleSet.EqualsInModelProperties(Mocassin.Model.Particles.IParticleSet)">
            <summary>
                Check if the particle set interface equals another in all model relevant properties
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleSet.IsEmpty">
            <summary>
                Checks if the particle set occupation mask is 0 therefore carries no possible occupation other than void
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticleSet.AsLong">
            <summary>
                Returns the indices of the contained particles as a long value
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Particles.ParticleSet">
            <inheritdoc cref="T:Mocassin.Model.Particles.IParticleSet" />
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleSet.ParticleCount">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleSet.Particles">
            <summary>
                The list of particles belonging to the particle set
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.GetParticles">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.AsBitmask">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.CreateEmpty">
            <summary>
                Creates new empty particle set that does not allow any occupants (Always has the index 0)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.EqualsInModelProperties(Mocassin.Model.Particles.IParticleSet)">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.ParticleSet.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.IsEmpty">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.AsLong">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.ParticleSet.ToSortedSet(System.Collections.Generic.IEnumerable{Mocassin.Model.Particles.IParticle},System.Collections.Generic.IComparer{Mocassin.Model.Particles.IParticle})">
            <summary>
                Takes a sequence of particles objects and creates a new sorted particle set that contains only the unique ones
                using the provided comparer or a default particle comparer
            </summary>
            <param name="particles"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Particles.IParticle">
            <summary>
                Represents a single model species in a simulation project
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IParticle.Charge">
            <summary>
                The charge value in electron volts
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IParticle.Symbol">
            <summary>
                The short description symbol
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IParticle.IsVacancy">
            <summary>
                Flag that indicates that the particle supports usage as a vacancy
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IParticle.IsVoid">
            <summary>
                Flag that marks the particle as the 'Null-Particle' representing the nothing state
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticle.EqualsInModelProperties(Mocassin.Model.Particles.IParticle,System.Collections.Generic.IComparer{System.Double})">
            <summary>
                Compares to another particle interface for equality in model relevant properties using the provided double comparer
                for the charge values
            </summary>
            <param name="other"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.IParticle.GetIonString">
            <summary>
                Get the <see cref="T:Mocassin.Model.Particles.IParticle"/> as a typical ion description <see cref="T:System.String"/> used in chemistry
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Particles.Particle">
            <inheritdoc cref="T:Mocassin.Model.Particles.IParticle" />
        </member>
        <member name="F:Mocassin.Model.Particles.Particle.VoidIndex">
            <summary>
                The const index that identifies the void particle
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.Particle.Charge">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.Particle.Symbol">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.Particle.IsVacancy">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.Particle.IsVoid">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.Particle.CompareTo(Mocassin.Model.Particles.IParticle)">
            <summary>
                Compares particle by name, symbol and then charge (Charge is not compared with tolerance)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.Particle.EqualsInModelProperties(Mocassin.Model.Particles.IParticle,System.Collections.Generic.IComparer{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.Particle.GetIonString">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.Particle.CreateVoid">
            <summary>
                Creates a void particle, this particle represents an active but context unavailable particle and should always have
                the index 0 in a particle manager
            </summary>
            <returns></returns>
        </member>
        <member name="P:Mocassin.Model.Particles.Particle.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.Particle.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.Particle.Equals(Mocassin.Model.Particles.IParticle)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.Particle.GetHashCode">
            <summary>
                Get the hash code of the particle based upon the particle index
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Particles.IOccupationState">
            <summary>
                Represents an occupation state that fully describes the occupation of a set of positions as a set of particles
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IOccupationState.StateLength">
            <summary>
                The number of positions within the occupation state
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IOccupationState.Particles">
            <summary>
                Read only list of particles that describe the occupation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.IOccupationState.Item(System.Int32)">
            <summary>
                Direct index access to the particle at the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Particles.OccupationState">
            <inheritdoc cref="T:Mocassin.Model.Particles.IOccupationState" />
        </member>
        <member name="P:Mocassin.Model.Particles.OccupationState.StateLength">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.OccupationState.Particles">
            <summary>
                The particle array that describes the occupation state of a sequence of positions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Particles.OccupationState.Mocassin#Model#Particles#IOccupationState#Particles">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Particles.OccupationState.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.OccupationState.#ctor">
            <summary>
                Default construct an empty occupation state
            </summary>
        </member>
        <member name="M:Mocassin.Model.Particles.OccupationState.#ctor(Mocassin.Model.Particles.IOccupationState)">
            <summary>
                Construct a new occupation state from an occupation state interface
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Mocassin.Model.Particles.OccupationState.DeepCopy">
            <summary>
                Creates a deep copy of the occupation state
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.OccupationState.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.OccupationState.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.OccupationState.Equals(Mocassin.Model.Particles.IOccupationState)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.OccupationState.Equals(Mocassin.Model.Particles.OccupationState)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Particles.OccupationState.GetHashCode">
            <summary>
                Get the hash code of the particle set
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Particles.OccupationState.CompareTo(Mocassin.Model.Particles.IOccupationState)">
            <summary>
                Compares to other occupation state
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Simulations.ISimulationManager">
            <summary>
                Represents a simulation manager that handles definition and packaging of simulation sets for simulator encoding
            </summary>
        </member>
        <member name="T:Mocassin.Model.Simulations.ISimulationCachePort">
            <summary>
                Represents an access port to the simulation manager data cache that handles supply of cache-able on-demand data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Simulations.ISimulationDataPort">
            <summary>
                Represents an access port to the simulation manager model data that provides read only data access
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.ISimulationDataPort.GetKineticSimulation(System.Int32)">
            <summary>
                Get the kinetic simulation at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.ISimulationDataPort.GetKineticSimulations">
            <summary>
                Get a read only list of all defined kinetic simulations
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.ISimulationDataPort.GetMetropolisSimulation(System.Int32)">
            <summary>
                Get the metropolis simulation at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.ISimulationDataPort.GetMetropolisSimulations">
            <summary>
                Get a read only list of all defined metropolis simulations
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Simulations.ISimulationEventPort">
            <summary>
                Represents an event port for a simulation manager that provides observables for subscriptions to internal data
                changes
            </summary>
        </member>
        <member name="T:Mocassin.Model.Simulations.ISimulationInputPort">
            <summary>
                Represents an input port for a simulation manager that handles data queries for adding, removing and changeing
                simulation model objects
            </summary>
        </member>
        <member name="T:Mocassin.Model.Simulations.ISimulationQueryPort">
            <summary>
                Represents a query port for a simulation manager that provides save query access to the simulation model data and
                cache objects
            </summary>
        </member>
        <member name="T:Mocassin.Model.Simulations.ISimulationUpdatePort">
            <summary>
                Represents an update port for a simulation manager that handles subscriptions and reactions to other management
                event ports
            </summary>
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationCacheManager">
            <summary>
                Implementation of the simulation cache manager that handles creation and supply of on-demand simulation data
                objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationCacheManager.#ctor(Mocassin.Model.Simulations.SimulationModelCache,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationDataManager">
            <summary>
                Simulation data manager implementation that provided read only access to the simulation model data object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationDataManager.#ctor(Mocassin.Model.Simulations.SimulationModelData)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationDataManager.GetKineticSimulation(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationDataManager.GetKineticSimulations">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationDataManager.GetMetropolisSimulation(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationDataManager.GetMetropolisSimulations">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationEventManager">
            <summary>
                Implementation of the simulation event manager that offers subscriptions based push notifications about simulation
                model data changes
            </summary>
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationInputManager">
            <inheritdoc cref="T:Mocassin.Model.Simulations.ISimulationInputPort" />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationInputManager.#ctor(Mocassin.Model.Simulations.SimulationModelData,Mocassin.Model.Simulations.SimulationEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationInputManager.TryRegisterNewObject(Mocassin.Model.Simulations.IKineticSimulation)">
            <summary>
                Registers a new kinetic simulation to the manager if it passes validation (Awaits distribution of affiliated events
                in case of operation success)
            </summary>
            <param name="simulation"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationInputManager.TryRemoveObject(Mocassin.Model.Simulations.IKineticSimulation)">
            <summary>
                Removes a kinetic simulation from the manager by deprecation if possible (Awaits distribution of affiliated events
                in case of operation success)
            </summary>
            <param name="simulation"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationInputManager.TryReplaceParticle(Mocassin.Model.Simulations.IKineticSimulation,Mocassin.Model.Simulations.IKineticSimulation)">
            <summary>
                Replaces a kinetic simulation in the manager by another if the new one passes validation (Awaits distribution of
                affiliated events in case of operation success)
            </summary>
            <param name="orgSimulation"></param>
            <param name="newSimulation"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationInputManager.TryRegisterNewObject(Mocassin.Model.Simulations.IMetropolisSimulation)">
            <summary>
                Registers a new metropolis simulation to the manager if it passes validation (Awaits distribution of affiliated
                events in case of operation success)
            </summary>
            <param name="simulation"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationInputManager.TryRemoveObject(Mocassin.Model.Simulations.IMetropolisSimulation)">
            <summary>
                Removes a metropolis simulation from the manager by deprecation if possible (Awaits distribution of affiliated
                events in case of operation success)
            </summary>
            <param name="simulation"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationInputManager.TryReplaceParticle(Mocassin.Model.Simulations.IMetropolisSimulation,Mocassin.Model.Simulations.IMetropolisSimulation)">
            <summary>
                Replaces a metropolis simulation in the manager by another if the new one passes validation (Awaits distribution of
                affiliated events in case of operation success)
            </summary>
            <param name="orgSimulation"></param>
            <param name="newSimulation"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationInputManager.CreateDataConflictHandlerProvider">
            <summary>
                Get the conflict handler provider that supplies handlers for internal data conflicts due to user induced changes
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationInputManager.TryCleanDeprecatedData">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationQueryManager">
            <summary>
                Implementation of the simulation query manager that provides save query based access to the simulation model data
                and cache
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationQueryManager.#ctor(Mocassin.Model.Simulations.SimulationModelData,Mocassin.Model.Simulations.SimulationModelCache,Mocassin.Model.Basic.AccessLockSource)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationUpdateManager">
            <summary>
                Implementation of the simulation update manager that handles subscriptions and reactions to events on other
                managers
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationUpdateManager.#ctor(Mocassin.Model.Simulations.SimulationModelData,Mocassin.Model.Simulations.SimulationEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.ConflictHandling.SimulationObjectChangedHandler">
            <summary>
                Simulation object change handler that handles internal data conflict in the simulation manager when a model object
                is changed
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.SimulationObjectChangedHandler.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.SimulationObjectChangedHandler.ResolveSpaceGroupChange(Mocassin.Model.Simulations.KineticSimulation,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Simulations.SimulationModelData})">
            <summary>
                Resolver method that handles the required internal changes if the <see cref="T:Mocassin.Model.Simulations.KineticSimulation"/> changes
            </summary>
            <param name="simulation"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.SimulationObjectChangedHandler.ResolveCellParametersChange(Mocassin.Model.Simulations.MetropolisSimulation,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Simulations.SimulationModelData})">
            <summary>
                Resolver method that handles the required internal changes if the <see cref="T:Mocassin.Model.Simulations.MetropolisSimulation"/> changes
            </summary>
            <param name="simulation"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Simulations.ConflictHandling.KineticSimulationChangeHandler">
            <summary>
                Conflict Handler implementation of <see cref="T:Mocassin.Model.Simulations.ConflictHandling.SimulationChangeHandlerBase`1" /> for changes in
                <see cref="T:Mocassin.Model.Simulations.KineticSimulation" /> objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.KineticSimulationChangeHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Simulations.SimulationModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.ConflictHandling.MetropolisSimulationChangeHandler">
            <summary>
                Conflict Handler implementation of <see cref="T:Mocassin.Model.Simulations.ConflictHandling.SimulationChangeHandlerBase`1" /> for changes in
                <see cref="T:Mocassin.Model.Simulations.MetropolisSimulation" /> objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.MetropolisSimulationChangeHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Simulations.SimulationModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.ConflictHandling.SimulationChangeHandlerBase`1">
            <summary>
                Base class for simulation object change handlers. Handles base data conflicts of simulation objects with internal
                simulation data or
                within the object itself
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.SimulationChangeHandlerBase`1.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Simulations.SimulationModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.SimulationChangeHandlerBase`1.HandleConflicts(`0)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.SimulationChangeHandlerBase`1.HandleUndefinedOrEmptyRngSeed(Mocassin.Model.Simulations.SimulationBase,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Handles a potentially undefined RNG seed string and replace it with a GUID
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Simulations.ConflictHandling.SimulationDataConflictHandlerProvider">
            <summary>
                Conflict handler provider for the simulation manager related model objects and parameters
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.SimulationDataConflictHandlerProvider.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.ConflictHandling.SimulationDataConflictHandlerProvider.CreateObjectHandler">
            <summary>
                Creation method for the simulation added conflict handler
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationManager">
            <summary>
            Implementation of the simulation manager that handles the creation and packaging of simulation sets for simulation encoding
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationManager.QueryPort">
            <summary>
            Get access to the simulation manager query port
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationManager.InputPort">
            <summary>
            Get access to the simulation manager input port
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationManager.EventPort">
            <summary>
            Get access to the simulatuion manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationManager.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Simulations.SimulationModelData)">
            <summary>
            Create new simulation manager with the provided project services and manages the provided simulation data object
            </summary>
            <param name="modelProject"></param>
            <param name="data"></param>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationManager.GetManagerInterfaceType">
            <summary>
            Get the type of the manager interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationManager.CreateValidationService(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
            Get the validation service for simulation manager related parameters and objects
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationModelCache">
            <summary>
            The simulation manager data cache object that stores and supplies on-demand simulation data objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationModelCache.#ctor(Mocassin.Model.Basic.IModelEventPort,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationModelCache.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationModelData">
            <summary>
                The simulation model data object that stores model objects and parameters affiliated with simulation package
                building
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationModelData.KineticSimulations">
            <summary>
                List of all indexed single kinetic simulation model objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationModelData.MetropolisSimulations">
            <summary>
                List of all indexed single metropolis simulation model objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationModelData.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationModelData.ResetToDefault">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationModelData.CreateNew">
            <summary>
                Creates a new default simulation model data object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationValidationService">
            <summary>
                Implementation of the validation service for simulation manager related model objects and parameters
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationValidationService.Settings">
            <summary>
                The simulation settings used in the validation methods
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationValidationService.#ctor(Mocassin.Model.ModelProject.MocassinSimulationSettings,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationValidationService.Validate(Mocassin.Model.Simulations.IKineticSimulation,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Simulations.ISimulationDataPort})">
            <summary>
                Validates the passed kinetic simulation and returns the validation report
            </summary>
            <param name="simulation"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationValidationService.Validate(Mocassin.Model.Simulations.IMetropolisSimulation,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Simulations.ISimulationDataPort})">
            <summary>
                Validates the passed metropolis simulation and returns the validation report
            </summary>
            <param name="simulation"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Simulations.KineticSimulationValidator">
            <summary>
                Validator for the kinetic simulation model objects that extends the base simulation validator with kinetic
                specific methods
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.KineticSimulationValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinSimulationSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Simulations.ISimulationDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.KineticSimulationValidator.Validate(Mocassin.Model.Simulations.IKineticSimulation)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.KineticSimulationValidator.AddPhysicalParameterValidations(Mocassin.Model.Simulations.IKineticSimulation,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the physical parameters of the kinetic simulation and adds the results to the validation report
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Simulations.KineticSimulationValidator.AddTransitionsValidation(Mocassin.Model.Simulations.IKineticSimulation,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the transitions affiliated with the kinetic simulation and adds the results to the validation report
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Simulations.MetropolisSimulationValidator">
            <summary>
                Validator for the metropolis simulation model objects that extends the base simulation validator with metropolis
                specific methods
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.MetropolisSimulationValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinSimulationSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Simulations.ISimulationDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.MetropolisSimulationValidator.Validate(Mocassin.Model.Simulations.IMetropolisSimulation)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.MetropolisSimulationValidator.AddBreakCriteriaValidations(Mocassin.Model.Simulations.IMetropolisSimulation,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the metropolis specific break criteria of the simulation and adds the results to the validation report
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Simulations.MetropolisSimulationValidator.AddTransitionsValidation(Mocassin.Model.Simulations.IMetropolisSimulation,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the transitions of the simulation and adds the results to the validation report
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationBaseValidator">
            <summary>
                Abstract base validator for all non specified simulations bases.
            </summary>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationBaseValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinSimulationSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Simulations.ISimulationDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationBaseValidator.Validate(Mocassin.Model.Simulations.ISimulation)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationBaseValidator.AddStringValidations(Mocassin.Model.Simulations.ISimulation,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the pattern limited string properties of the simulation base and adds the results to the validation
                report
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationBaseValidator.AddCounterValidations(Mocassin.Model.Simulations.ISimulation,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates all counter properties on the simulation base and adds the results to the validation report
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationBaseValidator.AddPhysicalValidations(Mocassin.Model.Simulations.ISimulation,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates all physical properties of the simulation and adds the results to the validation report
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationBaseValidator.AddTerminationLimitValidations(Mocassin.Model.Simulations.ISimulation,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates all preliminary termination limits of the simulation and adds the results to the validation report
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationBaseValidator.AddLatticeLinkValidation(Mocassin.Model.Simulations.ISimulation,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the lattice linking of the simulation and adds the results to the validation report
            </summary>
            <param name="simulation"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Simulations.ISimulation">
            <summary>
                Represents a custom simulation of undefined type that carries all reference data to generate an encoded simulation
                data set
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.ISimulation.CustomRngSeed">
            <summary>
                The user defined custom random number generator seed for lattice creation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.ISimulation.Temperature">
            <summary>
                Get the temperature value of the simulation in [K]
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.ISimulation.TargetMcsp">
            <summary>
                Get the target monte carlo steps per particle of the simulation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.ISimulation.WriteOutCount">
            <summary>
                The number of calls to data out (results, checkpoints,...) during the simulation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.ISimulation.JobCount">
            <summary>
                Get the number of jobs that should be created for this simulation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.ISimulation.SaveRunTimeLimit">
            <summary>
                Defines the save run time for a simulation. After the time span has passed a simulation will automatically
                terminate to avoid forced shutdown during data out operations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.ISimulation.LowerSuccessRateLimit">
            <summary>
                Get the minimal success rate a simulation has to reach. Simulations that fall below this value will be
                automatically terminated
            </summary>
        </member>
        <member name="T:Mocassin.Model.Simulations.SimulationBase">
            <inheritdoc cref="T:Mocassin.Model.Simulations.ISimulation" />
            <remarks> Abstract base class for simulation implementations </remarks>
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationBase.CustomRngSeed">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationBase.Temperature">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationBase.TargetMcsp">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationBase.WriteOutCount">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationBase.SaveRunTimeLimit">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationBase.LowerSuccessRateLimit">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.SimulationBase.JobCount">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.SimulationBase.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.IKineticSimulation">
            <summary>
                Represents a specialized custom simulation that describes the reference data for a kinetic monte carlo routine
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IKineticSimulation.PreRunMcsp">
            <summary>
                Get the number of pre run MCSP for relaxation and normalization
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IKineticSimulation.ElectricFieldVector">
            <summary>
                The electric field direction as a read only fractional vector
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IKineticSimulation.ElectricFieldMagnitude">
            <summary>
                Get the magnitude of the electric field in [V/m]
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IKineticSimulation.NormalizationProbability">
            <summary>
                The normalization probability that is used for in-simulation normalization of all jump attempts
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IKineticSimulation.Transitions">
            <summary>
                Get the list of kinetic transitions affiliated with the simulation
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Simulations.KineticSimulation">
            <inheritdoc cref="T:Mocassin.Model.Simulations.IKineticSimulation" />
        </member>
        <member name="P:Mocassin.Model.Simulations.KineticSimulation.Mocassin#Model#Simulations#IKineticSimulation#Transitions">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.KineticSimulation.PreRunMcsp">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.KineticSimulation.NormalizationProbability">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.KineticSimulation.ElectricFieldMagnitude">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.KineticSimulation.Transitions">
            <summary>
                The set of transitions attached to the simulation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.KineticSimulation.ElectricFieldVector">
            <summary>
                The electric field vector in fractional coordinates
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.KineticSimulation.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.KineticSimulation.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Simulations.IMetropolisSimulation">
            <summary>
                Represents a custom simulation that contains all reference data required to describe a metropolis simulation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IMetropolisSimulation.RelativeBreakTolerance">
            <summary>
                The energy value tolerance used for pre-target-mcsp simulation breaks
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IMetropolisSimulation.BreakSampleLength">
            <summary>
                Defines the length of the data pool used to check break conditions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IMetropolisSimulation.BreakSampleIntervalMcs">
            <summary>
                Defines the interval of value sampling for breaking in MCS, i.e. how often the simulation pushes a value to the
                break pool
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IMetropolisSimulation.ResultSampleMcs">
            <summary>
                Defines how many MCS the simulation will use after reaching break conditions to create averaged final results
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.IMetropolisSimulation.Transitions">
            <summary>
                Get a read only list of the linked metropolis transitions
            </summary>
        </member>
        <member name="T:Mocassin.Model.Simulations.MetropolisSimulation">
            <inheritdoc cref="T:Mocassin.Model.Simulations.IMetropolisSimulation" />
        </member>
        <member name="P:Mocassin.Model.Simulations.MetropolisSimulation.Mocassin#Model#Simulations#IMetropolisSimulation#Transitions">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.MetropolisSimulation.RelativeBreakTolerance">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.MetropolisSimulation.BreakSampleLength">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.MetropolisSimulation.BreakSampleIntervalMcs">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.MetropolisSimulation.ResultSampleMcs">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Simulations.MetropolisSimulation.Transitions">
            <summary>
                The metropolis transitions attached to this simulation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Simulations.MetropolisSimulation.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Simulations.MetropolisSimulation.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.IStructureManager">
            <summary>
                Represents a structure manager that handles input, output and distribution of structural data and positions inside
                a simulation project
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.IStructureCachePort">
            <summary>
                Represents a data port for extended structure manager data that is calculated and updated on a 'on-demand' basis
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetVectorEncoder">
            <summary>
                Get the vector encoder that handles transformations between 3D coordinates and unit cell encoded 4D vectors
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetExtendedPositionList(System.Int32)">
            <summary>
                Extends the unit cell position at specified index into the full wyckoff one sorted list (Returns empty list if
                cell position is deprecated)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetExtendedPositionLists">
            <summary>
                Extends all unit cell positions into sorted wyckoff one position lists (Each position is extended into a separated
                set of positions)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetLinearizedExtendedPositionList">
            <summary>
                Extends all unit cell positions into a sorted wyckoff one position list (All positions are extended and sorted into
                the same list)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetEncodedExtendedPositionList(System.Int32)">
            <summary>
                Extends the unit cell position with the specified index into the 4D encoded wyckoff set (Returns empty list if
                position is deprecated)
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetEncodedExtendedPositionLists">
            <summary>
                Extends all unit cell positions into their 4D encoded counterparts (Each position is extended into a separate set
                of positions)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetUnitCellProvider">
            <summary>
                Get the unit cell provider for the current unit cell
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetOccupationUnitCellProvider">
            <summary>
                Get a unit cell provider that only carries the occupations of the positions as entry information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetFullUnitCellProvider">
            <summary>
                Get a unit cell provider that carries the unit cell position interfaces for advanced analysis queries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetExtendedPositionList(Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
            <summary>
                Gets all positions of the unit cell that are symmetry equivalent to the position at the provided 4D vector
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetExtendedIndexToPositionList">
            <summary>
                Get read only list that assigns each extended position index the correct unit cell position interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetExtendedDummyPositionList(System.Int32)">
            <summary>
                Get a sorted unique list of all the wyckoff extension of the position dummy at the specified index
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetExtendedDummyPositionLists">
            <summary>
                Get a list interface of all extended wyckoff set lists for all dummy positions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetWyckoffIndexingLists">
            <summary>
                Get a 2D list set that assigns each wyckoff position its set of position indices in the unit cell
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureCachePort.GetLinearizedExtendedPositionCount">
            <summary>
                Get the number of existing positions if all unit cell positions are extended by the currently set space group
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.IStructureDataPort">
            <summary>
                Represents a read only data port for the structure manager that allows data access on the structure manager base
                data through interfaces
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureDataPort.GetSpaceGroupInfo">
            <summary>
                Get the current space group information
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureDataPort.GetCellParameters">
            <summary>
                Get the unit cell parameters
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureDataPort.GetStructureInfo">
            <summary>
                Get the structure miscellaneous info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureDataPort.GetCellReferencePositions">
            <summary>
                Get read only access to the unit cell position list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureDataPort.GetCellReferencePosition(System.Int32)">
            <summary>
                Get a unit cell position by index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureDataPort.GetDummyPositions">
            <summary>
                Get a read only list of all position dummies
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureDataPort.GetDummyPosition(System.Int32)">
            <summary>
                Get the position dummy at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.IStructureDataPort.GetCleanReferencePositionIndexing">
            <summary>
                Get a cleaned indexing for the unit cell positions (Where deprecated data is removed)
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.IStructureEventPort">
            <summary>
                Represents a push notification port for the structure manager that provides update events about the current state
                of the structure manager model data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.IStructureInputPort">
            <summary>
                Represents an input port for the structure manager that offers data input operations
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.IStructureQueryPort">
            <summary>
                Represents a query port of the structure manager that provides safe access to data and internal logic
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.IStructureUpdatePort">
            <summary>
                Represents an update port for a structure manager that accepts other modules event ports for update subscriptions
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.StructureCacheManager">
            <summary>
                Basic implementation of the structure cache manager that provides read only access to the extended 'on demand'
                structure data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.#ctor(Mocassin.Model.Structures.StructureModelCache,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetExtendedPositionList(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetExtendedPositionLists">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetLinearizedExtendedPositionList">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetEncodedExtendedPositionList(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetEncodedExtendedPositionLists">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetVectorEncoder">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetUnitCellProvider">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetOccupationUnitCellProvider">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetFullUnitCellProvider">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetExtendedPositionList(Mocassin.Mathematics.ValueTypes.CrystalVector4D@)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetExtendedIndexToPositionList">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetExtendedDummyPositionList(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetExtendedDummyPositionLists">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetWyckoffIndexingLists">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.GetLinearizedExtendedPositionCount">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateWyckoffIndexingSets">
            <summary>
                Creates the wyckoff position indexing lists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateExtendedDummyPositionLists">
            <summary>
                Creates the extended wyckoff position lists for all dummy positions. Deprecated dummies produce an empty list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateExtendedPositionLists">
            <summary>
                Creates the wyckoff extended position lists for all unit cell positions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateVectorEncoder">
            <summary>
                Creates the vector encoder for transformations between 3D and 4D systems
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateLinearizedExtendedPositionList">
            <summary>
                Creates the linearized version of the extended position list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateExtendedEncodedPositionLists">
            <summary>
                Creates all encoded versions of the extended position lists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateExtendedIndexToPositionList">
            <summary>
                Creates a sorted dictionary that assigns each extended position index the unit cell position that belongs to it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateUnitCellProvider">
            <summary>
                Creates the unit cell provider for the extended unit cell
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateFullUnitCellProvider">
            <summary>
                Creates the full unit cell provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.CreateOccupationUnitCellProvider">
            <summary>
                Creates a unit cell provider that carries only occupations as entries
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.MakeWyckoffExtensionDelegate(Mocassin.Mathematics.ValueTypes.Fractional3D,System.Boolean)">
            <summary>
                Creates a call delegate to create the extended position list of the provided vector or an empty set if the
                deprecated flag is passed
            </summary>
            <param name="vector"></param>
            <param name="isDeprecated"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureCacheManager.MakeWyckoffExtensionDelegate(Mocassin.Model.Structures.FractionalPosition,System.Boolean)">
            <summary>
                Creates a call delegate to create the extended position list of the provided fractional position or an empty set if
                the deprecated flag is passed
            </summary>
            <param name="position"></param>
            <param name="isDeprecated"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.StructureDataManager">
            <summary>
                Structure data manager that provides safe read only access to the structure base data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureDataManager.#ctor(Mocassin.Model.Structures.StructureModelData)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureDataManager.GetCellParameters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureDataManager.GetSpaceGroupInfo">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureDataManager.GetStructureInfo">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureDataManager.GetCellReferencePositions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureDataManager.GetCleanReferencePositionIndexing">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureDataManager.GetCellReferencePosition(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureDataManager.GetDummyPositions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureDataManager.GetDummyPosition(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.StructureEventManager">
            <summary>
                Basic structure notification manager that handles distribution of push based update notifications about changes in
                the structure manager base data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.StructureInputManager">
            <summary>
                Basic implementation of the structure input manager that handles validated adding, removal and replacement of
                structure base data by an outside source
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.#ctor(Mocassin.Model.Structures.StructureModelData,Mocassin.Model.Structures.StructureEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TryRegisterCellReferencePosition(Mocassin.Model.Structures.ICellReferencePosition)">
            <summary>
                Tries to register a new unit cell position in the manager if it passes validation (Awaits distribution of
                affiliated events on operation success)
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TryRemoveCellReferencePosition(Mocassin.Model.Structures.ICellReferencePosition)">
            <summary>
                Tries to remove a unit cell position from the manager by deprecation (Awaits distribution of affiliated events on
                operation success)
            </summary>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TryReplaceCellReferencePosition(Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Model.Structures.ICellReferencePosition)">
            <summary>
                Tries to replace a unit cell position from the manager if it passes validation (Awaits distribution of affiliated
                events on operation success)
            </summary>
            <param name="orgPosition"></param>
            <param name="newPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TryRegisterPositionDummy(Mocassin.Model.Structures.ICellDummyPosition)">
            <summary>
                Tries to register a new unit cell position in the manager if it passes validation (Awaits distribution of
                affiliated events on operation success)
            </summary>
            <param name="cellDummyPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TryRemovePositionDummy(Mocassin.Model.Structures.ICellDummyPosition)">
            <summary>
                Tries to remove a unit cell position from the manager by deprecation (Awaits distribution of affiliated events on
                operation success)
            </summary>
            <param name="cellDummyPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TryReplacePositionDummy(Mocassin.Model.Structures.ICellDummyPosition,Mocassin.Model.Structures.ICellDummyPosition)">
            <summary>
                Tries to replace a unit cell position from the manager if it passes validation (Awaits distribution of affiliated
                events on operation success)
            </summary>
            <param name="orgCellDummyPosition"></param>
            <param name="newCellDummyPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TrySetCellParameters(Mocassin.Model.Structures.ICellParameters)">
            <summary>
                tries to set new cell parameters if they pass validation (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="cellParams"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TrySetSpaceGroup(Mocassin.Model.Structures.ISpaceGroupInfo)">
            <summary>
                Tries to set a new space group info if it passes validation and resolves potential conflicts (Distributes
                affiliated events on operation success)
            </summary>
            <param name="groupInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TrySetStructureInfo(Mocassin.Model.Structures.IStructureInfo)">
            <summary>
                Tries to set a new structure info if it passes validation (Distributes affiliated events on operation success)
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.TryCleanDeprecatedData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInputManager.CreateDataConflictHandlerProvider">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.StructureQueryManager">
            <summary>
                Basic implementation of the structure query manager that handles safe data queries and service requests to the
                structure manager from outside sources
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureQueryManager.#ctor(Mocassin.Model.Structures.StructureModelData,Mocassin.Model.Structures.StructureModelCache,Mocassin.Model.Basic.AccessLockSource)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.StructureUpdateManager">
            <summary>
                Basic update manager for the structure module that handles pushed information on data changes in required modules
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureUpdateManager.ParticleObjectAddedEventHandler">
            <summary>
                Pipeline based handler for added model objects in the connected particle manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureUpdateManager.ParticleObjectChangedEventHandler">
            <summary>
                Pipeline based handler for changed model objects in the connected particle manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureUpdateManager.ParticleObjectRemovedEventHandler">
            <summary>
                Pipeline based handler for removed model objects in the connected particle manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureUpdateManager.ParticleObjectIndexingChangedHandler">
            <summary>
                Pipeline based handler for indexing changes of model object lists in the connected particle manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureUpdateManager.#ctor(Mocassin.Model.Structures.StructureModelData,Mocassin.Model.Structures.StructureEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <summary>
                Creates new structure update manager from base data, extended data, event manager and project services
            </summary>
            <param name="modelData"></param>
            <param name="eventManager"></param>
            <param name="modelProject"></param>
        </member>
        <member name="T:Mocassin.Model.Structures.ConflictHandling.StructureParameterConflictHandler">
            <summary>
                Conflict resolver for parameter induced conflicts within the structure manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.StructureParameterConflictHandler.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.StructureParameterConflictHandler.ResolveSpaceGroupChange(Mocassin.Model.Structures.SpaceGroupInfo,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Structures.StructureModelData})">
            <summary>
                Resolver method that handles the required internal changes if the space group parameter is replaced
            </summary>
            <param name="groupInfo"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.StructureParameterConflictHandler.ResolveCellParametersChange(Mocassin.Model.Structures.CellParameters,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Structures.StructureModelData})">
            <summary>
                Resolver method that handles the required internal changes if the cell parameters change
            </summary>
            <param name="parameters"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.ConflictHandling.CellParametersChangeHandler">
            <summary>
                Resolves conflicts that are affiliated with the change of the unit cell parameters
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.CellParametersChangeHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Structures.StructureModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.CellParametersChangeHandler.HandleConflicts(Mocassin.Model.Structures.CellParameters)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.CellParametersChangeHandler.MatchParameterSetsWithCrystalSystem(Mocassin.Model.Structures.CellParameters,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Enforces consistency of the parameter set between the crystal system and the cell parameter input
                (This methods throw if the parameter set is rejected by the crystal system service)
            </summary>
            <param name="parameters"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Structures.ConflictHandling.SpaceGroupChangeHandler">
            <summary>
                Resolves a change in the space group information and corrects the dependent internal data of the structure object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.SpaceGroupChangeHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Structures.StructureModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.SpaceGroupChangeHandler.HandleConflicts(Mocassin.Model.Structures.SpaceGroupInfo)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.SpaceGroupChangeHandler.MatchCrystalSystemAndCellParameters(Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Matches the crystal system to the space group and checks if the current cell parameters can be applied (Loads
                default values of the new system if not possible)
            </summary>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.SpaceGroupChangeHandler.MatchCellReferencePositionsToSpaceGroup(Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Checks the unit cell position list from first to last and marks later duplicates as deprecated if they produce equal sequences to former positions
            </summary>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.SpaceGroupChangeHandler.OverwriteCellParameters(Mocassin.Model.Structures.CellParameters)">
            <summary>
                Overwrites the existing cell parameters by a new set both in the data and project services
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="T:Mocassin.Model.Structures.ConflictHandling.StructureDataConflictHandlerProvider">
            <summary>
                Resolver provider for all structure conflict resolvers that handle internal data conflicts of the particle manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.StructureDataConflictHandlerProvider.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.ConflictHandling.StructureDataConflictHandlerProvider.CreateParameterHandler">
            <summary>
                Creation method for the structure parameter change conflict handler
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.Handler.ParticleObjectAddedEventHandler">
            <summary>
            Event handler that manages the processing of object added events that the structure manager receives from the particle manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectAddedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Structures.StructureModelData},Mocassin.Model.Structures.StructureEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectAddedEventHandler.HandleNewParticle(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Particles.IParticle})">
            <summary>
            Event reaction to a new particle in the particle manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectAddedEventHandler.HandleNewParticleSet(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Particles.IParticleSet})">
            <summary>
            Event reaction to a new particle set in the particle manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.Handler.ParticleObjectChangedEventHandler">
            <summary>
            Event handler that manages the processing of object change events that the structure manager receives from the particle manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectChangedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Structures.StructureModelData},Mocassin.Model.Structures.StructureEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectChangedEventHandler.HandleParticleChange(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Particles.IParticle})">
            <summary>
            Event reaction to a particle change in the particle manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectChangedEventHandler.HandleParticleSetChange(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Particles.IParticleSet})">
            <summary>
            Event reaction to a particle set change in the particle manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.Handler.ParticleObjectIndexingChangedHandler">
            <summary>
            Event handler that manages the processing of object reindexing events that the structure manager receives from the particle manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectIndexingChangedHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Structures.StructureModelData},Mocassin.Model.Structures.StructureEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectIndexingChangedHandler.HandleParticleListReindexing(Mocassin.Model.Basic.IModelIndexingEventArgs{Mocassin.Model.Particles.IParticle})">
            <summary>
            Event reaction to a changed particle list indexing in the particle manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectIndexingChangedHandler.HandleParticleSetListReindexing(Mocassin.Model.Basic.IModelIndexingEventArgs{Mocassin.Model.Particles.IParticleSet})">
            <summary>
            Event reaction to a changed particle set list indexing in the particle manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.Handler.ParticleObjectRemovedEventHandler">
            <summary>
                Event handler that manages the processing of object removal events that the structure manager receives from the
                particle manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectRemovedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Structures.StructureModelData},Mocassin.Model.Structures.StructureEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectRemovedEventHandler.HandleParticleRemoval(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Particles.IParticle})">
            <summary>
                Event reaction to a removed particle in the particle manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.Handler.ParticleObjectRemovedEventHandler.HandleParticleSetRemoval(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Particles.IParticleSet})">
            <summary>
                Event reaction to a removed particle set in the particle manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.StructureManager">
            <summary>
                Basic structure manager implementation that handles building of unit cells
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureManager.InputPort">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.StructureManager.QueryPort">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.StructureManager.EventPort">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureManager.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Structures.StructureModelData)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureManager.CreateValidationService(Mocassin.Model.ModelProject.ProjectSettings)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureManager.GetManagerInterfaceType">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.StructureModelCache">
            <summary>
                Cache for extended structure data that stores 'on-demand' calculated dependent data for faster access until the
                data is no longer valid
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureModelCache.#ctor(Mocassin.Model.Basic.IModelEventPort,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureModelCache.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.StructureModelData">
            <summary>
                Basic structure manager reference data that represents the base data required for load/save actions and caluclation
                of all dependent data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureModelData.StructureInfo">
            <summary>
                The name of the structure
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureModelData.SpaceGroupInfo">
            <summary>
                The space group information
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureModelData.CrystalParameters">
            <summary>
                The crystal parameter set
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureModelData.CellReferencePositions">
            <summary>
                The list of reference unit cell positions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureModelData.PositionDummies">
            <summary>
                The list of reference unit cell position dummies
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureModelData.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureModelData.ResetToDefault">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureModelData.CreateNew">
            <summary>
                Creates a new default structure model data object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.StructureValidationService">
            <summary>
                Validation service for structure related model objects, uses space group service to validate potential duplicate
                conflicts
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.StructureValidationService.Settings">
            <summary>
                The basic structure settings object
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureValidationService.#ctor(Mocassin.Model.ModelProject.MocassinStructureSettings,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureValidationService.ValidateCellReferencePosition(Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <summary>
                Validates a new unit cell position in terms of conflicts with basic limitations and existing data
            </summary>
            <param name="position"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureValidationService.ValidatePositionDummy(Mocassin.Model.Structures.ICellDummyPosition,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <summary>
                Validates a position dummy in terms of conflicts with basic limitations
            </summary>
            <param name="cellDummyPosition"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureValidationService.ValidateStructureInfo(Mocassin.Model.Structures.IStructureInfo,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <summary>
                Validate a structure info in terms of conflicts with basic limitations
            </summary>
            <param name="info"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureValidationService.ValidateCellParameters(Mocassin.Model.Structures.ICellParameters,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <summary>
                Validates a set of cell parameters in terms of conflicts with basic limitations and the currently active space
                group
            </summary>
            <param name="parameters"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureValidationService.ValidateSpaceGroupInfo(Mocassin.Model.Structures.ISpaceGroupInfo,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <summary>
                Validates a space group info in terms of conflicts with basic limitations (Does not load group into the service!)
            </summary>
            <param name="groupInfo"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.Validators.CellReferencePositionValidator">
            <summary>
                Validator for new unit cell position model objects that checks for compatibility with existing data and general
                object constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.CellReferencePositionValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinStructureSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.CellReferencePositionValidator.Validate(Mocassin.Model.Structures.ICellReferencePosition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.CellReferencePositionValidator.AddConstraintValidation(Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that a new cell position is within the general restraints of the system and adds the results to the
                validation report
            </summary>
            <param name="position"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.CellReferencePositionValidator.AddObjectUniquenessValidation(Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the passed cell position vector cannot be found within the extended wyckoff sets of any of the
                already defined positions that are not deprecated and adds the results to the validation report
            </summary>
            <param name="position"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Structures.Validators.PositionDummyValidator">
            <summary>
                Validator for new unit cell position model objects that checks for compatibility with existing data and general
                object constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.PositionDummyValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinStructureSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.PositionDummyValidator.Validate(Mocassin.Model.Structures.ICellDummyPosition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.PositionDummyValidator.AddConstraintValidation(Mocassin.Model.Structures.ICellDummyPosition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that a new cell position is within the general restraints of the system and adds the results to the
                validation report
            </summary>
            <param name="cellDummyPosition"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.PositionDummyValidator.AddObjectUniquenessValidation(Mocassin.Model.Structures.ICellDummyPosition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the passed cell position vector cannot be found within the extended wyckoff sets of any of the
                already defined positions that are not deprecated
                and adds the results to the validation report
            </summary>
            <param name="cellDummyPosition"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Structures.Validators.SpaceGroupInfoValidator">
            <summary>
                Validator for new space group info model parameter that checks for compatibility with existing data and general
                object constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.SpaceGroupInfoValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinStructureSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.SpaceGroupInfoValidator.Validate(Mocassin.Model.Structures.ISpaceGroupInfo)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.Validators.StructureInfoValidator">
            <summary>
                Validator for new structure info model parameter that checks for compatibility with existing data and general object
                constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.StructureInfoValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinStructureSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.StructureInfoValidator.Validate(Mocassin.Model.Structures.IStructureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.Validators.UnitCellParameterValidator">
            <summary>
                Validator for new unit cell parameter model parameter that checks for compatibility with existing data and general
                object constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.UnitCellParameterValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinStructureSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Structures.IStructureDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.UnitCellParameterValidator.Validate(Mocassin.Model.Structures.ICellParameters)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.Validators.UnitCellParameterValidator.AddCrystalSystemCompatibilityValidation(Mocassin.Model.Structures.ICellParameters,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validate that the new cell parameters match the restrictions of the crystal system and adds the results to the
                validation report
            </summary>
            <param name="parameters"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Structures.CellDummyPosition">
            <inheritdoc cref="T:Mocassin.Model.Structures.ICellDummyPosition" />
        </member>
        <member name="P:Mocassin.Model.Structures.CellDummyPosition.Vector">
            <summary>
                The fractional position 3D vector data
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.CellDummyPosition.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CellDummyPosition.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.ICellDummyPosition">
            <summary>
                Represents a purely visual unit cell position object that cannot be used for model purposes
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellDummyPosition.Vector">
            <summary>
                Get the fractional coordinate vector of the position dummy
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.CellReferencePosition">
            <inheritdoc cref="T:Mocassin.Model.Structures.ICellReferencePosition" />
        </member>
        <member name="P:Mocassin.Model.Structures.CellReferencePosition.Vector">
            <summary>
                The fractional position vector of the unit cell position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.CellReferencePosition.OccupationSet">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellReferencePosition.Stability">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellReferencePosition.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CellReferencePosition.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CellReferencePosition.AsPosition">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CellReferencePosition.IsValidAndStable">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CellReferencePosition.IsValidAndUnstable">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.ICellReferencePosition">
            <summary>
                Represents a unit cell reference position that carries fractional position information and occupation as an index
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellReferencePosition.Vector">
            <summary>
                The fractional position vector
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellReferencePosition.OccupationSet">
            <summary>
                The occupation set of this position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellReferencePosition.Stability">
            <summary>
                The status flag of the unit cell position
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.ICellReferencePosition.AsPosition">
            <summary>
                Creates a position struct from the unit cell position that supports fractional mass point and vector generic
                methods
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.ICellReferencePosition.IsValidAndStable">
            <summary>
                Checks if the position is stable and not deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.ICellReferencePosition.IsValidAndUnstable">
            <summary>
                Checks if the position is unstable and not deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.PositionStability">
            <summary>
                Enum to describe the unit cell position status (Stable, unstable,...)
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.CellParameters">
            <inheritdoc cref="T:Mocassin.Model.Structures.ICellParameters" />
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.ParameterSet">
            <summary>
                The crystal parameter set
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.ParamA">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.ParamB">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.ParamC">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.Alpha">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.Beta">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.Gamma">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.AlphaDegree">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.BetaDegree">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CellParameters.GammaDegree">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CellParameters.op_Implicit(Mocassin.Symmetry.CrystalSystems.CrystalParameterSet)~Mocassin.Model.Structures.CellParameters">
            <summary>
                Implicit cast of crystal parameter set to the wrapper object
            </summary>
            <param name="paramSet"></param>
        </member>
        <member name="M:Mocassin.Model.Structures.CellParameters.GetParameterName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CellParameters.PopulateObject(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CellParameters.Equals(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CellParameters.AsParameterSet">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.ICellParameters">
            <summary>
                Represents a set of cell parameters (a,b,c) and angles (alpha, beta, gamma)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellParameters.ParamA">
            <summary>
                The parameter in A direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellParameters.ParamB">
            <summary>
                The parameter in B direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellParameters.ParamC">
            <summary>
                The parameter in C direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellParameters.Alpha">
            <summary>
                The angle alpha in radian
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellParameters.AlphaDegree">
            <summary>
                The angle alpha in degree
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellParameters.Beta">
            <summary>
                The angle beta in radian
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellParameters.BetaDegree">
            <summary>
                The angle beta in degree
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellParameters.Gamma">
            <summary>
                The angle gamma in radian
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICellParameters.GammaDegree">
            <summary>
                The angle gamma in degree
            </summary>
        </member>
        <member name="M:Mocassin.Model.Structures.ICellParameters.AsParameterSet">
            <summary>
                The the cell parameters as a parameter set
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.ISpaceGroupInfo">
            <summary>
                Basic interface for all space group information that contain group index,
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ISpaceGroupInfo.GroupIndex">
            <summary>
                The index of the space group in the "International tables of space groups"
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ISpaceGroupInfo.GroupLiteral">
            <summary>
                The literal name of the space group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ISpaceGroupInfo.SpecifierName">
            <summary>
                The name of the specifier in cases where a space group has multiple specified versions for the same group index
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ISpaceGroupInfo.GroupEntry">
            <summary>
                Get the space group entry for database lookup
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Structures.SpaceGroupInfo">
            <inheritdoc cref="T:Mocassin.Model.Structures.ISpaceGroupInfo" />
        </member>
        <member name="P:Mocassin.Model.Structures.SpaceGroupInfo.GroupEntry">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SpaceGroupInfo.GroupIndex">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SpaceGroupInfo.GroupLiteral">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SpaceGroupInfo.SpecifierName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.SpaceGroupInfo.GetParameterName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.SpaceGroupInfo.op_Implicit(Mocassin.Symmetry.SpaceGroups.SpaceGroupEntry)~Mocassin.Model.Structures.SpaceGroupInfo">
            <summary>
                Implicit cast of a space group entry to the wrapper class object
            </summary>
            <param name="groupEntry"></param>
        </member>
        <member name="M:Mocassin.Model.Structures.SpaceGroupInfo.PopulateObject(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.SpaceGroupInfo.Equals(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.IStructureInfo">
            <summary>
                Interface for all structure info objects that contain used defined misc structure infos
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.IStructureInfo.Name">
            <summary>
                The name of the structure
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.StructureInfo">
            <inheritdoc cref="T:Mocassin.Model.Structures.IStructureInfo" />
        </member>
        <member name="P:Mocassin.Model.Structures.StructureInfo.Name">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInfo.GetParameterName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInfo.CreateDefault">
            <summary>
                Creates the default initialized structure info
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInfo.PopulateObject(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.StructureInfo.Equals(Mocassin.Model.Basic.IModelParameter)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Structures.CartesianPosition">
            <inheritdoc cref="T:Mocassin.Model.Structures.ICartesianPosition" />
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.Vector">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.OccupationIndex">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.Stability">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.Coordinates">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.Mass">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.A">
            <summary>
                The coordinate value in A direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.B">
            <summary>
                The coordinate value in B direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.C">
            <summary>
                The coordinate value in C direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.X">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.Y">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.CartesianPosition.Z">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.CartesianPosition.#ctor(Mocassin.Mathematics.ValueTypes.Cartesian3D@,System.Int32,Mocassin.Model.Structures.PositionStability)">
            <summary>
                Creates new cell position from cartesian 3D vector and particle set index
            </summary>
            <param name="vector"></param>
            <param name="particleSetIndex"></param>
            <param name="stability"></param>
        </member>
        <member name="T:Mocassin.Model.Structures.ICartesianPosition">
            <summary>
                Represents a non unique occupied position which carries cartesian coordinate information and an occupation index
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICartesianPosition.OccupationIndex">
            <summary>
                Index of the particle set that describes possible occupations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ICartesianPosition.Stability">
            <summary>
                The status of the position (Stable, unstable)
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.FractionalPosition">
            <inheritdoc cref="T:Mocassin.Model.Structures.IFractionalPosition" />
        </member>
        <member name="P:Mocassin.Model.Structures.FractionalPosition.Vector">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.FractionalPosition.OccupationIndex">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.FractionalPosition.Stability">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.FractionalPosition.Coordinates">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.FractionalPosition.A">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.FractionalPosition.B">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.FractionalPosition.C">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.FractionalPosition.Mass">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.FractionalPosition.#ctor(Mocassin.Mathematics.ValueTypes.Fractional3D,System.Int32,Mocassin.Model.Structures.PositionStability)">
            <summary>
                Creates new cell position from fractional 3D vector and particle set index
            </summary>
            <param name="vector"></param>
            <param name="occupationIndex"></param>
            <param name="stability"></param>
        </member>
        <member name="T:Mocassin.Model.Structures.IFractionalPosition">
            <summary>
                Represents a non unique occupied position which carries fractional coordinate information and an occupation index
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.IFractionalPosition.OccupationIndex">
            <summary>
                The particle set index that describes possible occupations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.IFractionalPosition.Stability">
            <summary>
                The status of the position
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.ISphericalPosition">
            <summary>
                Represents a non unique occupied position which carries spherical coordinate information and an occupation index
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ISphericalPosition.OccupationIndex">
            <summary>
                Index of the particle set that describes possible occupations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.ISphericalPosition.Stability">
            <summary>
                The status of the position (Stable, unstable)
            </summary>
        </member>
        <member name="T:Mocassin.Model.Structures.SphericalPosition">
            <inheritdoc cref="T:Mocassin.Model.Structures.ISphericalPosition" />
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.Vector">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.OccupationIndex">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.Stability">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.Coordinates">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.Mass">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.A">
            <summary>
                The coordinate value in A direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.B">
            <summary>
                The coordinate value in B direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.C">
            <summary>
                The coordinate value in C direction
            </summary>
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.Radius">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.Theta">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Structures.SphericalPosition.Phi">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Structures.SphericalPosition.#ctor(Mocassin.Mathematics.ValueTypes.Spherical3D,System.Int32,Mocassin.Model.Structures.PositionStability)">
            <summary>
                Creates new cell position from cartesian 3D vector and particle set index
            </summary>
            <param name="vector"></param>
            <param name="occupationIndex"></param>
            <param name="stability"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.ITransitionManager">
            <summary>
                Represents a manager for transitions and affiliated rules within the modeling process
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.ITransitionCachePort">
            <summary>
                Represents an access port for on-demand extended transition data that is automatically cached
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetAllMetropolisMappingLists">
            <summary>
                Get a list interface for all metropolis transition mapping lists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetMetropolisMappingList(System.Int32)">
            <summary>
                Get a list interface for the metropolis transition mappings belonging the specified transition index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetAllKineticMappingLists">
            <summary>
                Get a list interface for all kinetic transition mapping lists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetKineticMappingList(System.Int32)">
            <summary>
                Get a list interface for the kinetic transition mappings belonging to the specified transition index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetAllMetropolisRuleLists">
            <summary>
                Get a list interface for all metropolis transition rule lists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetMetropolisRuleList(System.Int32)">
            <summary>
                Get a list interface for all metropolis rules that belong to the specified transition index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetAllKineticRuleLists">
            <summary>
                Get a list interface for all kinetic transition rule lists
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetKineticRuleList(System.Int32)">
            <summary>
                Get a list interface for all kinetic rules that belong to the specified transition index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetKineticTransitionPositionDictionary">
            <summary>
                Get a dictionary that contains which kinetic transitions are possible on which unit cell positions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetMetropolisTransitionPositionDictionary">
            <summary>
                Get a dictionary that contains which metropolis transitions are possible on which unit cell positions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetAbstractChargeTransportChain(System.Int32)">
            <summary>
                Get the abstract charge transport chain of the abstract movement with the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetAbstractChargeTransportChains">
            <summary>
                Get the abstract charge transport chains for all abstract transitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionCachePort.GetRuleSetterProvider">
            <summary>
                Get a <see cref="T:Mocassin.Model.Transitions.IRuleSetterProvider" /> that confirms to the internally set
                <see cref="T:Mocassin.Model.ModelProject.ProjectSettings" />
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.ITransitionDataPort">
            <summary>
                Represents a read only data access port for the transition reference data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetStateExchangePairs">
            <summary>
                Get a read only list containing all state exchange pairs
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetStateExchangePair(System.Int32)">
            <summary>
                Get the state exchange pair at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetStateExchangeGroups">
            <summary>
                Get a read only list containing all state exchange groups groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetStateExchangeGroup(System.Int32)">
            <summary>
                Get the property group at the specified index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetAbstractTransitions">
            <summary>
                Get a read only list containing all abstract transitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetAbstractTransition(System.Int32)">
            <summary>
                Get the abstract transition with the provided index
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetKineticTransitions">
            <summary>
                Get a read only list containing all kinetic transitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetMetropolisTransitions">
            <summary>
                Get a read only list containing all metropolis transitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetKineticTransitionCount">
            <summary>
                Get the number of kinetic transitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetMetropolisTransitionCount">
            <summary>
                Get the number of metropolis transitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionDataPort.GetRuleSetterProvider(Mocassin.Model.ModelProject.ProjectSettings)">
            <summary>
                Get a <see cref="T:Mocassin.Model.Transitions.IRuleSetterProvider" /> that uses the constraints defined by the passed
                <see cref="T:Mocassin.Model.ModelProject.ProjectSettings" />
            </summary>
            <param name="projectSettings"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.ITransitionEventPort">
            <summary>
                Represents an event port for transition manager related push based notification events
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.ITransitionInputPort">
            <summary>
                Represents an input port for model transitions and affiliated rules
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.ITransitionQueryPort">
            <summary>
                Represents a query port for query based access to the reference and extended transition data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.ITransitionUpdatePort">
            <summary>
                Represents and update port for registering of dependent event ports
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionCacheManager">
            <summary>
                Basic implementation of the transition cache manager that provides read only access to the extended 'on demand'
                transition data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.#ctor(Mocassin.Model.Transitions.TransitionModelCache,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetAllKineticMappingLists">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetAllKineticRuleLists">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetAllMetropolisMappingLists">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetAllMetropolisRuleLists">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetKineticMappingList(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetKineticRuleList(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetMetropolisMappingList(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetMetropolisRuleList(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetKineticTransitionPositionDictionary">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetMetropolisTransitionPositionDictionary">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetAbstractChargeTransportChain(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetAbstractChargeTransportChains">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.GetRuleSetterProvider">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.CreateMetropolisTransitionPositionDictionary">
            <summary>
                Creates a dictionary that assigns each unit cell position its possible list of metropolis transitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.CreateKineticTransitionPositionDictionary">
            <summary>
                Creates a dictionary that assigns each unit cell position its possible list of kinetic transitions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.CreateAllMetropolisMappings">
            <summary>
                Creates all metropolis transition mappings and supplies it as a 2D list interface system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.CreateAllKineticMappings">
            <summary>
                Creates all kinetic transition mappings and supplies it as a 2D list interface system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.CreateAllMetropolisRules">
            <summary>
                Creates all metropolis transition rules and supplies it as a 2D list interface system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.CreateAllKineticRules">
            <summary>
                Creates all kinetic transition rules and supplies it as a 2D list interface system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.CreateAbstractChargeTransportChains">
            <summary>
                Creates the abstract charge transport chains for all abstract transitions as a 2D list interface
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionCacheManager.CreateRuleSetterProvider">
            <summary>
                Creates the <see cref="T:Mocassin.Model.Transitions.IRuleSetterProvider" /> for the current state of the <see cref="T:Mocassin.Model.ModelProject.ProjectSettings" /> data
                object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionDataManager">
            <summary>
                Transition data manager that provides safe read only access to the transition base data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.#ctor(Mocassin.Model.Transitions.TransitionModelData)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetAbstractTransition(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetAbstractTransitions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetKineticTransitionCount">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetKineticTransitions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetMetropolisTransitions">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetMetropolisTransitionCount">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetStateExchangeGroup(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetStateExchangeGroups">
            <summary>
                Get a read only list of all state exchange groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetStateExchangePairs">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetStateExchangePair(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionDataManager.GetRuleSetterProvider(Mocassin.Model.ModelProject.ProjectSettings)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionEventManager">
            <summary>
                Basic transitions notification manager that handles distribution of push based update notifications about changes
                in the transition manager base data
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionInputManager">
            <summary>
                Basic implementation of the transition input manager that handles validated adding, removal and replacement of
                transition base data by an outside source
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.#ctor(Mocassin.Model.Transitions.TransitionModelData,Mocassin.Model.Transitions.TransitionEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRegisterNewModelObject(Mocassin.Model.Transitions.IStateExchangePair)">
            <summary>
                Tries to register the passed model object with the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRegisterNewModelObject(Mocassin.Model.Transitions.IStateExchangeGroup)">
            <summary>
                Tries to register the passed model object with the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRegisterNewModelObject(Mocassin.Model.Transitions.IAbstractTransition)">
            <summary>
                Tries to register the passed model object with the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRegisterNewModelObject(Mocassin.Model.Transitions.IKineticTransition)">
            <summary>
                Tries to register the passed model object with the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRegisterNewModelObject(Mocassin.Model.Transitions.IMetropolisTransition)">
            <summary>
                Tries to register the passed model object with the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRemoveModelObject(Mocassin.Model.Transitions.IStateExchangePair)">
            <summary>
                Tries to remove the passed model object from the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRemoveModelObject(Mocassin.Model.Transitions.IStateExchangeGroup)">
            <summary>
                Tries to remove the passed model object from the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRemoveModelObject(Mocassin.Model.Transitions.IAbstractTransition)">
            <summary>
                Tries to remove the passed model object from the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRemoveModelObject(Mocassin.Model.Transitions.IKineticTransition)">
            <summary>
                Tries to remove the passed model object from the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryRemoveModelObject(Mocassin.Model.Transitions.IMetropolisTransition)">
            <summary>
                Tries to remove the passed model object from the manager (Awaits distribution of affiliated events on operation
                success)
            </summary>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryReplaceModelObject(Mocassin.Model.Transitions.IStateExchangePair,Mocassin.Model.Transitions.IStateExchangePair)">
            <summary>
                Tries to replace an existing model object in the manager by a new one (Awaits distribution of affiliated events on
                operation success)
            </summary>
            <param name="orgObj"></param>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryReplaceModelObject(Mocassin.Model.Transitions.IStateExchangeGroup,Mocassin.Model.Transitions.IStateExchangeGroup)">
            <summary>
                Tries to replace an existing model object in the manager by a new one (Awaits distribution of affiliated events on
                operation success)
            </summary>
            <param name="orgObj"></param>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryReplaceModelObject(Mocassin.Model.Transitions.IAbstractTransition,Mocassin.Model.Transitions.IAbstractTransition)">
            <summary>
                Tries to replace an existing model object in the manager by a new one (Awaits distribution of affiliated events on
                operation success)
            </summary>
            <param name="orgObj"></param>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryReplaceModelObject(Mocassin.Model.Transitions.IKineticTransition,Mocassin.Model.Transitions.IKineticTransition)">
            <summary>
                Tries to replace an existing model object in the manager by a new one (Awaits distribution of affiliated events on
                operation success)
            </summary>
            <param name="orgObj"></param>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryReplaceModelObject(Mocassin.Model.Transitions.IMetropolisTransition,Mocassin.Model.Transitions.IMetropolisTransition)">
            <summary>
                Tries to replace an existing model object in the manager by a new one (Awaits distribution of affiliated events on
                operation success)
            </summary>
            <param name="orgObj"></param>
            <param name="newObj"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.TryCleanDeprecatedData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionInputManager.CreateDataConflictHandlerProvider">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionQueryManager">
            <summary>
                Basic implementation of the transition query manager that handles safe data queries and service requests to the
                transition manager from outside sources
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionQueryManager.#ctor(Mocassin.Model.Transitions.TransitionModelData,Mocassin.Model.Transitions.TransitionModelCache,Mocassin.Model.Basic.AccessLockSource)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionUpdateManager">
            <summary>
                Basic update manager for the transition module that handles pushed information on data changes in required modules
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionUpdateManager.StructureObjectAddedEventHandler">
            <summary>
                Pipeline based event handler for added model objects events in the connected structure manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionUpdateManager.StructureObjectChangedEventHandler">
            <summary>
                Pipeline based event handler for changed model objects events in the connected structure manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionUpdateManager.StructureObjectRemovedEventHandler">
            <summary>
                Pipeline based event handler for removed model objects events in the connected structure manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionUpdateManager.StructureObjectIndexingChangedEventHandler">
            <summary>
                Pipeline based event handler for model object list reindexing events in the connected structure manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionUpdateManager.StructureParameterChangedEventHandler">
            <summary>
                Pipeline based event handler for changed model parameter events in the connected structure manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionUpdateManager.#ctor(Mocassin.Model.Transitions.TransitionModelData,Mocassin.Model.Transitions.TransitionEventManager,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectAddedHandler">
            <summary>
                Internal conflict handler for the addition of model objects to the transition management system
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectAddedHandler.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectAddedHandler.HandleNewKineticTransition(Mocassin.Model.Transitions.KineticTransition,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData})">
            <summary>
                Handles the internal changes within the transition model data required due to a new kinetic transition added by the
                controller
            </summary>
            <param name="transition"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectAddedHandler.HandleNewMetropolisTransition(Mocassin.Model.Transitions.MetropolisTransition,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData})">
            <summary>
                Handles the internal changes within the transition model data required due to a new metropolis transition added by
                the controller
            </summary>
            <param name="transition"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectChangedHandler">
            <summary>
                Internal conflict handler for the change of model objects witin the transition managment system
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectChangedHandler.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectChangedHandler.HandleChangedKineticTransition(Mocassin.Model.Transitions.KineticTransition,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData})">
            <summary>
                Handles the internal changes within the transition model data required due to a changed kinetic transition
            </summary>
            <param name="transition"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectChangedHandler.HandleChangedMetropolisTransition(Mocassin.Model.Transitions.MetropolisTransition,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData})">
            <summary>
                Handles the internal changes within the transition model data required due to a changed metropolis transition
            </summary>
            <param name="transition"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectRemovedHandler">
            <summary>
                Internal conflict handler for the removal of model objects within the transition managment system
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectRemovedHandler.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectRemovedHandler.HandleRemovedKineticTransition(Mocassin.Model.Transitions.KineticTransition,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData})">
            <summary>
                Handles the internal changes within the transition model data required due to removed kinetic transition
            </summary>
            <param name="transition"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionObjectRemovedHandler.HandleRemovedMetropolisTransition(Mocassin.Model.Transitions.MetropolisTransition,Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData})">
            <summary>
                Handles the internal changes within the transition model data required due to a removed metropolis transition
            </summary>
            <param name="transition"></param>
            <param name="dataAccess"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionHandlerBase">
            <summary>
                Base class for shared functionality of all conflict handlers that deal with the kinetic transition objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionHandlerBase.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionHandlerBase.CreateTransitionRules(Mocassin.Model.Transitions.KineticTransition)">
            <summary>
                Create all transition rules for the kinetic transition
            </summary>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionHandlerBase.IndexAndAddToModelData(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.KineticRule})">
            <summary>
                Adds new kinetic rules to the model data at old deprecated places or the end of the list. Indexes objects
                accordingly
            </summary>
            <param name="rules"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionHandlerBase">
            <summary>
                Base class for shared functionality of all conflict handlers that deal with the metropolis transition objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionHandlerBase.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionHandlerBase.CreateTransitionRules(Mocassin.Model.Transitions.MetropolisTransition)">
            <summary>
                Create all transition rules for the provided metropolis transition
            </summary>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionHandlerBase.IndexAndAddToModelData(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.MetropolisRule})">
            <summary>
                Adds new kinetic rules to the model data at old deprecated places or the end of the list. Indexes objects
                accordingly
            </summary>
            <param name="rules"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionAddedHandler">
            <summary>
                Object handler that handles internal data changes of the transition manager system required after a new kinetic
                transition input
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionAddedHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionAddedHandler.HandleConflicts(Mocassin.Model.Transitions.KineticTransition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionAddedHandler.CreateNewRulesAndUpdateModelData(Mocassin.Model.Transitions.KineticTransition,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Creates new rule set and links them to the kinetic parent transition. Additionally adds the new rule set to the
                model data object with a new indexing
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionChangedHandler">
            <summary>
                Object handler that handles internal data changes of the transition manager system required after a kinetic
                transition data change
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionChangedHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionChangedHandler.HandleConflicts(Mocassin.Model.Transitions.KineticTransition)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionRemovedHandler">
            <summary>
                Object handler that handles internal data changes of the transition manager system required after a kinetic
                transition is removed/deprecated
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionRemovedHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionRemovedHandler.HandleConflicts(Mocassin.Model.Transitions.KineticTransition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.KineticTransitionRemovedHandler.DeprecateRules(Mocassin.Model.Transitions.KineticTransition,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Deprecates all rules of the transition in the model data and writes the information to the report
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionAddedHandler">
            <summary>
                Object handler that handles internal data changes of the transition manager system required after a new metropolis
                transition input
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionAddedHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionAddedHandler.HandleConflicts(Mocassin.Model.Transitions.MetropolisTransition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionAddedHandler.CreateNewRulesAndUpdateModelData(Mocassin.Model.Transitions.MetropolisTransition,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Creates new rule set and links them to the kinetic parent transition. Additionally adds the new rule set to the
                model data object with a new indexing
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionChangedHandler">
            <summary>
                Object handler that handles internal data changes of the transition manager system required after a metropolis
                transition data change
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionChangedHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionChangedHandler.HandleConflicts(Mocassin.Model.Transitions.MetropolisTransition)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionRemovedHandler">
            <summary>
                Object handler that handles internal data changes of the transition manager system required after a kinetic
                transition is removed/deprecated
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionRemovedHandler.#ctor(Mocassin.Model.Basic.IDataAccessor{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionRemovedHandler.HandleConflicts(Mocassin.Model.Transitions.MetropolisTransition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.MetropolisTransitionRemovedHandler.DeprecateRules(Mocassin.Model.Transitions.MetropolisTransition,Mocassin.Framework.Operations.ConflictReport)">
            <summary>
                Deprecates all rules of the transition in the model data and writes the information to the report
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConflictHandling.TransitionDataConflictHandlerProvider">
            <summary>
                Resolver provider for all transition conflict resolvers that handle internal data conflicts of the particle manager
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionDataConflictHandlerProvider.#ctor(Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionDataConflictHandlerProvider.CreateObjectAddedHandler">
            <summary>
                Marked factory method to provide a custom model object add handler to the automated handling system of the
                transition input system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionDataConflictHandlerProvider.CreateObjectChangedHandler">
            <summary>
                Marked factory method to provide a custom model object change handler to the automated handling system of the
                transition input system
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConflictHandling.TransitionDataConflictHandlerProvider.CreateObjectRemovedHandler">
            <summary>
                Marked factory method to provide a custom model object removal handler to the automated handling system of the
                transition input system
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.Handler.StructureObjectAddedEventHandler">
            <summary>
            Event handler that manages the processing of object added events that the transition manager receives from the structure manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureObjectAddedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.Transitions.TransitionEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureObjectAddedEventHandler.HandleNewCellReferencePosition(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Structures.ICellReferencePosition})">
            <summary>
            Event reaction to a new unit cell position in the structure manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.Handler.StructureObjectChangedEventHandler">
            <summary>
            Event handler that manages the processing of object change events that the transition manager receives from the structure manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureObjectChangedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.Transitions.TransitionEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureObjectChangedEventHandler.HandleCellReferencePositionChange(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Structures.ICellReferencePosition})">
            <summary>
                Event reaction to a unit cell position change change in the structure manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.Handler.StructureObjectIndexingChangedEventHandler">
            <summary>
            Event handler that manages the processing of object reindexing events that the transition manager receives from the structure manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureObjectIndexingChangedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.Transitions.TransitionEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureObjectIndexingChangedEventHandler.HandleCellReferencePositionListReindexing(Mocassin.Model.Basic.IModelIndexingEventArgs{Mocassin.Model.Structures.ICellReferencePosition})">
            <summary>
            Event reaction to a changed unit cell position list indexing in the structure manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.Handler.StructureObjectRemovedEventHandler">
            <summary>
            Event handler that manages the processing of object removal events that the transition manager receives from the structure manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureObjectRemovedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.Transitions.TransitionEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureObjectRemovedEventHandler.HandleUnitCellRemoval(Mocassin.Model.Basic.IModelObjectEventArgs{Mocassin.Model.Structures.ICellReferencePosition})">
            <summary>
            Event reaction to a removed particle in the particle manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.Handler.StructureParameterChangedEventHandler">
            <summary>
            Event handler that manages the processing of parameter change events that the transition manager receives from the structure manager event port
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureParameterChangedEventHandler.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Basic.DataAccessorSource{Mocassin.Model.Transitions.TransitionModelData},Mocassin.Model.Transitions.TransitionEventManager)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureParameterChangedEventHandler.HandleChangedCellParameters(Mocassin.Model.Basic.IModelParameterEventArgs{Mocassin.Model.Structures.ICellParameters})">
            <summary>
            Event reaction to a change in the cell parameters of the structure manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureParameterChangedEventHandler.HandleChangedSpaceGroupInfo(Mocassin.Model.Basic.IModelParameterEventArgs{Mocassin.Model.Structures.ISpaceGroupInfo})">
            <summary>
            Event reaction to a change in the space group info of the structure manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.Handler.StructureParameterChangedEventHandler.HandleStructureInfoChange(Mocassin.Model.Basic.IModelParameterEventArgs{Mocassin.Model.Structures.IStructureInfo})">
            <summary>
            Event reaction to a change in the structure info of the structure manager
            </summary>
            <param name="eventArgs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionManager">
            <inheritdoc cref="T:Mocassin.Model.Transitions.ITransitionManager"/>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionManager.InputPort">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionManager.QueryPort">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionManager.EventPort">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionManager.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.Transitions.TransitionModelData)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionManager.GetManagerInterfaceType">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionManager.CreateValidationService(Mocassin.Model.ModelProject.ProjectSettings)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionModelCache">
            <summary>
            Data cache for the extended on-demand transition model data
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionModelCache.#ctor(Mocassin.Model.Basic.IModelEventPort,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionModelCache.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionModelData">
            <summary>
                The reference model data object for the transition manager
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionModelData.StateExchangePairs">
            <summary>
                The list of state exchange pairs
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionModelData.StateExchangeGroups">
            <summary>
                The list of state exchange groups
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionModelData.AbstractTransitions">
            <summary>
                The list of existing abstract transitions for KMC and MMC
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionModelData.KineticTransitions">
            <summary>
                The list of kinetic model transitions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionModelData.MetropolisTransitions">
            <summary>
                The list of metropolis model transitions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionModelData.MetropolisRules">
            <summary>
                The list of metropolis transition rules (Auto-managed by model)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionModelData.KineticRules">
            <summary>
                The list of kinetic transition rules (Auto-managed by model)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionModelData.AsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionModelData.ResetToDefault">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionModelData.CreateNew">
            <summary>
                Creates new transition model data with default settings
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionValidationService">
            <summary>
                Validation service for transition related model objects that checks new transition related model object inputs
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionValidationService.Settings">
            <summary>
                The settings object for the transitions
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionValidationService.#ctor(Mocassin.Model.ModelProject.MocassinTransitionSettings,Mocassin.Model.ModelProject.IModelProject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionValidationService.ValidateStateExchangePair(Mocassin.Model.Transitions.IStateExchangePair,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <summary>
                Validates a new state exchange pair in terms of content and potential conflicts with existing data
            </summary>
            <param name="pair"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionValidationService.ValidateStateExchangeGroup(Mocassin.Model.Transitions.IStateExchangeGroup,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <summary>
                Validates a new state exchange group in terms of content and potential conflicts with existing data
            </summary>
            <param name="group"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionValidationService.ValidateAbstractTransition(Mocassin.Model.Transitions.IAbstractTransition,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <summary>
                Validates a new abstract transition in terms of content and potential conflicts with existing data
            </summary>
            <param name="transition"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionValidationService.ValidateKineticTransition(Mocassin.Model.Transitions.IKineticTransition,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <summary>
                Validates a new model transition in terms of content and potential conflicts with existing data
            </summary>
            <param name="transition"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionValidationService.ValidateMetropolisTransition(Mocassin.Model.Transitions.IMetropolisTransition,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <summary>
                Validates a new metropolis transition in terms of content and potential conflicts with existing data
            </summary>
            <param name="transition"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.Validators.AbstractTransitionValidator">
            <summary>
                Validator for new abstract transitions that checks for compatibility with existing data and general object
                constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.AbstractTransitionValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinTransitionSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.AbstractTransitionValidator.Validate(Mocassin.Model.Transitions.IAbstractTransition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.AbstractTransitionValidator.AddHasContentValidation(Mocassin.Model.Transitions.IAbstractTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the abstract transition has a set of property groups and connectors and adds the reults to the
                validation report (Returns false if not)
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.AbstractTransitionValidator.AddContentRestrictionsValidation(Mocassin.Model.Transitions.IAbstractTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the content restrictions for an abstract transition as defined by the transition settings object and adds
                the results to the validation report
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.AbstractTransitionValidator.AddConnectorPatternValidation(Mocassin.Model.Transitions.IAbstractTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the transition connectors of an abstract transition in terms of a potentially valid physical transition
                and adds the results to the validation report
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.AbstractTransitionValidator.AddNormalVehicleRestrictionValidation(Mocassin.Model.Transitions.IAbstractTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
            Validates that the passed abstract transition does not carry ambiguous transition definition in case of regular vehicle patterns
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.AbstractTransitionValidator.AddChargeConsistencyValidation(Mocassin.Model.Transitions.IAbstractTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the charge exchange between each consecutive dynamically linked is physically valid
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.AbstractTransitionValidator.GetValidConnectorPatterns">
            <summary>
                Get the set of valid connector patterns that form physical meaningful transitions
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.Validators.KineticTransitionValidator">
            <summary>
                Validator for new kinetic transitions that checks for compatibility with existing data and general object
                constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.KineticTransitionValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinTransitionSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.KineticTransitionValidator.Validate(Mocassin.Model.Transitions.IKineticTransition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.KineticTransitionValidator.AddHasContentValidation(Mocassin.Model.Transitions.IKineticTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that a kinetic transition is not empty in terms of required model content sequences and adds the results
                to the validation report
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.KineticTransitionValidator.AddTransitionGeometryValidation(Mocassin.Model.Transitions.IKineticTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates the transition geometry of a kinetic transition in terms of match with the abstract transition and basic
                shape of the geometry and adds the results to the validation report
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.KineticTransitionValidator.TransitionGeometryIsPlausible(Mocassin.Model.Transitions.IKineticTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Checks if the passed kinetic transition has a plausible geometry binding that can form meaningful kinetic
                transition and adds the found problems to the passed validation report
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.KineticTransitionValidator.AddExchangeGroupGeometryValidation(System.Collections.Generic.IList{Mocassin.Model.Structures.ICellReferencePosition},System.Collections.Generic.IList{Mocassin.Model.Transitions.IStateExchangeGroup},Mocassin.Framework.Operations.ValidationReport)">
            <summary>
            Validates that the set of passed exchange groups matches the set of binding unit cell positions and adds the results to the passed validation report
            </summary>
            <param name="cellReferencePositions"></param>
            <param name="stateExchangeGroups"></param>
            <param name="report"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.KineticTransitionValidator.AddAbstractTransitionValidation(Mocassin.Model.Transitions.IKineticTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the transition abstract is a kinetic and not a metropolis type and adds the results to the report
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.Validators.MetropolisTransitionValidator">
            <summary>
                Validator for new metropolis transitions that checks for compatibility with existing data and general object
                constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.MetropolisTransitionValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinTransitionSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.MetropolisTransitionValidator.Validate(Mocassin.Model.Transitions.IMetropolisTransition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.MetropolisTransitionValidator.AddAbstractTransitionValidation(Mocassin.Model.Transitions.IMetropolisTransition,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates if the abstract transition is valid in the sense of a metropolis transition and adds the results to the
                report
            </summary>
            <param name="transition"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.Validators.PropertyGroupValidator">
            <summary>
                Validator for new state exchange groups that checks for compatibility with existing data and general object
                constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.PropertyGroupValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinTransitionSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.PropertyGroupValidator.Validate(Mocassin.Model.Transitions.IStateExchangeGroup)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.PropertyGroupValidator.AddHasContentValidation(Mocassin.Model.Transitions.IStateExchangeGroup,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the state exchange group contains at least one element of each required content element and adds the
                reults to the validation report (Returns false on failure)
            </summary>
            <param name="group"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.Validators.PropertyStatePairValidator">
            <summary>
                Validator for new state exchange pairs that checks for compatibility with existing data and general object
                constraints
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.PropertyStatePairValidator.#ctor(Mocassin.Model.ModelProject.IModelProject,Mocassin.Model.ModelProject.MocassinTransitionSettings,Mocassin.Model.Basic.IDataReader{Mocassin.Model.Transitions.ITransitionDataPort})">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.PropertyStatePairValidator.Validate(Mocassin.Model.Transitions.IStateExchangePair)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.Validators.PropertyStatePairValidator.AddStateExchangeValidation(Mocassin.Model.Transitions.IStateExchangePair,Mocassin.Framework.Operations.ValidationReport)">
            <summary>
                Validates that the state pair represents a valid change (e.g. is not a self exchange where the particle does not
                change) and adds the results to the validation report
            </summary>
            <param name="statePair"></param>
            <param name="report"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConnectorType">
            <summary>
                Enum for the connectors types
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.ConnectorType.Dynamic">
            <summary>
                The connection step is dynamic and describes an exchange step
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.ConnectorType.Static">
            <summary>
                The connection is static and describes a simple offset to the next start
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConnectorPatternType">
            <summary>
            Enum for connector pattern types that are supported and recognized by the system
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.ConnectorPatternType.Undefined">
            <summary>
                Pattern is undefined or not supported
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.ConnectorPatternType.BasicKinetic">
            <summary>
                Patterns follows basic kinetic transition definition or a basic chained kinetic type
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.ConnectorPatternType.Metropolis">
            <summary>
                Patterns follows basic metropolis transition definition
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.ConnectorPatternType.NormalVehicle">
            <summary>
                Pattern follows normal vehicle transition with one transition position
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.ConnectorPatternType.SplitTransitionVehicle">
            <summary>
                Patterns follows split vehicle transition with separated transition positions
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.ConnectorPattern">
            <summary>
                Defines a pattern for the way transition connectors can be connected into transition sequences
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ConnectorPattern.CodeSeparator">
            <summary>
                The separator for connector enums during code generation
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ConnectorPattern.PatternRegex">
            <summary>
                The regex that describes the pattern of the connector sequence that is allowed
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ConnectorPattern.PatternType">
            <summary>
                The name of the connector pattern
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConnectorPattern.IsValid(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.ConnectorType})">
            <summary>
                Checks if a sequence of connectors is valid in terms of the connector pattern
            </summary>
            <param name="connectors"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConnectorPattern.GetName(Mocassin.Model.Transitions.ConnectorType)">
            <summary>
                Get a literal name of a connector enum
            </summary>
            <param name="connector"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConnectorPattern.MakeConnectorCode(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.ConnectorType})">
            <summary>
                Creates a string code from a sequence of connectors that can be used for pattern matching
            </summary>
            <param name="connectors"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConnectorPattern.GetBasicKineticPattern">
            <summary>
                Get the connector pattern for the basic kinetic transitions (D-{D}_1+)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConnectorPattern.GetMetropolisPattern">
            <summary>
                Get the connector pattern for a metropolis transition (D)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConnectorPattern.GetSplitVehiclePattern">
            <summary>
                Get the connector pattern for a split vehicle mechanism with multiple transition positions (D-D{-S-D-D}_1+)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConnectorPattern.GetBasicVehiclePattern">
            <summary>
                Get the connector pattern for a basic vehicle mechanism with one transition position ({D}_1+-S-S-{D}_1+))
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConnectorPattern.GetAllSupportedPatterns">
            <summary>
                Get all currently supported transition connector patterns
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ConnectorPattern.DeterminePatternType(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.ConnectorType})">
            <summary>
                Determines the type of the pattern. If the pattern is not recognized the functions returns the undefined flag
            </summary>
            <param name="connectors"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionRuleGenerator`1">
            <summary>
                Generic rule generator to create tha basic information of new transition rules
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRuleGenerator`1.ParticleDictionary">
            <summary>
                The particle pool dictionary to translate the indexing into actual particle references
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.#ctor(System.Collections.Generic.IEnumerable{Mocassin.Model.Particles.IParticle})">
            <summary>
                Create new quick rule generator that uses the provided set of particles
            </summary>
            <param name="particlePool"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.MakeUniqueRules(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.IAbstractTransition},System.Boolean)">
            <summary>
                Makes the unique rule sequence for each passed abstract transition. With option flag to control if the system
                should automatically filter out rules
                that are not supported
            </summary>
            <param name="abstractTransitions"></param>
            <param name="onlySupported"></param>
            <returns></returns>
            <remarks> Unsupported rules are typically physically meaningless e.g. they violate matter conservation rules </remarks>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.MakeUniqueRules(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.IAbstractTransition},System.Collections.Generic.IList{Mocassin.Model.Transitions.StatePairGroup})">
            <summary>
                Creates the unique for a sequence of abstract transitions and a general list of state pair groups
            </summary>
            <param name="abstractTransitions"></param>
            <param name="statePairGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.MakeUniqueRules(Mocassin.Model.Transitions.IAbstractTransition,System.Collections.Generic.IList{Mocassin.Model.Transitions.StatePairGroup})">
            <summary>
                Creates the unique rules for an abstract transition with the provided statePairGroup list
            </summary>
            <param name="abstractTransition"></param>
            <param name="statePairGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.MakeUniqueRules(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.StatePairGroup},System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.ConnectorType})">
            <summary>
                Creates the unique rules that can be derived from the passes state group and pattern description of a transition
                path
                (No abstract transition is set on the rules)
            </summary>
            <param name="pairGroups"></param>
            <param name="connectorTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.MakeStateSetPermutationSource(Mocassin.Model.Transitions.StatePairGroup[])">
            <summary>
                Creates a state pair permutation source for the possible state pair configurations of the transition sequence
            </summary>
            <param name="statePairGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.MakePathStatePermutationSource(Mocassin.Model.Transitions.StatePair[])">
            <summary>
                Takes a state pair permutation and creates a permutation source that can create all possible states of the path
                allowed by
                this state pair permutation
            </summary>
            <param name="statePairs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.GetValidTransitionRules(Mocassin.Model.Transitions.StatePairGroup[],Mocassin.Model.Transitions.ConnectorType[])">
            <summary>
                Creates a set of transition rules which are filtered for inversions and physically impossible state changes
            </summary>
            <param name="statePairGroups"></param>
            <param name="connectorTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.FilterInvertedAndReversedDuplicateRules(System.Collections.Generic.IList{`0})">
            <summary>
                Takes a list interface of transition rules and filters out both inverted and reversed duplicate rules. The filtered
                rules are added
                as dependent rules to a parent rule
            </summary>
            <remarks>
                Possibly requires changes in the future since correct definition of "meaningful and duplicate" in all cases
                is tricky
            </remarks>
            <param name="rules"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.SetTransitionState(`0,Mocassin.Model.Transitions.StatePair[],Mocassin.Model.Transitions.ConnectorType[])">
            <summary>
                Sets the transition state of the rule. Default state is 0 for all stables and donor on all unstable positions
            </summary>
            <param name="rule"></param>
            <param name="statePairs"></param>
            <param name="connectorTypes"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.TrySetFinalState(`0,Mocassin.Model.Transitions.StatePair[],Mocassin.Model.Transitions.ConnectorType[])">
            <summary>
                Tries to set the final state of a rule. Aborts if a physically meaningless state change is detected and returns
                false in this case
            </summary>
            <param name="rule"></param>
            <param name="statePairs"></param>
            <param name="connectorTypes"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.CanHaveValidEndState(`0,Mocassin.Model.Transitions.StatePair[])">
            <summary>
                Checks if a combination of rule start occupation and state pairs can result in a meaningful transition end state
            </summary>
            <param name="rule"></param>
            <param name="statePairs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.GetMovementCode(Mocassin.Model.Transitions.ConnectorType[],Mocassin.Model.Transitions.StatePairGroup[])">
            <summary>
                Creates the tracker reorder instruction pairs for the connector pattern
            </summary>
            <param name="connectorTypes"></param>
            <param name="pairGroups"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.TryChangeStateStep(System.ValueTuple{System.Int32,System.Int32}@,System.ValueTuple{Mocassin.Model.Transitions.StatePair,Mocassin.Model.Transitions.StatePair}@,Mocassin.Model.Transitions.ConnectorType)">
            <summary>
                Tries to change the state of the passed states with the state pairs according to the operation define by the
                connector type
            </summary>
            <param name="states"></param>
            <param name="statePairs"></param>
            <param name="connectorType"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.TryChangeStepDynamic(System.ValueTuple{System.Int32,System.Int32}@,System.ValueTuple{Mocassin.Model.Transitions.StatePair,Mocassin.Model.Transitions.StatePair}@)">
            <summary>
                Tries to change the state for a dynamically linked step
            </summary>
            <param name="states"></param>
            <param name="statePairs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.ChangeState(System.Int32,Mocassin.Model.Transitions.StatePair@)">
            <summary>
                Changes the state using the provided state and returns value and change direction (+1 for D-A, -1 for A-D)
            </summary>
            <param name="current"></param>
            <param name="statePair"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.FilterByCommonBehaviorAndInversionRules(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Filters a set of rules by assigning common movement tags and removing all rules that can be generated from each
                other and are therefore equivalent
            </summary>
            <typeparam name="TRule"></typeparam>
            <param name="unfilteredRules"></param>
            <remarks> Equivalent rules are; Back-jump rules, Symmetric rules or twisted symmetric rules  </remarks>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.HandleIntersticialcyLikeRule(`0)">
            <summary>
                Tries to handle the passed rule as a chained/vehicle migration and creates the missing inverse rule if possible
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.DetermineAndSetRuleMovementTypes(System.Collections.Generic.IEnumerable{`0})">
            <summary>
                Determines the combination of rule movement flags for each rule and sets the values
            </summary>
            <param name="rules"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.IsIntersticialyLikeMovement(System.Collections.Generic.IList{System.Int32})">
            <summary>
            Checks if a rule movement description is like the intersticialcy type mechanism
            </summary>
            <param name="movement"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.GetRequiredVehicleFlags(`0)">
            <summary>
                Get the required vehicle flags for the passed transition rule or none if the rule does not describe a vehicle
                mechanism
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.MovementIsAssociationDissociation(`0)">
            <summary>
                Check if the movement description of the passed transition rule conforms to association/dissociation behavior
                independent of what is defined in its set abstract transition
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.GetStepMovementType(System.ValueTuple{Mocassin.Model.Particles.IParticle,Mocassin.Model.Particles.IParticle}@,System.ValueTuple{Mocassin.Model.Particles.IParticle,Mocassin.Model.Particles.IParticle}@)">
            <summary>
                Determines the specific rule movement type of a single type step based upon the characteristics the involve
                particles provide
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRuleGenerator`1.IsValidVacancyExchange(System.ValueTuple{Mocassin.Model.Particles.IParticle,Mocassin.Model.Particles.IParticle}@,System.ValueTuple{Mocassin.Model.Particles.IParticle,Mocassin.Model.Particles.IParticle}@)">
            <summary>
                Checks if two particle tuples describing the start and end states of two dynamically exchanging positions describe
                a valid vacancy exchange that does not violated matter conservation
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns> True if the exchange is valid in the sense of a vacancy mechanism step </returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.IKineticRuleSetter">
            <summary>
                Value setter that enables manipulation of the <see cref="T:Mocassin.Model.Transitions.IKineticRule" /> parameters
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IKineticRuleSetter.AttemptFrequencyConstraint">
            <summary>
                Get the <see cref="T:Mocassin.Framework.Constraints.IValueConstraint`2" /> that limits the settable attempt frequency value range
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IKineticRuleSetter.KineticTransition">
            <summary>
                Get the <see cref="T:Mocassin.Model.Transitions.IKineticTransition" /> that the setter is for
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IKineticRuleSetter.KineticRules">
            <summary>
                Get a read only collection of all <see cref="T:Mocassin.Model.Transitions.IKineticRule" /> objects that can be manipulated by the setter
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IKineticRuleSetter.SetAttemptFrequency(Mocassin.Model.Transitions.IKineticRule,System.Double)">
            <summary>
                Set the attempt frequency of the passed <see cref="T:Mocassin.Model.Transitions.IKineticRule" /> to the passed value
            </summary>
            <param name="rule"></param>
            <param name="value"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.KineticRuleSetter">
            <inheritdoc cref="T:Mocassin.Model.Transitions.IKineticRuleSetter" />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRuleSetter.Transition">
            <summary>
                The <see cref="T:Mocassin.Model.Transitions.KineticTransition" /> object that is managed by the setter
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRuleSetter.RuleDictionary">
            <summary>
                The dictionary to store frequency value overwrites before push operations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRuleSetter.AttemptFrequencyConstraint">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRuleSetter.Mocassin#Model#Transitions#IKineticRuleSetter#KineticTransition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRuleSetter.Mocassin#Model#Transitions#IKineticRuleSetter#KineticRules">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRuleSetter.DataAccessorSource">
            <summary>
                Get or set the <see cref="T:Mocassin.Model.Transitions.TransitionModelData" />  access provider to lock the required data object during push
                operations
            </summary>
            <remarks> Used to lock the energy data object as long as the setter is writing energy values </remarks>
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticRuleSetter.#ctor(Mocassin.Model.Transitions.KineticTransition,Mocassin.Model.Basic.IDataAccessorSource{Mocassin.Model.Transitions.TransitionModelData})">
            <summary>
                Creates new <see cref="T:Mocassin.Model.Transitions.KineticRuleSetter" /> for the passed <see cref="T:Mocassin.Model.Transitions.KineticTransition" /> object
            </summary>
            <param name="transition"></param>
            <param name="dataAccessorSource"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticRuleSetter.PushData">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticRuleSetter.SetAttemptFrequency(Mocassin.Model.Transitions.IKineticRule,System.Double)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.IRuleSetterProvider">
            <summary>
                Provider for <see cref="T:Mocassin.Model.Basic.IValueSetter" /> for <see cref="T:Mocassin.Model.Transitions.ITransitionRule" /> objects
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IRuleSetterProvider.AttemptFrequencyConstraint">
            <summary>
                Get the <see cref="T:Mocassin.Framework.Constraints.IValueConstraint`2" /> that limits the attempt frequency of
                <see cref="T:Mocassin.Model.Transitions.IKineticRule" /> objects
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IRuleSetterProvider.GetRuleSetters">
            <summary>
                Get all <see cref="T:Mocassin.Model.Transitions.IKineticRuleSetter" /> for all <see cref="T:Mocassin.Model.Transitions.IKineticTransition" /> objects
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.IRuleSetterProvider.GetRuleSetter(Mocassin.Model.Transitions.IKineticTransition)">
            <summary>
                Get a <see cref="T:Mocassin.Model.Transitions.IKineticRuleSetter" /> for the passed <see cref="T:Mocassin.Model.Transitions.IKineticTransition" /> object
            </summary>
            <param name="kineticTransition"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.RuleSetterProvider">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.RuleSetterProvider.DataAccessorSource">
            <summary>
                Get The <see cref="T:Mocassin.Model.Basic.IDataAccessorSource`1" /> to manipulate the required <see cref="T:Mocassin.Model.Transitions.TransitionModelData" />
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.RuleSetterProvider.AttemptFrequencyConstraint">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.RuleSetterProvider.#ctor(Mocassin.Model.Basic.IDataAccessorSource{Mocassin.Model.Transitions.TransitionModelData})">
            <summary>
                Create new <see cref="T:Mocassin.Model.Transitions.RuleSetterProvider" /> that uses the provided
                <see cref="T:Mocassin.Model.Basic.IDataAccessorSource`1" />
            </summary>
            <param name="dataAccessorSource"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.RuleSetterProvider.GetRuleSetters">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.RuleSetterProvider.GetRuleSetter(Mocassin.Model.Transitions.IKineticTransition)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.RuleSetterProvider.TransitionsAreEqual(Mocassin.Model.Transitions.IKineticTransition,Mocassin.Model.Transitions.IKineticTransition)">
            <summary>
                Check if the two passed <see cref="T:Mocassin.Model.Transitions.IKineticTransition" /> objects have equal identifiers
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.StatePairGroupCreator">
            <summary>
                Create index based state pair groups from state exchange groups and state exchange pairs for processing operations
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroupCreator.MakeMergedGroup(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.IStateExchangeGroup},System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.IStateExchangePair},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Projects a sequence of state exchange groups onto a state pair pool and particle index pool and returns a single
                state pair group containing all unique possible state pairs
            </summary>
            <param name="stateGroups"></param>
            <param name="statePairPool"></param>
            <param name="particleIndexPool"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroupCreator.MakeGroupsWithBlanks(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.IStateExchangeGroup})">
            <summary>
                Creates a list interface of state pair groups where indices that are not present in the passed state exchange group
                pool are filled with blank entries
            </summary>
            <param name="stateGroups"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroupCreator.MakeGroup(Mocassin.Model.Transitions.IStateExchangeGroup)">
            <summary>
                Creates the state pair group for the provided state exchange group
            </summary>
            <param name="stateGroup"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroupCreator.MakeGroup(Mocassin.Model.Transitions.IStateExchangeGroup,System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.IStateExchangePair},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Projects a single state exchange group onto a pool of particle indices and state pairs and returns a state pair
                group containing all possible state pairs
            </summary>
            <param name="stateGroup"></param>
            <param name="statePairPool"></param>
            <param name="particleIndexPool"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroupCreator.MakeGroup(Mocassin.Model.Transitions.IStateExchangeGroup,System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.IStateExchangePair})">
            <summary>
                Projects a single state exchange group onto a possible pool of state pairs and returns a state pair group that
                contains only the found state pairs
            </summary>
            <param name="stateGroup"></param>
            <param name="statePairPool"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroupCreator.MergeGroups(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.StatePairGroup})">
            <summary>
                Merges a sequence of state pair groups into a single group that contains the uniques
            </summary>
            <param name="groups"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroupCreator.FilterByParticles(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.IStateExchangePair},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
                Filters the state pairs by particle index pool that restricts the possible state pairs and the deprecation status
            </summary>
            <param name="statePairs"></param>
            <param name="particleIndexPool"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroupCreator.FilterByStatePairs(Mocassin.Model.Transitions.IStateExchangeGroup,System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.IStateExchangePair})">
            <summary>
                Filters a state exchange group for all state pairs that are not deprecated and allowed within the provided state
                pair pool
            </summary>
            <param name="stateGroup"></param>
            <param name="statePairPool"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionAnalyzer">
            <summary>
                Bundles analysis functions for both kinetic and metropolis transitions
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionAnalyzer.ContainsRingTransition(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.CrystalVector4D})">
            <summary>
                Checks if a transition geometry described by 4D vectors contains a cycle or ring transition
            </summary>
            <param name="geometryVectors"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionAnalyzer.ContainsRingTransition(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Collections.Generic.IComparer{Mocassin.Mathematics.ValueTypes.Fractional3D})">
            <summary>
                Checks if a sequence of position vectors describe or contain a ring transition with the provided vector comparer
            </summary>
            <param name="positionGeometry"></param>
            <param name="equalityComparer"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionAnalyzer.GetEquivalentIntermediatePositions(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},Mocassin.Symmetry.SpaceGroups.ISpaceGroupService)">
            <summary>
                Takes a set of fractional reference positions and creates a 2D map of all symmetry equivalent intermediate positions
                between each two consecutive vectors
            </summary>
            <param name="geometry"></param>
            <param name="spaceGroupService"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionAnalyzer.IsSymmetricRulePair(Mocassin.Model.Transitions.ITransitionRule,Mocassin.Model.Transitions.ITransitionRule)">
            <summary>
                Check if two rules form a symmetric rule pair meaning one rule is exactly the other but for the inverted case of
                the underlying abstract transition
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <remarks> Rules are symmetric when the abstract is symmetric and the following is true: S_0 == E_1 and S_1 == E_0 </remarks>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Mocassin.Model.Transitions.TransitionAnalyzer.IsBackjumpRulePair(Mocassin.Model.Transitions.ITransitionRule,Mocassin.Model.Transitions.ITransitionRule)" -->
        <member name="M:Mocassin.Model.Transitions.TransitionAnalyzer.IsTwistedRulePair(Mocassin.Model.Transitions.ITransitionRule,Mocassin.Model.Transitions.ITransitionRule)">
            <summary>
                Check if the rule pair form a twisted rule pair where they describe the twisted (Both states reversed) version of
                the symmetric rule pair
            </summary>
            <param name="lhs"></param>
            <param name="rhs"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionAnalyzer.IsSymmetricTransition(Mocassin.Model.Transitions.IAbstractTransition)">
            <summary>
                Checks if the passed abstract transition is symmetric meaning reading the transition in reverse does not change its
                meaning
            </summary>
            <param name="abstractTransition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionAnalyzer.GetChargeTransportChain(Mocassin.Model.Transitions.IAbstractTransition,System.Collections.Generic.IComparer{System.Double})">
            <summary>
                Calculates the abstract transitions charge transport chain that assigns each state position a charge change value
                form donor to acceptor state,
                or NaN if a position has multiple possible values
            </summary>
            <param name="transition"></param>
            <param name="comparer"></param>
            <remarks> Conductivity calculations based on the tracker property alone require this chain to have no Nan values </remarks>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionAnalyzer.GetStatePairChargeTransport(Mocassin.Model.Transitions.IStateExchangePair)">
            <summary>
                Calculates the charge transport value of a single state exchange pair
            </summary>
            <param name="statePair"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.ApproxKineticTransitionMapper">
            <summary>
                Approximated mapper for kinetic transitions that searches and creates all possible 4D encoded paths for reference
                transitions (Uses radial chain search)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.SymmetryService">
            <summary>
                The symmetry service used for geometry comparisons
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.UnitCellProvider">
            <summary>
                The unit cell provider used for the mapping search
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.#ctor(Mocassin.Symmetry.Analysis.ISymmetryAnalysisService,Mocassin.Symmetry.Analysis.IUnitCellProvider{System.Int32})">
            <summary>
                Create new transition mapper that uses the specified symmetry service and unit cell provider
            </summary>
            <param name="symmetryService"></param>
            <param name="unitCellProvider"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.QuickMapping(Mocassin.Model.Transitions.IKineticTransition,System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},Mocassin.Mathematics.Comparer.NumericComparer)">
            <summary>
                Performs a mapping operation for a kinetic transition using all provided start points as possible points of origin.
                Symmetry comparison is approximated
                and intermediate positions are not checked
            </summary>
            <param name="transition"></param>
            <param name="startPoints"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.FilterByIntermediatePositions(System.Collections.Generic.IEnumerable{Mocassin.Model.Transitions.KineticMapping},System.Collections.Generic.IList{Mocassin.Framework.Collections.SetList{Mocassin.Mathematics.ValueTypes.Fractional3D}},System.Double)">
            <summary>
                Filters a sequence of kinetic mappings by returning only mappings that have intermediate positions allowed by the
                passed intermediate map
            </summary>
            <param name="mappings"></param>
            <param name="positionMap"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.IntermediatePositionsValid(Mocassin.Model.Transitions.KineticMapping,System.Collections.Generic.IList{Mocassin.Framework.Collections.SetList{Mocassin.Mathematics.ValueTypes.Fractional3D}},System.Double)">
            <summary>
                Checks if the intermediate position of each step of a mapping can be found in the passed position map
            </summary>
            <param name="mapping"></param>
            <param name="positionMap"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.QuickFilterPaths(System.Collections.Generic.IEnumerable{Mocassin.Symmetry.Analysis.CellEntry{System.Int32}},System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{Mocassin.Symmetry.Analysis.CellEntry{System.Int32}}},Mocassin.Mathematics.Comparer.NumericComparer)">
            <summary>
                Get a symmetry filtered sequence by comparing all sequences to the reference through the internal symmetry analysis
                service (Approximated filtering)
            </summary>
            <param name="reference"></param>
            <param name="geometries"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.GetUniquePaths(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{Mocassin.Symmetry.Analysis.CellEntry{System.Int32}}},Mocassin.Mathematics.Comparer.NumericComparer)">
            <summary>
                Creates a filtered version of a sequence of geometries by removing all duplicate sequences
            </summary>
            <param name="geometries"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.GetGeometricPath(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.CrystalVector4D})">
            <summary>
                Creates the reference geometry sequence from the 4D path information of a kinetic transition
            </summary>
            <param name="pathGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.GetGeometricPath(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D})">
            <summary>
                Creates the reference geometry sequence from the 3DD path information of a kinetic transition
            </summary>
            <param name="pathGeometry"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.GetMassPointPath``1(System.Collections.Generic.IEnumerable{Mocassin.Symmetry.Analysis.CellEntry{``0}})">
            <summary>
                Takes a sequence of cell entries and reinterprets them as a sequence of cartesian mass points
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.EncodeGeometry``1(System.Collections.Generic.IEnumerable{Mocassin.Symmetry.Analysis.CellEntry{``0}})">
            <summary>
                Takes a sequence of cell entries and decodes them as a sequence of 4D crystal vectors
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="sequence"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.ApproxKineticTransitionMapper.MakeCellEntrySequenceComparer``1(System.Collections.Generic.IComparer{Mocassin.Mathematics.ValueTypes.Fractional3D},System.Collections.Generic.IComparer{``0})">
            <summary>
                Creates a sequence comparer for sequences of cell entries that compares lexicographic by vector then entry value
            </summary>
            <typeparam name="T1"></typeparam>
            <param name="vectorComparer"></param>
            <param name="entryComparer"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.KineticTransitionMapper">
            <summary>
                Quick kinetic transition mapper that uses a space group service interface to create the kinetic mappings
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticTransitionMapper.SpaceGroupService">
            <summary>
                The space group service that provides the symmetry operations
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticTransitionMapper.VectorEncoder">
            <summary>
                The vector encoder to switch between fractional and 4D encoded coordinates
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticTransitionMapper.UnitCellProvider">
            <summary>
                The list of existing unit cell positions
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticTransitionMapper.#ctor(Mocassin.Symmetry.SpaceGroups.ISpaceGroupService,Mocassin.Mathematics.Coordinates.IUnitCellVectorEncoder,Mocassin.Symmetry.Analysis.IUnitCellProvider{Mocassin.Model.Structures.ICellReferencePosition})">
            <summary>
                Creates new kinetic transition quick mapper that uses the provided space group service, vector encoder and full
                unit cell provider
            </summary>
            <param name="spaceGroupService"></param>
            <param name="vectorEncoder"></param>
            <param name="unitCellProvider"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticTransitionMapper.GetMappings(Mocassin.Model.Transitions.IKineticTransition)">
            <summary>
                Creates all kinetic transition mappings for the provided transition interface
            </summary>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticTransitionMapper.GetMappings(System.Collections.Generic.IEnumerable{Mocassin.Mathematics.ValueTypes.Fractional3D},Mocassin.Model.Transitions.IKineticTransition)">
            <summary>
                Takes the provided reference geometry of a transition in fractional position information and creates all symmetry
                equivalent mappings
            </summary>
            <param name="geometry"></param>
            <param name="transition"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.MetropolisTransitionMapper">
            <summary>
                Mapper for metropolis transitions that searches and creates all possible 4D encoded exchanges for reference
                transitions
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransitionMapper.MapTransition(Mocassin.Model.Transitions.IMetropolisTransition,System.Collections.Generic.IList{Mocassin.Framework.Collections.SetList{Mocassin.Mathematics.ValueTypes.CrystalVector4D}})">
            <summary>
                Creates the sequence of metropolis transitions mappings that result from a refernce transition and the 4D encoded
                unit cell positions for each symmetry index
            </summary>
            <param name="transition"></param>
            <param name="encodedPositions"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransitionMapper.MapTransitions(Mocassin.Model.Transitions.IMetropolisTransition[],System.Collections.Generic.IList{Mocassin.Framework.Collections.SetList{Mocassin.Mathematics.ValueTypes.CrystalVector4D}})">
            <summary>
                Creates the sequence of metropolis mappings for a set of metropolis transitions with the provided 4D encoded
                position lists
            </summary>
            <param name="transitions"></param>
            <param name="encodedPositions"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransitionMapper.MakeMappings(Mocassin.Model.Transitions.IMetropolisTransition,System.Collections.Generic.IList{Mocassin.Framework.Collections.SetList{Mocassin.Mathematics.ValueTypes.CrystalVector4D}})">
            <summary>
                Creates all transition mappings through a mapping permutation provider
            </summary>
            <param name="transition"></param>
            <param name="encodedPositions"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransitionMapper.GetMappingPermutationSource(Mocassin.Model.Transitions.IMetropolisTransition,System.Collections.Generic.IList{Mocassin.Framework.Collections.SetList{Mocassin.Mathematics.ValueTypes.CrystalVector4D}})">
            <summary>
                Creates a permutation provider for the possible combinations of position indices
            </summary>
            <param name="transition"></param>
            <param name="encodedPositions"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransitionMapper.MappingIsPossible(Mocassin.Model.Transitions.IMetropolisTransition,System.Collections.Generic.IList{Mocassin.Framework.Collections.SetList{Mocassin.Mathematics.ValueTypes.CrystalVector4D}})">
            <summary>
                Checks if a reference transition and the encoded position list result in at least 1 valid mapping
            </summary>
            <param name="transition"></param>
            <param name="encodedPositions"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.AbstractTransition">
            <inheritdoc cref="T:Mocassin.Model.Transitions.IAbstractTransition" />
        </member>
        <member name="P:Mocassin.Model.Transitions.AbstractTransition.StateExchangeGroups">
            <summary>
                List of affiliated state change group for each step
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.AbstractTransition.Connectors">
            <summary>
                Connector types for each step
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.AbstractTransition.StateCount">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.AbstractTransition.ConnectorCount">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.AbstractTransition.IsMetropolis">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.AbstractTransition.IsAssociation">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.AbstractTransition.GetConnectorSequence">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.AbstractTransition.GetStateExchangeGroups">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.AbstractTransition.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.AbstractTransition.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.AbstractTransition.Equals(Mocassin.Model.Transitions.IAbstractTransition)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.IAbstractTransition">
            <summary>
                Represents the abstract basic description of a transition without geometric information
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IAbstractTransition.StateCount">
            <summary>
                Get the number of states of the transition
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IAbstractTransition.ConnectorCount">
            <summary>
                Get the number of connectors. Always has to be StateCount - 1
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IAbstractTransition.IsMetropolis">
            <summary>
                Flag if the abstract transition can only describe a metropolis exchange (State count is 2)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IAbstractTransition.IsAssociation">
            <summary>
                Flag that defines the abstract transition to use association/dissociation mechanism behavior instead of movement
                behavior
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IAbstractTransition.GetStateExchangeGroups">
            <summary>
                Get the state exchange group for each step of the transition
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IAbstractTransition.GetConnectorSequence">
            <summary>
                Get the set of step connectors that describe the position connection
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.IKineticTransition">
            <summary>
                Represents an actual kinetic transition that includes a reference geometry and abstract description
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IKineticTransition.GeometryStepCount">
            <summary>
                The number of geometry steps
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IKineticTransition.AbstractTransition">
            <summary>
                The abstract transition that describes the general transition behavior
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IKineticTransition.GetTransitionRules">
            <summary>
                Get the affiliated transition rules of the transition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.IKineticTransition.GetExtendedTransitionRules">
            <summary>
                Get the affiliated transition rules of the transition including dependent rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.IKineticTransition.GetGeometrySequence">
            <summary>
                Get the geometry of the transition as a sequence of 3D fractional vectors
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.KineticTransition">
            <inheritdoc cref="T:Mocassin.Model.Transitions.IKineticTransition" />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticTransition.AbstractTransition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticTransition.PathGeometry">
            <summary>
                The geometry of the transition as 3D fractional coordinates
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticTransition.TransitionRules">
            <summary>
                The list of affiliated kinetic transition rules (auto-managed by the model)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticTransition.GeometryStepCount">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticTransition.GetExtendedTransitionRules">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticTransition.GetGeometrySequence">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticTransition.GetTransitionRules">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticTransition.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticTransition.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.IMetropolisTransition">
            <summary>
                Represents a metropolis transition that is simply defined by two exchanging sub-lattices
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IMetropolisTransition.FirstCellReferencePosition">
            <summary>
                The first unit cell position that describes the first sub-lattice
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IMetropolisTransition.SecondCellReferencePosition">
            <summary>
                The second unit cell position that describes the second sub-lattice
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IMetropolisTransition.AbstractTransition">
            <summary>
                The affiliated abstract transition describing the transition process
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IMetropolisTransition.GetTransitionRules">
            <summary>
                Get the affiliated transition rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.IMetropolisTransition.GetExtendedTransitionRules">
            <summary>
                Get the affiliated transition rules including the dependent rules
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.IMetropolisTransition.MappingsContainInversion">
            <summary>
                Returns true if the mappings contain their own inverted version
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.MetropolisTransition">
            <inheritdoc cref="T:Mocassin.Model.Transitions.IMetropolisTransition" />
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisTransition.FirstCellReferencePosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisTransition.SecondCellReferencePosition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisTransition.AbstractTransition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisTransition.TransitionRules">
            <summary>
                The list of affiliated metropolis transition rules (Auto-managed by model system)
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransition.GetTransitionRules">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransition.GetExtendedTransitionRules">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransition.Equals(Mocassin.Model.Transitions.IMetropolisTransition)">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisTransition.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransition.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisTransition.MappingsContainInversion">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.IStateExchangeGroup">
            <summary>
                Represents a state exchange group of state exchange pairs to describe state changes in transitions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IStateExchangeGroup.StatePairCount">
            <summary>
                The number of state pairs in the group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IStateExchangeGroup.IsVacancyGroup">
            <summary>
                Flag if the property group is a vacancy group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IStateExchangeGroup.IsUnstablePositionGroup">
            <summary>
            Flag if the exchange group is only valid for unstable positions
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IStateExchangeGroup.GetStateExchangePairs">
            <summary>
                Get the state exchange pairs forming the exchange group
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.StateExchangeGroup">
            <inheritdoc cref="T:Mocassin.Model.Transitions.IStateExchangeGroup" />
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangeGroup.StateExchangePairs">
            <summary>
                The state exchange pairs affiliated with this state exchange group group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangeGroup.IsVacancyGroup">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangeGroup.IsUnstablePositionGroup">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangeGroup.StatePairCount">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.StateExchangeGroup.GetStateExchangePairs">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangeGroup.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.StateExchangeGroup.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.StateExchangeGroup.Equals(Mocassin.Model.Transitions.IStateExchangeGroup)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.IStateExchangePair">
            <summary>
                Represents a state exchange pair of two particles where one is the acceptor state and the other the donor state
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IStateExchangePair.IsVacancyPair">
            <summary>
                Flag if the property state pair belongs to a vacancy mechanism (Exactly one of the states is a vacancy)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IStateExchangePair.IsUnstablePositionPair">
            <summary>
                Flag if the exchange pair is only valid for unstable positions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IStateExchangePair.DonorParticle">
            <summary>
                The index of the particle representing the donor state
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IStateExchangePair.AcceptorParticle">
            <summary>
                The index of the particle representing the acceptor state
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IStateExchangePair.AsIndexTuple">
            <summary>
                Get the state pair particle index information as a two value tuple
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.StateExchangePair">
            <inheritdoc cref="T:Mocassin.Model.Transitions.IStateExchangePair" />
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangePair.DonorParticle">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangePair.AcceptorParticle">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangePair.IsUnstablePositionPair">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangePair.IsVacancyPair">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.StateExchangePair.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.StateExchangePair.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.StateExchangePair.Equals(Mocassin.Model.Transitions.IStateExchangePair)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.StateExchangePair.AsIndexTuple">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.StateExchangePair.CompareTo(Mocassin.Model.Transitions.IStateExchangePair)">
            <summary>
                Sorts by donor index than acceptor index. Does not check for inverse equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.ITransitionRule">
            <summary>
                Represents a transition rule of unspecified type that describes the state change during a transition and can be
                toggled on or off
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ITransitionRule.PathLength">
            <summary>
                The path length of the transition
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ITransitionRule.TransitionRuleFlags">
            <summary>
                The rule flags of the rule
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ITransitionRule.MovementFlags">
            <summary>
                The type of movement the rule describes
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ITransitionRule.AbstractTransition">
            <summary>
                The abstract transition instance
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.ITransitionRule.SelectableParticle">
            <summary>
                The selectable particle the rule describes
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionRule.GetStartStateOccupation">
            <summary>
                The particle indices of the transition path in the start state
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionRule.GetFinalStateOccupation">
            <summary>
                The particle indices of the transition in the final state
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionRule.GetTransitionStateOccupation">
            <summary>
                The particle indices for the unstable transition positions
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.ITransitionRule.GetMovementDescription">
            <summary>
                Get an index based description of the movement from start state to end state
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.RuleMovementFlags">
            <summary>
                Further specifies the type of the rule in terms of the physical process
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.RuleMovementFlags.HasUnsupportedMovement">
            <summary>
                Movement contains unsupported or unrecognized steps
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.RuleMovementFlags.HasPhysicalMovement">
            <summary>
                Movement contains physical movement
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.RuleMovementFlags.HasPropertyMovement">
            <summary>
                Movement contains property exchange movement
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.RuleMovementFlags.HasVacancyMovement">
            <summary>
                Movement contains vacancy movement
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.RuleMovementFlags.HasVehicleMovement">
            <summary>
                Movement contains vehicle movement
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.RuleMovementFlags.HasChainedMovement">
            <summary>
                Movement contains physical atom pushing movement
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.RuleMovementFlags.IsExchange">
            <summary>
                Movement is recognized as an exchange
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.RuleMovementFlags.IsMigration">
            <summary>
                Movement is recognized as a migration
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.RuleMovementFlags.IsAssociation">
            <summary>
                Movement is recognized as an association/dissociation type
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionRule">
            <inheritdoc cref="T:Mocassin.Model.Transitions.ITransitionRule" />
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRule.PathLength">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRule.AbstractTransition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRule.TransitionRuleFlags">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRule.MovementFlags">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRule.StartState">
            <summary>
                The start state of the transition
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRule.FinalState">
            <summary>
                The final state of the transition
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRule.TransitionState">
            <summary>
                The transition state of the transition
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRule.MovementCode">
            <summary>
                Describes the physical movement as a sequence of integers
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.TransitionRule.SelectableParticle">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRule.CompareTo(Mocassin.Model.Transitions.ITransitionRule)">
            <summary>
                Compares to other rule (Lexicographical compare of start state and end state, returns 0 if start state and end
                state are identical)
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRule.CompareToWithCodeInversion(Mocassin.Model.Transitions.ITransitionRule)">
            <summary>
                Performs a lexicographic compare of start and end states while detecting inverted equivalency as well
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRule.IsPhysicallyInvalid">
            <summary>
                Checks if the rule is marked as physically invalid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRule.GetStartStateOccupation">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRule.GetFinalStateOccupation">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRule.GetTransitionStateOccupation">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRule.GetMovementDescription">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRule.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.TransitionRule.AddDependentRule(Mocassin.Model.Transitions.TransitionRule)">
            <summary>
                Adds a dependent rule to this rule
            </summary>
            <param name="rule"></param>
        </member>
        <member name="T:Mocassin.Model.Transitions.TransitionRuleFlags">
            <summary>
                Flag for properties of transition rules
            </summary>
        </member>
        <member name="F:Mocassin.Model.Transitions.TransitionRuleFlags.PhysicallyInvalid">
            <summary>
                Flag for physically meaningless rules
            </summary>
        </member>
        <member name="T:Mocassin.Model.Transitions.IKineticRule">
            <summary>
                Represents a kinetic transition rule that describes a dynamic state change process and allows for setting of
                boundary flags and attempt frequency
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IKineticRule.Transition">
            <summary>
                Get the parent kinetic transition
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IKineticRule.AttemptFrequency">
            <summary>
                The attempt frequency of this rule
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IKineticRule.GetDependentRules">
            <summary>
                Get an enumerable of dependent rules that are a result of this one
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.KineticRule">
            <inheritdoc cref="T:Mocassin.Model.Transitions.IKineticRule" />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRule.Transition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRule.AttemptFrequency">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRule.DependentRules">
            <summary>
                The list of dependent rules that are a direct result of this rule
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticRule.#ctor">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticRule.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticRule.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticRule.GetDependentRules">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticRule.AddDependentRule(Mocassin.Model.Transitions.TransitionRule)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.IMetropolisRule">
            <summary>
                Represents a metropolis transition rule that describes a static state exchange
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.IMetropolisRule.Transition">
            <summary>
                Get the metropolis parent transition
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.IMetropolisRule.GetDependentRules">
            <summary>
                Get all dependent rules that are a direct result of this rule
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.MetropolisRule">
            <inheritdoc cref="T:Mocassin.Model.Transitions.IMetropolisRule" />
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisRule.Transition">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisRule.DependentRules">
            <summary>
                The list of dependent rules that are a direct result of this rule
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisRule.#ctor">
            <summary>
                Creates new kinetic rule with empty dependent rule list
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisRule.GetDependentRules">
            <inheritdoc />
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisRule.ObjectName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisRule.PopulateFrom(Mocassin.Model.Basic.IModelObject)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisRule.AddDependentRule(Mocassin.Model.Transitions.TransitionRule)">
            <inheritdoc />
        </member>
        <member name="T:Mocassin.Model.Transitions.KineticMapping">
            <summary>
                Mapping for a kinetic transition that describes a 4D encoded transition path belonging to a specific kinetic
                reference transition
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.StartCellReferencePosition">
            <summary>
                The unit cell position that describes the start point
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.EndCellReferencePosition">
            <summary>
                The unit cell position that describes the end point
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.Transition">
            <summary>
                The interface of the transition the mapping is valid for
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.EncodedPath">
            <summary>
                The transition path encoded as a set of 4D vectors (Cannot be null)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.FractionalPath">
            <summary>
                The transition path in fractional coordinates (Can be null)
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.PathLength">
            <summary>
                The path length of the mapping
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.StartVector4D">
            <summary>
                The 4D encoded start position vector of the mapping
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.EndVector4D">
            <summary>
                The 4D encoded end position vector of the mapping
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.StartVector3D">
            <summary>
                The 3D fractional start position vector of the mapping
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.KineticMapping.EndVector3D">
            <summary>
                The 3D fractional end position vector of the mapping
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticMapping.#ctor(Mocassin.Model.Transitions.IKineticTransition,Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Model.Structures.ICellReferencePosition,Mocassin.Mathematics.ValueTypes.CrystalVector4D[],Mocassin.Mathematics.ValueTypes.Fractional3D[])">
            <summary>
                Create a new kinetic mapping from transition interface, cell positions, 4D encoded transition path and fractional
                path
            </summary>
            <param name="transition"></param>
            <param name="startCellReferencePosition"></param>
            <param name="endCellReferencePosition"></param>
            <param name="encodedPath"></param>
            <param name="fractionalPath"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticMapping.#ctor(Mocassin.Model.Transitions.IKineticTransition,Mocassin.Mathematics.ValueTypes.CrystalVector4D[])">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.KineticMapping.CreateGeometricInversion">
            <summary>
                Creates an inverted kinetic mapping
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.MetropolisMapping">
            <summary>
                Mapping for a metropolis transition that describes an exchange between two unit cell positions
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisMapping.Transition">
            <summary>
                The parent metropolis transition this mapping is valid for
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisMapping.PositionIndex0">
            <summary>
                Index of the first position
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.MetropolisMapping.PositionIndex1">
            <summary>
                Index of the second position
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisMapping.#ctor(Mocassin.Model.Transitions.IMetropolisTransition,System.Int32,System.Int32)">
            <summary>
                Create new metropolis mapping from two exchanging position indices and the parent transition
            </summary>
            <param name="firstPositionIndex"></param>
            <param name="secondPositionIndex"></param>
            <param name="transition"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisMapping.CompareTo(Mocassin.Model.Transitions.MetropolisMapping)">
            <summary>
                Compares two metropolis mappings by their position indices
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisMapping.Equals(Mocassin.Model.Transitions.MetropolisMapping)">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.MetropolisMapping.CreateGeometricInversion">
            <summary>
                Creates the geometric inversion of the <see cref="T:Mocassin.Model.Transitions.MetropolisMapping"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.MovementCode">
            <summary>
                Describes a physical movement during a transition as a set of integer values
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.MovementCode.AsExchangePairs">
            <summary>
                Returns the movement code as an exchange pair instruction
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.MovementCode.GetTypeName">
            <inheritdoc />
        </member>
        <member name="M:Mocassin.Model.Transitions.MovementCode.GetInverse">
            <summary>
                Get the inverted movement code
            </summary>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.StatePair">
            <summary>
                Represents a state pair of a donor and acceptor particle index
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.StatePair.PositionStability">
            <summary>
                The status of the position the state pair belongs to
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.StatePair.DonorIndex">
            <summary>
                The acceptor particle index
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.StatePair.AcceptorIndex">
            <summary>
                The donor particle index
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePair.#ctor(System.Int32,System.Int32,Mocassin.Model.Structures.PositionStability)">
            <summary>
                Creates new state pair from donor and acceptor particle index and a position status
            </summary>
            <param name="donorIndex"></param>
            <param name="acceptorIndex"></param>
            <param name="positionStability"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePair.MakeUnstable(System.Int32)">
            <summary>
                Get a state pair for an unstable position that is always 0 for the acceptor state
            </summary>
            <param name="donorIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePair.CreateForStatus(System.Int32,System.Int32,Mocassin.Model.Structures.PositionStability)">
            <summary>
                Creates for the correct position status, i.e. the acceptor state of non-stables will be corrected to 0
            </summary>
            <param name="donorIndex"></param>
            <param name="acceptorIndex"></param>
            <param name="positionStability"></param>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePair.CompareTo(Mocassin.Model.Transitions.StatePair)">
            <summary>
                Compares donor index than acceptor index
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Mocassin.Model.Transitions.StatePairGroup">
            <summary>
                Represents a decode version of a property group which is completely describes by particle indices
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.StatePairGroup.PositionStability">
            <summary>
                Defines the position status of the state pair group
            </summary>
        </member>
        <member name="P:Mocassin.Model.Transitions.StatePairGroup.StatePairs">
            <summary>
                The particle index decoded state pairs belonging to the group
            </summary>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroup.#ctor(System.ValueTuple{System.Int32,System.Int32}[],Mocassin.Model.Structures.PositionStability)">
            <summary>
                Create new state pair group from a set of donor and acceptor states and the provided position status
            </summary>
            <param name="statePairs"></param>
            <param name="positionStability"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroup.#ctor(System.ValueTuple{System.Int32,System.Int32}[])">
            <summary>
                Create new state pair group from a set of donor and acceptor states with stable position status
            </summary>
            <param name="statePairs"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroup.AutoChangeStatus">
            <summary>
                Automatically generates a copy of the state pair group with the position flag set to unstable if any of the
                acceptor is the void (0) index
                or stable otherwise
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroup.GetStatusChanged(Mocassin.Model.Structures.PositionStability)">
            <summary>
                Returns a new state pair group that contains the same information but carries a new position status
            </summary>
            <param name="stability"></param>
        </member>
        <member name="M:Mocassin.Model.Transitions.StatePairGroup.CreateEmpty">
            <summary>
                Creates an empty state pair group
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
