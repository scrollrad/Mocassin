//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mocassin.UI.GUI.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Tooltips {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Tooltips() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Mocassin.UI.GUI.Resources.Tooltips", typeof(Tooltips).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to State change chains or abstract transitions describe complex state change processes (mechanisms) as linearized chains of state change groups and their sequential dependencies independent of the actual geometry. Each chain can contain up to eight involved positions and the supported chain connection types are predefined by Mocassin. The chains are later bound to reference geometries of matching size and can be reused for multiple geometry bindings.
        ///
        ///[Properties]
        ///
        ///[Connection Pattern]
        ///Defines the connect [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_AbstractTransition {
            get {
                return ResourceManager.GetString("ModelObject_AbstractTransition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lattice building block objects describe a default host matrix for supercell creation to which doping processes can be applied. The system is currently unfinished and allows only the default host matrix to be used for the entire supercell..
        /// </summary>
        public static string ModelObject_BuildingBlock {
            get {
                return ResourceManager.GetString("ModelObject_BuildingBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The unit cell settings define the geometry of the unit cell using cell parameters and angles. The data is limited by the selected space group, e.g. if the underlying space group is cubic, the system automatically enforces cubic parameters and angles.
        ///
        ///[Properties]
        ///
        ///[Structure Name]
        ///Name your structure.  This property currently has no meaningful effect.
        ///
        ///[Parameter a,b,c]
        ///The cell parameters of the unit cell in [Å].
        ///
        ///[Angle α,β,γ] 
        ///The angles of the unit cell in degree..
        /// </summary>
        public static string ModelObject_CellParameterSettings {
            get {
                return ResourceManager.GetString("ModelObject_CellParameterSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Position defect energies can be used to assign each possible occupation that is not ‘Void’ for each defined unit cell position a basic offset energy. The most common use for this model object is to provide basic barriers for KMC simulations by assigning migrating species non-zero energies on unstable positions.
        ///
        ///[Properties]
        ///
        ///[Particle] (readonly)
        ///The particle that the energy value will be affiliated with.
        ///
        ///[Cell Position] (readonly)
        ///The unit cell position the energy value will be affiliated with.
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_DefectEnergy {
            get {
                return ResourceManager.GetString("ModelObject_DefectEnergy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Doping objects describe how a lattice building block is manipulated by particle exchanges. Doping is always subjected to uniform random placement rules and can be performed in a sequential order to perform dependent replacement operations. Each doping defined here can later be quantified in generated parameterization templates.
        ///
        ///[Properties]
        ///
        ///[Auto Charge Balance]
        ///Activating this flag causes Mocassin to automatically calculate the required amount of dependent exchange to achieve charge neutrality. Sinc [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_Doping {
            get {
                return ResourceManager.GetString("ModelObject_Doping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stable environment cutoff radius defines the maximum range until which Mocassin will automatically search and list pair interactions and accept multi-body clusters. The value is given in Å and is applied to all stable environments..
        /// </summary>
        public static string ModelObject_EnvironmentCutoffRange {
            get {
                return ResourceManager.GetString("ModelObject_EnvironmentCutoffRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Group interactions or clusters are multi-body interactions consisting of a center or start position and up-to eight surrounding positions that are defined by a symmetry-reduced reference geometry. The provided data is symmetry extended and permuted with respect to the space group symmetry and duplicates that can be projected onto each other are removed. It is important to note that clusters are additive to existing pair interactions. During simulation building, cluster geometries are encoded using existing  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_GroupInteraction {
            get {
                return ResourceManager.GetString("ModelObject_GroupInteraction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interaction filters are used to remove specific subsets of interactions from the pair interaction search and permutation system. They are implemented as hollow sphere filters that filter all interactions between two sublattices within a given range interval.
        ///
        ///[Properties]
        ///
        ///[Min. Radius]
        ///The lower limiting radius in [Å] from which the filter is applied.
        ///
        ///[Max. Radius]
        ///The upper limiting radius in [Å] from which the filter is no longer applied.
        ///
        ///[Reference Position 1]
        ///The first position to which th [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_InteractionFilter {
            get {
                return ResourceManager.GetString("ModelObject_InteractionFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kinetic or KMC simulation model objects serve as the base definitions for simulations that target the Kinetic Monte Carlo solver. They define the allowed transitions within a simulation and provide a set of fallback simulation parameters. Each KMC simulation job set later requires the definition of which MMC simulation base object to use for data generation.
        ///
        ///[Properties]
        ///
        ///[Transitions]
        ///Defines the list of allowed Kinetic transitions during simulation. Transitions are added selecting values from the dr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_KineticSimulation {
            get {
                return ResourceManager.GetString("ModelObject_KineticSimulation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kinetic or KMC transition objects define time and space dependent state changes for the lattices by binding a complex process chain to a symmetry-reduced reference geometry. They serve as definition objects and can later be assigned to actual simulations. The resulting migration paths are deduced with the space group symmetry and the existing subprocesses after occupation permutation can be customized later to assign an attempt frequency to each migration.
        ///
        ///[Properties]
        ///
        ///[State Change Chain]
        ///Refer to t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_KineticTransition {
            get {
                return ResourceManager.GetString("ModelObject_KineticTransition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metropolis or MMC simulation model objects serve as the base definitions for simulations that target the Metropolis Monte Carlo solver. They define the allowed transitions within a simulation and provide a set of fallback simulation parameters. Each MMC simulation job set later requires the definition of which MMC simulation base object to use for data generation.
        ///
        ///[Properties]
        ///
        ///[Transitions]
        ///Defines the list of allowed Metropolis transitions during simulation. Transitions are added selecting values fr [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_MetropolisSimulation {
            get {
                return ResourceManager.GetString("ModelObject_MetropolisSimulation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metropolis or MMC transition objects describe time and space independent particles swaps between two or within one sublattice. They serve as definition objects only and can later be assigned to actual simulations. Defining more transitions than required has no negative impact as the simulations only include transitions assigned to them.
        ///
        ///[Properties]
        ///
        ///[State Change Chain]
        ///Select a previously created state change chain that describes the abstract transition for the metropolis transition. The system auto [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_MetropolisTransition {
            get {
                return ResourceManager.GetString("ModelObject_MetropolisTransition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Occupation exchanges define a partial doping by providing replacement of one particle with another on a specific sublattice. Two occupation exchanges with opposite charge deltas can be used by Mocassin to infer charge compensation.
        ///
        ///[Properties]
        ///
        ///[Cell Position]
        ///The unit cell reference position of the affected sublattice.
        ///
        ///[Old Particle]
        ///The original particle that is replaced.
        ///
        ///[New Particle]
        ///The new particle that serves as the replacement..
        /// </summary>
        public static string ModelObject_OccupationExchange {
            get {
                return ResourceManager.GetString("ModelObject_OccupationExchange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The particle model object describes a species of the simulation. A total of 63 custom species can be created and an implicit empty state called ‘Void’ exists. It is recommended to define as few particles as possible and to use placeholders for reusability if multiple doping types are to be simulated, e.g. “trivalent doping ion”.
        ///
        ///[Properties]
        ///
        ///[Symbol]
        ///Assign an element or pseudoelement symbol that identifies the type of the particle. This symbol will be used to detect and process mass conservation bet [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_Particle {
            get {
                return ResourceManager.GetString("ModelObject_Particle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Particle sets define the possible occupations sets required within the simulation. Each unit cell position requires a particle set to define the allowed occupations and limit the permutation options. E.g., a simple vacancy mechanism with one sublattice requires two particle sets: (i) the set for the stable position containing the mobiles species and a vacancy; (ii) the set for the unstable transition state which contains only the mobile particle since the usual state of unstable positions is the ‘Void’ part [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_ParticleSet {
            get {
                return ResourceManager.GetString("ModelObject_ParticleSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///[Temperature]
        ///The simulation temperature in [K].
        ///
        ///[Target Steps per Particle]
        ///The minimum number of Monte Carlo steps per mobile particle (MCSP) that is conducted in the main run before the solver stops the simulation. This value is usually not reached exactly as the solver executes simulations with specific block sizes for performance reasons.
        ///
        ///[Simulation Block Count]
        ///This value is currently not supported.
        ///
        ///[Random Number Generator Seed]
        ///Provides a fallback seed for the RNG. Settings this valu [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_Simulation_SharedSettings {
            get {
                return ResourceManager.GetString("ModelObject_Simulation_SharedSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The space group is a unique model object that defines the cell symmetry operations. Mocassin ships with a database for all 230 space groups, some of which with multiple unique axis options. The group is defined by selecting an entry from the provided list.
        ///
        ///[Properties]
        ///
        ///[Group Number] (readonly)
        ///The number/index of the group in the international tables of crystallography. 
        ///
        ///[Mauguin] (readonly)
        ///The Hermann-Mauguin symbol of the space group.
        ///
        ///[Crystal Type] (readonly)
        ///The crystal system affiliate [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_SpaceGroup {
            get {
                return ResourceManager.GetString("ModelObject_SpaceGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The state exchange group defines allowed state changes for a local position. Due to the way Mocassin stores electric field influences for simulations, it is only allowed to group state changes that describe equivalent charge changes. Often, each state change group contains only one entry. A possible example for more than one entry would be treatment of equivalent species with a single process, e.g. vacancy movement with multiple halogen ions in the same sublattice, where the type of the moving ion is not re [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_StateExchangeGroup {
            get {
                return ResourceManager.GetString("ModelObject_StateExchangeGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The state change object or state exchange pair defines a pair of interchangeable local states required to describe complex state changes for the system as a swap between two particles. The two states are arbitrarily named ‘donor state’ and ‘acceptor state’ and can be conducted in both directions. For KMC it is usually recommended to assign the vacancy state as the acceptor. E.g. a vacancy mechanism requires two state changes: (i) a local particle can switch from a vacancy state (acceptor) to the mobile spec [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_StateExchangePair {
            get {
                return ResourceManager.GetString("ModelObject_StateExchangePair", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The cell positions define the symmetry reduced position of the simulation unit cell. Since Mocassin uses fixed positions, it is also required to define the unstable transition sites when KMC simulations are conducted.
        ///
        ///[Properties]
        ///
        ///[A, B, C]
        ///The a,b,c offset of the unit cell position in range [0…1).
        ///
        ///[Stability]
        ///The stability flag of the position. Choose ‘stable’ for regular lattice positions and ‘unstable’ for KMC transition positions.
        ///
        ///[Occupation]
        ///The occupation set of the unit cell position  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_UnitCellPosition {
            get {
                return ResourceManager.GetString("ModelObject_UnitCellPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unstable environment model objects behave like the regular environment settings. The difference is that each unstable position has its own interaction range and filter set since the interaction is one way from unstable to stable. These model objects cannot be added manually, they are automatically generated by the model building system.
        ///
        ///[Properties]
        ///
        ///[Center] (readonly)
        ///The center unit cell position the environment data is applied to.
        ///
        ///[Cutoff Radius]
        ///The maximum interaction radius in [Å].
        ///
        ///[Inte [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ModelObject_UnstableEnvironment {
            get {
                return ResourceManager.GetString("ModelObject_UnstableEnvironment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Kinetic transition rule sets are generated for each KMC transition allowed in the simulation. The contain the symmetry reduced set of transition rules describing the start state, transition state, and final state of the migration path during a transition attempt. They are used to customize the transition attempt frequency of KMC events.
        ///
        ///[Properties]
        ///
        ///[Unique Rules] (readonly)
        ///Defines how many unique rule permutations exist.
        ///
        ///[Source Transition] (readonly)
        ///Defines the name of the transition model ob [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Parametrization_KineticTransitionRule {
            get {
                return ResourceManager.GetString("Parametrization_KineticTransitionRule", resourceCulture);
            }
        }
    }
}
