<UserControl
  x:Class="Mocassin.UI.GUI.Controls.ProjectWorkControl.ModelControls.TransitionModel.DataControl.AbstractTransitionControlView"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:local="clr-namespace:Mocassin.UI.GUI.Controls.ProjectWorkControl.ModelControls.TransitionModel.DataControl"
  xmlns:gridControl="clr-namespace:Mocassin.UI.GUI.Controls.ProjectWorkControl.ModelControls.TransitionModel.GridControl"
  mc:Ignorable="d"
  d:DataContext="{d:DesignInstance local:AbstractTransitionControlViewModel, IsDesignTimeCreatable=True}"
  d:DesignHeight="450" d:DesignWidth="800"
  Background="Transparent">

  <UserControl.Resources>
    <ToolTip x:Key="ToolTip.StateExchangePair" Style="{StaticResource App.Style.ToolTip.Default}">
      <StackPanel>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.StateExchangePair}" 
               Style="{StaticResource App.Style.Run.ModelObject}" />
          <Run Text="objects describe the basic possible changes of position occupations within your cell." />
          <Run Text="Each change is formed by two" />
          <Run Text="{StaticResource App.String.Particle}" 
               Style="{StaticResource App.Style.Run.ModelObject}" />
          <Run Text="objects, describing donor and acceptor state. The" />
          <Run Text="{StaticResource App.String.Particle.Void}" 
               Style="{StaticResource App.Style.Run.ModelObject}" />
          <Run Text="is a special acceptor for transition state changes from 'nothing' to 'something'." />
          <LineBreak />
          <Run Text="Keep in mind: These objects are the first part of MOCASSINS's movement abstraction system." 
               Style="{StaticResource App.Style.Run.Important}"/>
          <Run Text="For Example, in an oxygen vacancy mechanism, the start position 'vacancy' state changes to an 'oxygen'." 
               Style="{StaticResource App.Style.Run.Important}" />
          <Run Text="The end position will change from 'oxygen' to 'vacancy', so the same" 
               Style="{StaticResource App.Style.Run.Important}" />
          <Run Text="{StaticResource App.String.StateExchangePair}" 
               Style="{StaticResource App.Style.Run.ModelObject}" />
          <Run Text="is valid here." 
               Style="{StaticResource App.Style.Run.Important}" />
          <Run Text="During transition however, the 'nothing' state of the unstable position will temporary change to an 'oxygen'." 
               Style="{StaticResource App.Style.Run.Important}" />
          <Run Text="So, for KMC this change has to be defined as well, while for MMC the first is sufficient." 
               Style="{StaticResource App.Style.Run.Important}" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.ToolTip.PropertyInfo}" 
               Style="{StaticResource App.Style.Run.Important}" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.StateExchangePair.AcceptorState}" 
               Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Define the" />
          <Run Text="{StaticResource App.String.Particle}" 
               Style="{StaticResource App.Style.Run.ModelObject}" />
          <Run Text="describing the acceptor state of an exchange (e.g. 'vacancy', 'nothing',...)." />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.StateExchangePair.DonorState}" 
               Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Define the" />
          <Run Text="{StaticResource App.String.Particle}" 
               Style="{StaticResource App.Style.Run.ModelObject}" />
          <Run Text="describing the donor state of an exchange (e.g. 'ion', 'polaron',...)." />
          <LineBreak />
        </TextBlock>

      </StackPanel>

    </ToolTip>
    <ToolTip x:Key="ToolTip.StateExchangeGroup" Style="{StaticResource App.Style.ToolTip.Default}">
  <StackPanel>

    <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
      <Run Text="{StaticResource App.String.StateExchangeGroup}" 
           Style="{StaticResource App.Style.Run.ModelObject}" />
      <Run Text="objects define sets of analogous state exchanges which share a common charge change." />
      <Run Text="Normally, each group consists of just one" />
      <Run Text="{StaticResource App.String.StateExchangePair}" 
           Style="{StaticResource App.Style.Run.ModelObject}" />
      <Run Text="and adding more is only recommended for simultaneous treatment of similar ions with similar transitions." />
      <Run Text="For example, grouping multiple 'halide ion' to 'vacancy' changes for a common halide movement behavior." />
      <LineBreak />
      <Run Text="Keep in mind: This is the second step of movement abstraction." 
           Style="{StaticResource App.Style.Run.Important}"/>
      <Run Text="Forming a group still allows species specific energy modeling an result evaluation." 
           Style="{StaticResource App.Style.Run.Important}"/>
      <Run Text="It simply allows MOCASSIN to generate multiple transitions and affiliated behavior rules in a single step." 
           Style="{StaticResource App.Style.Run.Important}"/>
    </TextBlock>

    <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
      <Run Text="{StaticResource App.String.ToolTip.PropertyInfo}" 
           Style="{StaticResource App.Style.Run.Important}" />
      <LineBreak />
    </TextBlock>

    <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
      <Run Text="{StaticResource App.String.StateExchangeGroup.StateExchangePairs}" 
           Style="{StaticResource App.Style.Run.Property}" />
      <LineBreak />
      <Run Text="The set of" />
      <Run Text="{StaticResource App.String.StateExchangePair}" 
           Style="{StaticResource App.Style.Run.ModelObject}" />
      <Run Text="objects that should be treated simultaneously." />
      <Run Text="MOCASSIN requires members to have a common relative charge change from donor to acceptor state." />
      <LineBreak />
    </TextBlock>

  </StackPanel>

</ToolTip>
    <ToolTip x:Key="AbstractTransition" Style="{StaticResource App.Style.ToolTip.Default}">
  <StackPanel>

    <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
      <Run Text="{StaticResource App.String.AbstractTransition}" 
           Style="{StaticResource App.Style.Run.ModelObject}" />
      <Run Text="objects provide a basis for automatic deduction of possible state changes that involve multiple positions." />
      <Run Text="Each position involved in a transition is assigned a" />
      <Run Text="{StaticResource App.String.StateExchangeGroup}" 
           Style="{StaticResource App.Style.Run.ModelObject}" />
      <Run Text="to describe allowed changes and connection flags for consecutive members describe their interaction." />
      <LineBreak />
      <Run Text="Keep in mind: All model input has to be done symmetry reduced and is expanded to P1 using your " Style="{StaticResource App.Style.Run.Important}"/>
      <Run Text="{StaticResource App.String.SpaceGroup}" Style="{StaticResource App.Style.Run.ModelObject}" />
      <Run Text="choice. Inversely, geometric and permutation analysis/searches will yield only symmetry reduced results." Style="{StaticResource App.Style.Run.Important}" />
      <LineBreak />
    </TextBlock>

    <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
      <Run Text="{StaticResource App.String.ToolTip.PropertyInfo}" Style="{StaticResource App.Style.Run.Important}" />
      <LineBreak />
    </TextBlock>

    <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
      <Run Text="{StaticResource App.String.SpaceGroup.Index}" Style="{StaticResource App.Style.Run.Property}" />
      <LineBreak />
      <Run Text="The index/id of the group within the international table of space groups." />
      <LineBreak />
    </TextBlock>

    <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
      <Run Text="{StaticResource App.String.SpaceGroup.Literal}" Style="{StaticResource App.Style.Run.Property}" />
      <LineBreak />
      <Run Text="The string representation/name of the group." />
      <LineBreak />
    </TextBlock>

    <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
      <Run Text="{StaticResource App.String.SpaceGroup.Info}" Style="{StaticResource App.Style.Run.Property}" />
      <LineBreak />
      <Run Text="Additional symmetry information for groups with multiple axis or origin choices." />
      <LineBreak />
    </TextBlock>

    <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
      <Run Text="{StaticResource App.String.SpaceGroup.System}" Style="{StaticResource App.Style.Run.Property}" />
      <LineBreak />
      <Run Text="The crystal system that the space group belongs to." />
      <LineBreak />
    </TextBlock>

  </StackPanel>

</ToolTip>
  </UserControl.Resources>
  <Grid>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*" />
      <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
      <RowDefinition Height="*" />
      <RowDefinition Height="*" />
    </Grid.RowDefinitions>

    <GroupBox Grid.Row="0" 
              Grid.Column="0"
              Style="{StaticResource App.Style.GroupBox.LeftBorder}">

      <GroupBox.Header>
        <TextBlock>
          <Run Text="[State Exchange Pairs]" />
          <Run Text="[?]" 
               ToolTip="{StaticResource ToolTip.StateExchangePair}"
               Style="{StaticResource App.Style.Run.Keyword}" />
        </TextBlock>
      </GroupBox.Header>

      <gridControl:ExchangePairGridControlView Margin="{StaticResource App.Margin.GroupBoxContent}"
                                               DataContext="{Binding ExchangePairGridViewModel}" />
    </GroupBox>

    <GroupBox Grid.Row="0" 
              Grid.Column="1" 
              Style="{StaticResource App.Style.GroupBox.LeftBorder}">

      <GroupBox.Header>
        <TextBlock>
          <Run Text="[State Exchange Groups]" />
          <Run Text="[?]" 
               ToolTip="{StaticResource ToolTip.StateExchangeGroup}"
               Style="{StaticResource App.Style.Run.Keyword}" />
        </TextBlock>
      </GroupBox.Header>

      <gridControl:ExchangeGroupGridControlView Margin="{StaticResource App.Margin.GroupBoxContent}"
                                                DataContext="{Binding ExchangeGroupGridViewModel}" /> 
    </GroupBox>

    <GroupBox Grid.Row="1" 
              Grid.Column="0" 
              Grid.ColumnSpan="2" 
              Style="{StaticResource App.Style.GroupBox.LeftBorder}">

      <GroupBox.Header>
        <TextBlock>
          <Run Text="[Abstract Transitions]" />
          <Run Text="[?]" 
               ToolTip="{StaticResource AbstractTransition}"
               Style="{StaticResource App.Style.Run.Keyword}" />
        </TextBlock>
      </GroupBox.Header>

      <gridControl:AbstractTransitionGridControlView Margin="{StaticResource App.Margin.GroupBoxContent}"
                                                     DataContext="{Binding AbstractTransitionGridViewModel}" />
    </GroupBox>
  </Grid>
</UserControl>
