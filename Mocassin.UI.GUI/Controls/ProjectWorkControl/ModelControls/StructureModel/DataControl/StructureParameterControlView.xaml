<UserControl
  x:Class="Mocassin.UI.GUI.Controls.ProjectWorkControl.ModelControls.StructureModel.DataControl.StructureParameterControlView"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
  xmlns:local="clr-namespace:Mocassin.UI.GUI.Controls.ProjectWorkControl.ModelControls.StructureModel.DataControl"
  xmlns:converter="clr-namespace:Mocassin.UI.GUI.Base.Converter"
  xmlns:crystalSystems="clr-namespace:Mocassin.Symmetry.CrystalSystems;assembly=Mocassin.Symmetry"
  d:DataContext="{d:DesignInstance local:StructureParameterControlViewModel, IsDesignTimeCreatable = True}"
  mc:Ignorable="d"
  d:DesignHeight="450" d:DesignWidth="800"
  Background="Transparent">

  <UserControl.Resources>
    <ToolTip x:Key="ToolTip.SpaceGroup" Style="{StaticResource App.Style.ToolTip.Default}">
      <StackPanel>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="The" />
          <Run Text="{StaticResource App.String.SpaceGroup}" Style="{StaticResource App.Style.Run.ModelObject}" />
          <Run Text="is a unique entity of your model that defines the existing symmetry operations for the unit cell." />
          <Run Text="Mocassin ships with a basic database supporting all 230 existing groups with multiple axis and origin choices." />
          <LineBreak />
          <Run Text="Keep in mind: All model input has to be done symmetry reduced and is expanded to P1 using your " Style="{StaticResource App.Style.Run.Important}"/>
          <Run Text="{StaticResource App.String.SpaceGroup}" Style="{StaticResource App.Style.Run.ModelObject}" />
          <Run Text="choice. Inversely, geometric and permutation analysis/searches will yield only symmetry reduced results." Style="{StaticResource App.Style.Run.Important}" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.ToolTip.PropertyInfo}" Style="{StaticResource App.Style.Run.Important}" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.SpaceGroup.Index}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="The index/id of the group within the international table of space groups." />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.SpaceGroup.Literal}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="The string representation/name of the group." />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.SpaceGroup.Info}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Additional symmetry information for groups with multiple axis or origin choices." />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.SpaceGroup.System}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="The crystal system that the space group belongs to." />
          <LineBreak />
        </TextBlock>

      </StackPanel>

    </ToolTip>
    <ToolTip x:Key="ToolTip.Parameters" Style="{StaticResource App.Style.ToolTip.Default}">
      <StackPanel>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="The" />
          <Run Text="{StaticResource App.String.CellParameters}" Style="{StaticResource App.Style.Run.ModelObject}" />
          <Run Text="are unique objects that describe the geometry of your unit cell." />
          <Run Text="The chosen parameters from an affine transformed space for the fractional coordinates (A,B,C)." />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.ToolTip.PropertyInfo}" Style="{StaticResource App.Style.Run.Important}" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.CellParameters.Name}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Name your unit cell" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.CellParameters.A}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Set the unit cell parameter length in A direction in [&#x212b;]" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.CellParameters.B}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Set the unit cell parameter length in B direction in [&#x212b;]" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.CellParameters.C}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Set the unit cell parameter length in C direction in [&#x212b;]" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.CellParameters.Alpha}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Set the unit cell angle &#x3B1; (A-B angle) in [°]" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.CellParameters.Beta}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Set the unit cell angle &#x3B2; (A-C angle)  in [°]" />
          <LineBreak />
        </TextBlock>

        <TextBlock Style="{StaticResource App.Style.ToolTip.TextBlock}">
          <Run Text="{StaticResource App.String.CellParameters.Gamma}" Style="{StaticResource App.Style.Run.Property}" />
          <LineBreak />
          <Run Text="Set the unit cell angle &#x3B3; (B-C angle) in [°]" />
          <LineBreak />
        </TextBlock>

      </StackPanel>

    </ToolTip>
  </UserControl.Resources>
  <Grid>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
      <RowDefinition Height="*" />
      <RowDefinition Height="Auto" />
    </Grid.RowDefinitions>

    <GroupBox Grid.Row="0"
              Style="{StaticResource App.Style.GroupBox.LeftBorder}">

      <GroupBox.Header>
        <TextBlock>
          <Run Text="[Space Group]" />
          <Run Text="[?]" ToolTip="{StaticResource ToolTip.SpaceGroup}"
               Style="{StaticResource App.Style.Run.Keyword}" />
        </TextBlock>
      </GroupBox.Header>
      <Grid Margin="{StaticResource App.Margin.GroupBoxContent}">

        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="2*" />
          <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <DataGrid Name="SpaceGroupDataGrid"
                  Grid.Row="0" Grid.Column="0"
                  ColumnWidth="*"
                  ItemsSource="{Binding SpaceGroups}"
                  SelectedItem="{Binding SelectedSpaceGroup}"
                  IsReadOnly="True"
                  AutoGenerateColumns="False"
                  GridLinesVisibility="None"
                  VerticalAlignment="Stretch"
                  HorizontalAlignment="Stretch"
                  VerticalScrollBarVisibility="Auto"
                  SelectionChanged="SpaceGroupDataGrid_OnSelectionChanged"
                  Background="Transparent">

          <DataGrid.Columns>
            <DataGridTextColumn Binding="{Binding Index}"
                                Header="Space Group" />

            <DataGridTextColumn Binding="{Binding Literal}"
                                Header="Name" />

            <DataGridTextColumn Binding="{Binding Specifier}"
                                Header="Info" />

            <DataGridTextColumn
              Binding="{Binding CrystalSystemIndex, Converter={converter:Int32ToEnumConverter}, ConverterParameter={x:Type crystalSystems:CrystalSystemId}}"
              Header="System" />

          </DataGrid.Columns>
        </DataGrid>
        <DataGrid Grid.Row="0" Grid.Column="1"
                  AutoGenerateColumns="False"
                  ColumnWidth="*"
                  GridLinesVisibility="None"
                  VerticalScrollBarVisibility="Auto"
                  ItemsSource="{Binding SelectedSpaceGroup.Operations}"
                  Background="Transparent">

          <DataGrid.Columns>
            <DataGridTextColumn Binding="{Binding Literal}">
              <DataGridTextColumn.HeaderTemplate>
                <DataTemplate>
                  <DockPanel
                    DataContext="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=DataContext.SelectedSpaceGroup}">
                    <TextBlock Text="{Binding Literal, StringFormat=Selected [{0}]}" />
                    <TextBlock Text=" (" />
                    <TextBlock Text="{Binding Operations.Count, StringFormat={}{0} Operations/}" />
                    <TextBlock
                      Text="{Binding CrystalSystemIndex, Converter={converter:Int32ToEnumConverter}, ConverterParameter={x:Type crystalSystems:CrystalSystemId}}" />
                    <TextBlock Text="{Binding Specifier, StringFormat=/{0})}" />
                  </DockPanel>
                </DataTemplate>
              </DataGridTextColumn.HeaderTemplate>
            </DataGridTextColumn>
          </DataGrid.Columns>
        </DataGrid>
      </Grid>
    </GroupBox>

    <GroupBox Grid.Row="1"
              Grid.Column="0"
              Style="{StaticResource App.Style.GroupBox.LeftBorder}">

      <GroupBox.Header>
        <TextBlock>
          <Run Text="[Cell Parameters]" />
          <Run Text="[?]" ToolTip="{StaticResource ToolTip.Parameters}"
               Style="{StaticResource App.Style.Run.Keyword}" />
        </TextBlock>
      </GroupBox.Header>

      <StackPanel VerticalAlignment="Stretch"
                  Margin="{StaticResource App.Margin.GroupBoxContent}">

        <GroupBox Header="Structure name"
                  Style="{StaticResource App.Style.GroupBox.LeftBorder}">
          <TextBox Text="{Binding StructureInfo.Name}"
                   Margin="{StaticResource App.Margin.GroupBoxContent}" />
        </GroupBox>

        <Grid DataContext="{Binding ParameterSetter}">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
          </Grid.ColumnDefinitions>

          <StackPanel Grid.Column="0">
            <GroupBox Header="Parameter 'a' [&#x212b;]"
                      Style="{StaticResource App.Style.GroupBox.LeftBorder}">

              <TextBox Style="{StaticResource App.Style.TextBox.GreyOutIfReadOnly}"
                       Margin="{StaticResource App.Margin.GroupBoxContent}"
                       Text="{Binding ParamA, UpdateSourceTrigger=PropertyChanged, Delay=500}"
                       IsReadOnly="{Binding IsReadOnlyParamA}" />

            </GroupBox>
            <GroupBox Header="Parameter 'b' [&#x212b;]"
                      Style="{StaticResource App.Style.GroupBox.LeftBorder}">

              <TextBox Style="{StaticResource App.Style.TextBox.GreyOutIfReadOnly}"
                       Margin="{StaticResource App.Margin.GroupBoxContent}"
                       Text="{Binding ParamB, UpdateSourceTrigger=PropertyChanged, Delay=500}"
                       IsReadOnly="{Binding IsReadOnlyParamB}" />

            </GroupBox>
            <GroupBox Header="Parameter 'c' [&#x212b;]"
                      Style="{StaticResource App.Style.GroupBox.LeftBorder}">

              <TextBox Style="{StaticResource App.Style.TextBox.GreyOutIfReadOnly}"
                       Margin="{StaticResource App.Margin.GroupBoxContent}"
                       Text="{Binding ParamC, UpdateSourceTrigger=PropertyChanged, Delay=500}"
                       IsReadOnly="{Binding IsReadOnlyParamC}" />

            </GroupBox>
          </StackPanel>
          <StackPanel Grid.Column="1">
            <GroupBox Header="Angle &#x3B1; [°]"
                      Style="{StaticResource App.Style.GroupBox.LeftBorder}">

              <TextBox Style="{StaticResource App.Style.TextBox.GreyOutIfReadOnly}"
                       Margin="{StaticResource App.Margin.GroupBoxContent}"
                       Text="{Binding Alpha, UpdateSourceTrigger=PropertyChanged, Delay=500}"
                       IsReadOnly="{Binding IsReadOnlyAlpha}" />

            </GroupBox>
            <GroupBox Header="Angle &#x3B2; [°]"
                      Style="{StaticResource App.Style.GroupBox.LeftBorder}">

              <TextBox Style="{StaticResource App.Style.TextBox.GreyOutIfReadOnly}"
                       Margin="{StaticResource App.Margin.GroupBoxContent}"
                       Text="{Binding Beta, UpdateSourceTrigger=PropertyChanged, Delay=500}"
                       IsReadOnly="{Binding IsReadOnlyBeta}" />

            </GroupBox>
            <GroupBox Header="Angle &#x3B3; [°]"
                      Style="{StaticResource App.Style.GroupBox.LeftBorder}">

              <TextBox Style="{StaticResource App.Style.TextBox.GreyOutIfReadOnly}"
                       Margin="{StaticResource App.Margin.GroupBoxContent}"
                       Text="{Binding Gamma, UpdateSourceTrigger=PropertyChanged, Delay=500}"
                       IsReadOnly="{Binding IsReadOnlyGamma}" />

            </GroupBox>
          </StackPanel>
        </Grid>
      </StackPanel>
    </GroupBox>
  </Grid>
</UserControl>
