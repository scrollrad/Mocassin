<UserControl x:Class="Mocassin.UI.GUI.Controls.DxVisualizer.Viewport.DxViewportView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:Mocassin.UI.GUI.Controls.DxVisualizer.Viewport"
             xmlns:hx="http://helix-toolkit.org/wpf/SharpDX"
             xmlns:popup="clr-namespace:Mocassin.UI.GUI.Base.UiElements.Popup"
             xmlns:extensions="clr-namespace:Mocassin.UI.GUI.Controls.DxVisualizer.Extensions"
             d:DataContext="{d:DesignInstance local:DxViewportViewModel, IsDesignTimeCreatable=True}"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800">
  <UserControl.Resources>
    <Thickness x:Key="Local.Thickness.ToolGridBorder">4,0,0,0</Thickness>
    <Thickness x:Key="Local.Thickness.ToolGridMargin">-4,10,0,-2</Thickness>
    <Style TargetType="{x:Type ButtonBase}" x:Key="Local.Style.ToolGridButton">
      <Setter Property="BorderThickness" Value="{StaticResource Local.Thickness.ToolGridBorder}" />
      <Setter Property="BorderBrush" Value="{x:Static SystemColors.ActiveCaptionBrush}" />
      <Setter Property="Margin" Value="{StaticResource Local.Thickness.ToolGridMargin}" />
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>
    <Style TargetType="{x:Type TextBlock}" x:Key="Local.Style.ToolGridTextBlock">
      <Setter Property="SnapsToDevicePixels" Value="True" />
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="LayoutTransform">
        <Setter.Value>
          <RotateTransform Angle="-90" />
        </Setter.Value>
      </Setter>
    </Style>
  </UserControl.Resources>
  <Grid x:Name="PrimaryGrid">
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="Auto" />
      <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>
    <Border Grid.Column="0">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
          <RowDefinition Height="*" />
          <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <popup:ControlOverlay Grid.Row="0" AllowsTransparency="True" Placement="Right" PopupAnimation="Fade"
                              IsOpen="{Binding IsSettingsOverlayActive, Mode=OneWay}">
          <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" Background="#dfffffff"
                        Height="{Binding ElementName=PrimaryGrid, Path=ActualHeight}">
            <local:DxViewportSettingsView DataContext="{Binding}" Margin="5,0,2,0" MinWidth="250" />
          </ScrollViewer>
        </popup:ControlOverlay>
        <popup:ControlOverlay Grid.Row="0" AllowsTransparency="True" Placement="Right" PopupAnimation="Fade"
                              IsOpen="{Binding IsControlHostOverlayActive, Mode=OneWay}">
          <local:DxViewportControlHostView DataContext="{Binding}" Margin="0,0,0,-2" Background="#dfffffff"
                                           MinWidth="250"
                                           Height="{Binding ElementName=PrimaryGrid, Path=ActualHeight}" />
        </popup:ControlOverlay>
        <WrapPanel Grid.Row="1" VerticalAlignment="Bottom" Orientation="Vertical">
          <Button Style="{StaticResource Local.Style.ToolGridButton}" Command="{Binding InvalidateSceneCommand}"
                  Visibility="{Binding SceneController.IsInvalidScene, Converter={StaticResource App.Converter.BooleanToVisibility}}"
                  BorderBrush="Red" Foreground="Red">
            <Button.Content>
              <TextBlock Text="Scene is invalid, click to rebuild!"
                         Style="{StaticResource Local.Style.ToolGridTextBlock}" />
            </Button.Content>
          </Button>
          <ToggleButton IsChecked="{Binding IsSettingsOverlayActive}"
                        Style="{StaticResource Local.Style.ToolGridButton}">
            <ToggleButton.Content>
              <TextBlock Text="Settings Overlay" Style="{StaticResource Local.Style.ToolGridTextBlock}" />
            </ToggleButton.Content>
          </ToggleButton>
          <ToggleButton IsChecked="{Binding IsControlHostOverlayActive}"
                        Style="{StaticResource Local.Style.ToolGridButton}">
            <ToggleButton.Content>
              <TextBlock Text="Control Overlay" Style="{StaticResource Local.Style.ToolGridTextBlock}" />
            </ToggleButton.Content>
          </ToggleButton>
          <Button Style="{StaticResource Local.Style.ToolGridButton}" Command="{Binding ResetCameraCommand}">
            <Button.Content>
              <TextBlock Text="Reset Camera" Style="{StaticResource Local.Style.ToolGridTextBlock}" />
            </Button.Content>
          </Button>
          <Button Style="{StaticResource Local.Style.ToolGridButton}" Command="{Binding ExportDxImageCommand}"
                  CommandParameter="{Binding ElementName=Viewport3Dx}">
            <Button.Content>
              <TextBlock Text="Export Image" Style="{StaticResource Local.Style.ToolGridTextBlock}" />
            </Button.Content>
          </Button>
          <Button Style="{StaticResource Local.Style.ToolGridButton}" Command="{Binding InvalidateSceneCommand}">
            <Button.Content>
              <TextBlock Text="Rebuild Scene" Style="{StaticResource Local.Style.ToolGridTextBlock}" />
            </Button.Content>
          </Button>
        </WrapPanel>
      </Grid>
    </Border>
    <hx:Viewport3DX Grid.Column="1"
                    Name="Viewport3Dx"
                    EnableSwapChainRendering="True"
                    Background="White"
                    SnapsToDevicePixels="True"
                    EffectsManager="{Binding EffectsManager, Mode=OneTime}"
                    Camera="{Binding Camera}"
                    CameraMode="{Binding CameraMode}"
                    CameraRotationMode="{Binding CameraRotationMode}"
                    BackgroundColor="{Binding BackgroundColor}"
                    ShowViewCube="{Binding ShowViewCube}"
                    ShowCoordinateSystem="{Binding ShowCoordinateSystem}"
                    ShowFrameRate="{Binding ShowRenderInformation}"
                    ShowTriangleCountInfo="{Binding ShowRenderInformation}"
                    ShowCameraInfo="{Binding ShowRenderInformation}"
                    ShowFrameDetails="{Binding ShowRenderInformation}"
                    MSAA="{Binding MsaaLevel}"
                    FXAALevel="{Binding FxaaLevel}"
                    EnableSSAO="{Binding IsSsaoEnabled}"
                    SSAOQuality="{Binding SsaoQuality}"
                    InfoBackground="{Binding InfoBackgroundBrush}"
                    InfoForeground="{Binding InfoForegroundBrush}"
                    InfiniteSpin="{Binding EnableInfiniteSpin}"
                    extensions:DxViewportExtensions.DisableMssaOnInteraction="{Binding DisableMsaaOnInteraction}"
                    extensions:DxViewportExtensions.IsInteracting="{Binding IsInteracting, Mode=OneWayToSource}"
                    PreviewMouseRightButtonDown="Viewport3Dx_OnPreviewMouseRightButtonDown"
                    PreviewMouseRightButtonUp="Viewport3Dx_OnPreviewMouseRightButtonUp">

      <hx:GroupModel3D x:Name="LightGroupModel" ItemsSource="{Binding SceneLights}" IsHitTestVisible="False" />
      <hx:GroupModel3D x:Name="HitTestVisibleGroupModels" ItemsSource="{Binding SceneElements}" IsHitTestVisible="True" />
    </hx:Viewport3DX>
  </Grid>
</UserControl>