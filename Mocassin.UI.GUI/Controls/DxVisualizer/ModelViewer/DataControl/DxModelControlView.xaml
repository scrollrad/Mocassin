<UserControl x:Class="Mocassin.UI.GUI.Controls.DxVisualizer.ModelViewer.DataControl.DxModelControlView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:Mocassin.UI.GUI.Controls.DxVisualizer.ModelViewer.DataControl"
             xmlns:comboBox="clr-namespace:Mocassin.UI.GUI.Base.UiElements.ComboBox"
             xmlns:converter="clr-namespace:Mocassin.UI.GUI.Controls.DxVisualizer.ModelViewer.DataControl.Converter"
             xmlns:scene="clr-namespace:Mocassin.UI.GUI.Controls.DxVisualizer.Viewport.Scene"
             xmlns:content="clr-namespace:Mocassin.UI.GUI.Base.UiElements.Content"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance local:DxModelControlViewModel, IsDesignTimeCreatable=True}"
             d:DesignHeight="450" d:DesignWidth="800">
  <UserControl.Resources>
    <converter:PhongMaterialCoreToStringConverter x:Key="Local.PhongMaterialCoreToStringConverter" />

    <Style TargetType="{x:Type DataGrid}">
      <Setter Property="CanUserAddRows" Value="False" />
      <Setter Property="CanUserDeleteRows" Value="False" />
      <Setter Property="RowBackground" Value="Transparent" />
      <Setter Property="AlternatingRowBackground" Value="Transparent" />
      <Setter Property="AutoGenerateColumns" Value="False" />
      <Setter Property="ColumnWidth" Value="Auto" />
      <Setter Property="Background" Value="Transparent" />
    </Style>

    <DataTemplate DataType="{x:Type scene:IDxMeshItemConfig}" x:Key="Local.DataTemplate.MeshColorColumnCellTemplate">
      <DockPanel>
        <Rectangle Height="16" Width="16" Stroke="Black" Margin="{StaticResource App.Margin.HorizontalStack}">
          <Rectangle.Fill>
            <SolidColorBrush Color="{Binding DiffuseColor, Mode=OneWay}" />
          </Rectangle.Fill>
        </Rectangle>
        <TextBlock Text="{Binding DiffuseColor}" Background="Transparent" />
      </DockPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type scene:IDxMeshItemConfig}"
                  x:Key="Local.DataTemplate.MeshColorColumnCellEditingTemplate">
      <TextBox Text="{Binding DiffuseColor}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type scene:IDxMeshItemConfig}"
                  x:Key="Local.DataTemplate.WireframeColorColumnCellTemplate">
      <DockPanel>
        <Rectangle Height="16" Width="16" Stroke="Black" Margin="{StaticResource App.Margin.HorizontalStack}">
          <Rectangle.Fill>
            <SolidColorBrush Color="{Binding WireframeColor, Mode=OneWay}" />
          </Rectangle.Fill>
        </Rectangle>
        <TextBlock Text="{Binding WireframeColor}" Background="Transparent" />
      </DockPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type scene:IDxMeshItemConfig}"
                  x:Key="Local.DataTemplate.WireframeColorColumnCellEditingTemplate">
      <TextBox Text="{Binding WireframeColor}" />
    </DataTemplate>

    <DataTemplate DataType="{x:Type scene:IDxLineItemConfig}" x:Key="Local.DataTemplate.LineColorColumnCellTemplate">
      <DockPanel>
        <Rectangle Height="16" Width="16" Stroke="Black" Margin="{StaticResource App.Margin.HorizontalStack}">
          <Rectangle.Fill>
            <SolidColorBrush Color="{Binding Color, Mode=OneWay}" />
          </Rectangle.Fill>
        </Rectangle>
        <TextBlock Text="{Binding Color}" Background="Transparent" />
      </DockPanel>
    </DataTemplate>

    <DataTemplate DataType="{x:Type scene:IDxLineItemConfig}"
                  x:Key="Local.DataTemplate.LineColorColumnCellEditingTemplate">
      <TextBox Text="{Binding Color}" />
    </DataTemplate>
  </UserControl.Resources>

  <Grid>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*" />
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto" />
      <RowDefinition Height="Auto" />
      <RowDefinition Height="*" />
      <RowDefinition Height="*" />
    </Grid.RowDefinitions>

    <content:HeaderedGroup Grid.Row="0" Header="General Configuration:"
                           Style="{StaticResource App.Style.HeaderedGroup.BoldText}">
      <content:HeaderedGroup.Resources>
        <Style TargetType="{x:Type TextBox}">
          <Setter Property="TextAlignment" Value="Right" />
          <Setter Property="DockPanel.Dock" Value="Right" />
          <Setter Property="Width" Value="75" />
        </Style>
      </content:HeaderedGroup.Resources>
      <StackPanel>
        <DockPanel Margin="{StaticResource App.Margin.VerticalStack}">
          <TextBlock Text="Boundary Range A:" DockPanel.Dock="Left" VerticalAlignment="Center" />
          <TextBox
            Text="{Binding RenderResourcesViewModel.RenderAreaMaxA, Converter={StaticResource App.Converter.NumericExpressionToValue}}">
            <TextBox.InputBindings>
              <KeyBinding Key="Enter" Command="{StaticResource App.Command.UpdateTextBoxSource}"
                          CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}" />
            </TextBox.InputBindings>
          </TextBox>
          <TextBlock Text="-" DockPanel.Dock="Right" Margin="2,0,2,0" VerticalAlignment="Center" />
          <TextBox
            Text="{Binding RenderResourcesViewModel.RenderAreaMinA, Converter={StaticResource App.Converter.NumericExpressionToValue}}">
            <TextBox.InputBindings>
              <KeyBinding Key="Enter" Command="{StaticResource App.Command.UpdateTextBoxSource}"
                          CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}" />
            </TextBox.InputBindings>
          </TextBox>
          <Rectangle />
        </DockPanel>

        <DockPanel Margin="{StaticResource App.Margin.VerticalStack}">
          <TextBlock Text="Boundary Range B:" DockPanel.Dock="Left" VerticalAlignment="Center" />
          <TextBox
            Text="{Binding RenderResourcesViewModel.RenderAreaMaxB, Converter={StaticResource App.Converter.NumericExpressionToValue}}">
            <TextBox.InputBindings>
              <KeyBinding Key="Enter" Command="{StaticResource App.Command.UpdateTextBoxSource}"
                          CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}" />
            </TextBox.InputBindings>
          </TextBox>
          <TextBlock Text="-" DockPanel.Dock="Right" Margin="2,0,2,0" VerticalAlignment="Center" />
          <TextBox
            Text="{Binding RenderResourcesViewModel.RenderAreaMinB, Converter={StaticResource App.Converter.NumericExpressionToValue}}">
            <TextBox.InputBindings>
              <KeyBinding Key="Enter" Command="{StaticResource App.Command.UpdateTextBoxSource}"
                          CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}" />
            </TextBox.InputBindings>
          </TextBox>
          <Rectangle />
        </DockPanel>

        <DockPanel Margin="{StaticResource App.Margin.VerticalStack}">
          <TextBlock Text="Boundary Range C:" DockPanel.Dock="Left" VerticalAlignment="Center" />
          <TextBox
            Text="{Binding RenderResourcesViewModel.RenderAreaMaxC, Converter={StaticResource App.Converter.NumericExpressionToValue}}">
            <TextBox.InputBindings>
              <KeyBinding Key="Enter" Command="{StaticResource App.Command.UpdateTextBoxSource}"
                          CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}" />
            </TextBox.InputBindings>
          </TextBox>
          <TextBlock Text="-" DockPanel.Dock="Right" Margin="2,0,2,0" VerticalAlignment="Center" />
          <TextBox
            Text="{Binding RenderResourcesViewModel.RenderAreaMinC, Converter={StaticResource App.Converter.NumericExpressionToValue}}">
            <TextBox.InputBindings>
              <KeyBinding Key="Enter" Command="{StaticResource App.Command.UpdateTextBoxSource}"
                          CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}" />
            </TextBox.InputBindings>
          </TextBox>
          <Rectangle />
        </DockPanel>

        <DockPanel Margin="{StaticResource App.Margin.VerticalStack}">
          <TextBlock Text="Path Object Extension Mode:" DockPanel.Dock="Left" VerticalAlignment="Center"
                     Margin="2,0,2,0"
                     ToolTip="Choose how symmetry extension affects objects that contain vector path information (Interactions, Transitions, ...)." />
          <ComboBox ItemsSource="{Binding PathSymmetryExtensionModes}"
                    SelectedItem="{Binding PathSymmetryExtensionMode}"
                    IsTextSearchEnabled="True" IsEditable="True" DockPanel.Dock="Right" />
        </DockPanel>

      </StackPanel>
    </content:HeaderedGroup>

    <content:HeaderedGroup Grid.Row="1" Header="Structure Configuration:"
                           Style="{StaticResource App.Style.HeaderedGroup.BoldText}"
                           Margin="{StaticResource App.Margin.VerticalStack}">
      <DataGrid ItemsSource="{Binding LineItemConfigs.ObservableItems}">
        <DataGrid.Columns>
          <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="180" />
          <DataGridTemplateColumn Header="Color (ARGB)" CanUserSort="False"
                                  CellTemplate="{StaticResource Local.DataTemplate.LineColorColumnCellTemplate}"
                                  CellEditingTemplate="{StaticResource Local.DataTemplate.LineColorColumnCellEditingTemplate}" />
          <DataGridTextColumn Header="Thickness"
                              Binding="{Binding LineThickness, Converter={StaticResource App.Converter.NumericExpressionToValue}}" />
          <DataGridCheckBoxColumn Header="Visible" Binding="{Binding IsVisible, UpdateSourceTrigger=PropertyChanged}" />
          <DataGridCheckBoxColumn Header="Ignore" Binding="{Binding IsInactive, UpdateSourceTrigger=PropertyChanged}" />
        </DataGrid.Columns>
      </DataGrid>
    </content:HeaderedGroup>

    <content:HeaderedGroup Grid.Row="2" Header="Position Configuration:"
                           Style="{StaticResource App.Style.HeaderedGroup.BoldText}"
                           Margin="{StaticResource App.Margin.VerticalStack}">
      <DataGrid ItemsSource="{Binding PositionItemConfigs.ObservableItems}">
        <DataGrid.Columns>
          <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="180" />
          <DataGridTemplateColumn Header="Color (Diffuse)" CanUserSort="False"
                                  CellTemplate="{StaticResource Local.DataTemplate.MeshColorColumnCellTemplate}"
                                  CellEditingTemplate="{StaticResource Local.DataTemplate.MeshColorColumnCellEditingTemplate}" />
          <DataGridTemplateColumn Header="Color (Wireframe)" CanUserSort="False"
                                  CellTemplate="{StaticResource Local.DataTemplate.WireframeColorColumnCellTemplate}"
                                  CellEditingTemplate="{StaticResource Local.DataTemplate.WireframeColorColumnCellEditingTemplate}" />
          <comboBox:BindableDataGridComboBoxColumn Header="Material"
                                                   ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.MeshMaterialNames}"
                                                   SelectedItemBinding="{Binding Material, Converter={StaticResource Local.PhongMaterialCoreToStringConverter}}" />
          <DataGridTextColumn Header="Radius"
                              Binding="{Binding MeshScaling, Converter={StaticResource App.Converter.NumericExpressionToValue}}" />
          <DataGridTextColumn Header="Quality"
                              Binding="{Binding MeshQuality, Converter={StaticResource App.Converter.NumericExpressionToValue}}" />
          <DataGridCheckBoxColumn Header="Wireframe"
                                  Binding="{Binding IsWireframeVisible, UpdateSourceTrigger=PropertyChanged}" />
          <DataGridCheckBoxColumn Header="Visible" Binding="{Binding IsVisible, UpdateSourceTrigger=PropertyChanged}" />
          <DataGridCheckBoxColumn Header="Ignore" Binding="{Binding IsInactive, UpdateSourceTrigger=PropertyChanged}" />
        </DataGrid.Columns>
      </DataGrid>
    </content:HeaderedGroup>

    <content:HeaderedGroup Grid.Row="3" Header="Transition Configurations:"
                           Style="{StaticResource App.Style.HeaderedGroup.BoldText}">
      <DataGrid ItemsSource="{Binding TransitionItemConfigs.ObservableItems}">
        <DataGrid.Columns>
          <DataGridTextColumn Header="Name" Binding="{Binding Name}" Width="180" />
          <DataGridTemplateColumn Header="Color (Diffuse)" CanUserSort="False"
                                  CellTemplate="{StaticResource Local.DataTemplate.MeshColorColumnCellTemplate}"
                                  CellEditingTemplate="{StaticResource Local.DataTemplate.MeshColorColumnCellEditingTemplate}" />
          <DataGridTemplateColumn Header="Color (Wireframe)" CanUserSort="False"
                                  CellTemplate="{StaticResource Local.DataTemplate.WireframeColorColumnCellTemplate}"
                                  CellEditingTemplate="{StaticResource Local.DataTemplate.WireframeColorColumnCellEditingTemplate}" />
          <comboBox:BindableDataGridComboBoxColumn Header="Material"
                                                   ItemsSource="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGrid}}, Path=DataContext.MeshMaterialNames}"
                                                   SelectedItemBinding="{Binding Material, Converter={StaticResource Local.PhongMaterialCoreToStringConverter}}" />
          <DataGridTextColumn Header="Radius"
                              Binding="{Binding MeshScaling, Converter={StaticResource App.Converter.NumericExpressionToValue}}" />
          <DataGridTextColumn Header="Quality"
                              Binding="{Binding MeshQuality, Converter={StaticResource App.Converter.NumericExpressionToValue}}" />
          <DataGridCheckBoxColumn Header="Wireframe"
                                  Binding="{Binding IsWireframeVisible, UpdateSourceTrigger=PropertyChanged}" />
          <DataGridCheckBoxColumn Header="Visible" Binding="{Binding IsVisible, UpdateSourceTrigger=PropertyChanged}" />
          <DataGridCheckBoxColumn Header="Ignore" Binding="{Binding IsInactive, UpdateSourceTrigger=PropertyChanged}" />
        </DataGrid.Columns>
      </DataGrid>
    </content:HeaderedGroup>
  </Grid>
</UserControl>